{
  "address": "0x9eFdA721Cfa24DA62c5011394F1dBC05C0FDBe83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBoxV1",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "shareIn",
          "type": "uint256"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMinOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "path1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "path2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb47cef6711e872cd37dda86c478dae1a43c95a3efcc012c9f3977d4f3e82c5b",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0x9eFdA721Cfa24DA62c5011394F1dBC05C0FDBe83",
    "transactionIndex": 0,
    "gasUsed": "5700000",
    "logsBloom": "0x
    "blockHash": "0x2960c48f1cc5fa1bc6b69202029166eee19ad3ad1310a0e689a79d34208d87cd",
    "transactionHash": "0xbb47cef6711e872cd37dda86c478dae1a43c95a3efcc012c9f3977d4f3e82c5b",
    "logs": [],
    "blockNumber": 3853550,
    "cumulativeGasUsed": "5700000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaa094cA3FBd19dCCcE91C79d1FffA28293B05f28",
    "0xEfbb25ec12EB1aAe98600c5614F9C4BCAff41F5d",
    "0xacca68b46e4aa677641d8d20d81c9f4b252af83de62ff9e2fb58a9b648ee3537"
  ],
  "solcInputHash": "a2ccfbfab4a4fa2f4b6cbf8a8ea3ae50",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"path1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"path2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bentobox/SushiSwapMultiSwapperFlat.sol\":\"SushiSwapMultiSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/bentobox/SushiSwapMultiSwapperFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File contracts/swappers/SushiSwapMultiSwapper.sol\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.1\\n// License-Identifier: MIT\\ninterface IERC20 {\\n\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.1\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.1\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n}\\n\\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol@v1.4.2\\n// License-Identifier: GPL-3.0\\n\\ninterface IUniswapV2Pair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/libraries/UniswapV2Library.sol\\n// License-Identifier: GPL-3.0\\n\\nlibrary UniswapV2Library {\\n    using BoringMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        pairCodeHash // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, pairCodeHash)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1], pairCodeHash);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\\n// License-Identifier: MIT\\n\\ninterface IBentoBoxV1 {\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/swappers/SushiSwapMultiSwapper.sol\\n// License-Identifier: GPL-3.0\\n\\ncontract SushiSwapMultiSwapper {\\n    using BoringERC20 for IERC20;\\n    using BoringMath for uint256;\\n\\n    address private immutable factory;\\n    IBentoBoxV1 private immutable bentoBox;\\n    bytes32 private immutable pairCodeHash;\\n\\n    constructor(\\n        address _factory,\\n        IBentoBoxV1 _bentoBox,\\n        bytes32 _pairCodeHash\\n    ) public {\\n        factory = _factory;\\n        bentoBox = _bentoBox;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n\\n    function getOutputAmount(\\n        IERC20 tokenIn,\\n        address[] calldata path,\\n        uint256 shareIn\\n    ) external view returns (uint256 amountOut) {\\n        uint256 amountIn = bentoBox.toAmount(tokenIn, shareIn, false);\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, pairCodeHash);\\n        amountOut = amounts[amounts.length - 1];\\n    }\\n\\n    function swap(\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 amountMinOut,\\n        address path1,\\n        address path2,\\n        address to,\\n        uint256 baseShare,\\n        uint256 shareIn\\n    ) external returns (uint256) {\\n        address[] memory path;\\n        if (path2 == address(0)) {\\n            if (path1 == address(0)) {\\n                path = new address[](2);\\n                path[1] = address(tokenOut);\\n            } else {\\n                path = new address[](3);\\n                path[1] = path1;\\n                path[2] = address(tokenOut);\\n            }\\n        } else {\\n            path = new address[](4);\\n            path[1] = path1;\\n            path[2] = path2;\\n            path[3] = address(tokenOut);\\n        }\\n        path[0] = address(tokenIn);\\n        (uint256 amountIn, ) = bentoBox.withdraw(tokenIn, address(this), UniswapV2Library.pairFor(factory, path[0], path[1], pairCodeHash), 0, shareIn);\\n        uint256 amount = _swapExactTokensForTokens(amountIn, amountMinOut, path, address(bentoBox));\\n        (, uint256 share) = bentoBox.deposit(tokenOut, address(bentoBox), to, amount, 0);\\n        return baseShare.add(share);\\n    }\\n\\n    // Swaps an exact amount of tokens for another token through the path passed as an argument\\n    // Returns the amount of the final token\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, pairCodeHash);\\n        amountOut = amounts[amounts.length - 1];\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n        _swap(amounts, path, to);\\n    }\\n\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2], pairCodeHash) : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output, pairCodeHash)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0x4238d139611fc74c59e0b6b3962ddf65127051e9bf49cadb7655e8745e5d2bbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161125d38038061125d83398101604081905261002f91610052565b6001600160601b0319606093841b81166080529190921b1660a05260c0526100ac565b600080600060608486031215610066578283fd5b835161007181610094565b602085015190935061008281610094565b80925050604084015190509250925092565b6001600160a01b03811681146100a957600080fd5b50565b60805160601c60a05160601c60c051611149610114600039806101765280610418528061078b5280610b26525080607c528061039952806104bd52806104e7528061051752508061012452806103cd52806107685280610acd5280610b0352506111496000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632c74ce471461003b5780633087d74214610064575b600080fd5b61004e610049366004610c29565b610077565b60405161005b919061106c565b60405180910390f35b61004e610072366004610cb1565b6101c5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166356623118878560006040518463ffffffff1660e01b81526004016100cb93929190610e5e565b60206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011b9190610d90565b9050606061019f7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092506105ca915050565b9050806001825103815181106101b157fe5b602002602001015192505050949350505050565b600060606001600160a01b0386166102bb576001600160a01b038716610238576040805160028082526060820183529091602083019080368337019050509050888160018151811061021357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506102b6565b604080516003808252608082019092529060208201606080368337019050509050868160018151811061026757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160028151811061029557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b610367565b60408051600480825260a08201909252906020820160808036833701905050905086816001815181106102ea57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160028151811061031857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160038151811061034657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b898160008151811061037557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d308c3061043c7f0000000000000000000000000000000000000000000000000000000000000000876000815181106103f957fe5b60200260200101518860018151811061040e57fe5b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006106ec565b6000896040518663ffffffff1660e01b815260040161045f959493929190610e2a565b6040805180830381600087803b15801561047857600080fd5b505af115801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190610da8565b50905060006104e1828b857f000000000000000000000000000000000000000000000000000000000000000061075f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8d7f00000000000000000000000000000000000000000000000000000000000000008b8660006040518663ffffffff1660e01b815260040161055a959493929190610e2a565b6040805180830381600087803b15801561057357600080fd5b505af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610da8565b91506105b9905087826107f6565b9d9c50505050505050505050505050565b60606002835110156105f75760405162461bcd60e51b81526004016105ee90610ec6565b60405180910390fd5b825167ffffffffffffffff8111801561060f57600080fd5b50604051908082528060200260200182016040528015610639578160200160208202803683370190505b509050838160008151811061064a57fe5b60200260200101818152505060005b60018451038110156106e35760008061069d8887858151811061067857fe5b602002602001015188866001018151811061068f57fe5b60200260200101518861081f565b915091506106bf8484815181106106b057fe5b602002602001015183836108fa565b8484600101815181106106ce57fe5b60209081029190910101525050600101610659565b50949350505050565b60008060006106fb8686610994565b91509150868282604051602001610713929190610dcb565b604051602081830303815290604052805190602001208560405160200161073c93929190610df2565b60408051601f198184030181529190528051602090910120979650505050505050565b600060606107af7f000000000000000000000000000000000000000000000000000000000000000087867f00000000000000000000000000000000000000000000000000000000000000006105ca565b9050806001825103815181106107c157fe5b60200260200101519150848210156107eb5760405162461bcd60e51b81526004016105ee90611035565b6106e3818585610a1e565b818101818110156108195760405162461bcd60e51b81526004016105ee90610efd565b92915050565b600080600061082e8686610994565b509050600080610840898989896106ec565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561087857600080fd5b505afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b09190610d3c565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b0316146108e75780826108ea565b81815b909a909950975050505050505050565b600080841161091b5760405162461bcd60e51b81526004016105ee90610fb3565b60008311801561092b5750600082115b6109475760405162461bcd60e51b81526004016105ee90610f34565b6000610955856103e5610bf2565b905060006109638285610bf2565b9050600061097d83610977886103e8610bf2565b906107f6565b905080828161098857fe5b04979650505050505050565b600080826001600160a01b0316846001600160a01b031614156109c95760405162461bcd60e51b81526004016105ee90610e81565b826001600160a01b0316846001600160a01b0316106109e95782846109ec565b83835b90925090506001600160a01b038216610a175760405162461bcd60e51b81526004016105ee90610f7c565b9250929050565b60005b6001835103811015610bec57600080848381518110610a3c57fe5b6020026020010151858460010181518110610a5357fe5b6020026020010151915091506000610a6b8383610994565b5090506000878560010181518110610a7f57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b031614610aad57826000610ab1565b6000835b91509150600060028a51038810610ac85788610afc565b610afc7f0000000000000000000000000000000000000000000000000000000000000000878c8b6002018151811061040e57fe5b9050610b4a7f000000000000000000000000000000000000000000000000000000000000000088887f00000000000000000000000000000000000000000000000000000000000000006106ec565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015610b87576020820181803683370190505b506040518563ffffffff1660e01b8152600401610ba79493929190611075565b600060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505060019099019850610a21975050505050505050565b50505050565b6000811580610c0d57505080820282828281610c0a57fe5b04145b6108195760405162461bcd60e51b81526004016105ee90610ffe565b60008060008060608587031215610c3e578384fd5b8435610c49816110e6565b9350602085013567ffffffffffffffff80821115610c65578485fd5b818701915087601f830112610c78578485fd5b813581811115610c86578586fd5b8860208083028501011115610c99578586fd5b95986020929092019750949560400135945092505050565b600080600080600080600080610100898b031215610ccd578384fd5b8835610cd8816110e6565b97506020890135610ce8816110e6565b9650604089013595506060890135610cff816110e6565b94506080890135610d0f816110e6565b935060a0890135610d1f816110e6565b979a969950949793969295929450505060c08201359160e0013590565b600080600060608486031215610d50578283fd5b8351610d5b816110fe565b6020850151909350610d6c816110fe565b604085015190925063ffffffff81168114610d85578182fd5b809150509250925092565b600060208284031215610da1578081fd5b5051919050565b60008060408385031215610dba578182fd5b505080516020909101519092909150565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526017908201527f696e73756666696369656e742d616d6f756e742d6f7574000000000000000000604082015260600190565b90815260200190565b60008582526020858184015260018060a01b0385166040840152608060608401528351806080850152825b818110156110bc5785810183015185820160a0015282016110a0565b818111156110cd578360a083870101525b50601f01601f19169290920160a0019695505050505050565b6001600160a01b03811681146110fb57600080fd5b50565b6001600160701b03811681146110fb57600080fdfea2646970667358221220f438f0bd5ac88f8aba4fb62b64c3a4b44671482b4b0407b6e7f00ea57786907564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632c74ce471461003b5780633087d74214610064575b600080fd5b61004e610049366004610c29565b610077565b60405161005b919061106c565b60405180910390f35b61004e610072366004610cb1565b6101c5565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166356623118878560006040518463ffffffff1660e01b81526004016100cb93929190610e5e565b60206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011b9190610d90565b9050606061019f7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092506105ca915050565b9050806001825103815181106101b157fe5b602002602001015192505050949350505050565b600060606001600160a01b0386166102bb576001600160a01b038716610238576040805160028082526060820183529091602083019080368337019050509050888160018151811061021357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506102b6565b604080516003808252608082019092529060208201606080368337019050509050868160018151811061026757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160028151811061029557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b610367565b60408051600480825260a08201909252906020820160808036833701905050905086816001815181106102ea57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160028151811061031857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160038151811061034657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b898160008151811061037557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d308c3061043c7f0000000000000000000000000000000000000000000000000000000000000000876000815181106103f957fe5b60200260200101518860018151811061040e57fe5b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006106ec565b6000896040518663ffffffff1660e01b815260040161045f959493929190610e2a565b6040805180830381600087803b15801561047857600080fd5b505af115801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190610da8565b50905060006104e1828b857f000000000000000000000000000000000000000000000000000000000000000061075f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8d7f00000000000000000000000000000000000000000000000000000000000000008b8660006040518663ffffffff1660e01b815260040161055a959493929190610e2a565b6040805180830381600087803b15801561057357600080fd5b505af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610da8565b91506105b9905087826107f6565b9d9c50505050505050505050505050565b60606002835110156105f75760405162461bcd60e51b81526004016105ee90610ec6565b60405180910390fd5b825167ffffffffffffffff8111801561060f57600080fd5b50604051908082528060200260200182016040528015610639578160200160208202803683370190505b509050838160008151811061064a57fe5b60200260200101818152505060005b60018451038110156106e35760008061069d8887858151811061067857fe5b602002602001015188866001018151811061068f57fe5b60200260200101518861081f565b915091506106bf8484815181106106b057fe5b602002602001015183836108fa565b8484600101815181106106ce57fe5b60209081029190910101525050600101610659565b50949350505050565b60008060006106fb8686610994565b91509150868282604051602001610713929190610dcb565b604051602081830303815290604052805190602001208560405160200161073c93929190610df2565b60408051601f198184030181529190528051602090910120979650505050505050565b600060606107af7f000000000000000000000000000000000000000000000000000000000000000087867f00000000000000000000000000000000000000000000000000000000000000006105ca565b9050806001825103815181106107c157fe5b60200260200101519150848210156107eb5760405162461bcd60e51b81526004016105ee90611035565b6106e3818585610a1e565b818101818110156108195760405162461bcd60e51b81526004016105ee90610efd565b92915050565b600080600061082e8686610994565b509050600080610840898989896106ec565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561087857600080fd5b505afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b09190610d3c565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b0316146108e75780826108ea565b81815b909a909950975050505050505050565b600080841161091b5760405162461bcd60e51b81526004016105ee90610fb3565b60008311801561092b5750600082115b6109475760405162461bcd60e51b81526004016105ee90610f34565b6000610955856103e5610bf2565b905060006109638285610bf2565b9050600061097d83610977886103e8610bf2565b906107f6565b905080828161098857fe5b04979650505050505050565b600080826001600160a01b0316846001600160a01b031614156109c95760405162461bcd60e51b81526004016105ee90610e81565b826001600160a01b0316846001600160a01b0316106109e95782846109ec565b83835b90925090506001600160a01b038216610a175760405162461bcd60e51b81526004016105ee90610f7c565b9250929050565b60005b6001835103811015610bec57600080848381518110610a3c57fe5b6020026020010151858460010181518110610a5357fe5b6020026020010151915091506000610a6b8383610994565b5090506000878560010181518110610a7f57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b031614610aad57826000610ab1565b6000835b91509150600060028a51038810610ac85788610afc565b610afc7f0000000000000000000000000000000000000000000000000000000000000000878c8b6002018151811061040e57fe5b9050610b4a7f000000000000000000000000000000000000000000000000000000000000000088887f00000000000000000000000000000000000000000000000000000000000000006106ec565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015610b87576020820181803683370190505b506040518563ffffffff1660e01b8152600401610ba79493929190611075565b600060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505060019099019850610a21975050505050505050565b50505050565b6000811580610c0d57505080820282828281610c0a57fe5b04145b6108195760405162461bcd60e51b81526004016105ee90610ffe565b60008060008060608587031215610c3e578384fd5b8435610c49816110e6565b9350602085013567ffffffffffffffff80821115610c65578485fd5b818701915087601f830112610c78578485fd5b813581811115610c86578586fd5b8860208083028501011115610c99578586fd5b95986020929092019750949560400135945092505050565b600080600080600080600080610100898b031215610ccd578384fd5b8835610cd8816110e6565b97506020890135610ce8816110e6565b9650604089013595506060890135610cff816110e6565b94506080890135610d0f816110e6565b935060a0890135610d1f816110e6565b979a969950949793969295929450505060c08201359160e0013590565b600080600060608486031215610d50578283fd5b8351610d5b816110fe565b6020850151909350610d6c816110fe565b604085015190925063ffffffff81168114610d85578182fd5b809150509250925092565b600060208284031215610da1578081fd5b5051919050565b60008060408385031215610dba578182fd5b505080516020909101519092909150565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526017908201527f696e73756666696369656e742d616d6f756e742d6f7574000000000000000000604082015260600190565b90815260200190565b60008582526020858184015260018060a01b0385166040840152608060608401528351806080850152825b818110156110bc5785810183015185820160a0015282016110a0565b818111156110cd578360a083870101525b50601f01601f19169290920160a0019695505050505050565b6001600160a01b03811681146110fb57600080fd5b50565b6001600160701b03811681146110fb57600080fdfea2646970667358221220f438f0bd5ac88f8aba4fb62b64c3a4b44671482b4b0407b6e7f00ea57786907564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}