{
  "address": "0xCBf32De949BA7f0c213315867100C089b2F1E1Ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISushiBar",
          "name": "bar_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "sushi_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amountAdded",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amountAdded",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "skim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf385de91539e4873033b949607638427e8dd41960181251befec0831234023e",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0xCBf32De949BA7f0c213315867100C089b2F1E1Ac",
    "transactionIndex": 0,
    "gasUsed": "5700000",
    "logsBloom": "0x
    "blockHash": "0x337ec747f2149074184ed5d52ea3fa5770b9b4bb2d6a62c165ddcc2209de0910",
    "transactionHash": "0xdf385de91539e4873033b949607638427e8dd41960181251befec0831234023e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3733869,
        "transactionHash": "0xdf385de91539e4873033b949607638427e8dd41960181251befec0831234023e",
        "address": "0xCBf32De949BA7f0c213315867100C089b2F1E1Ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b69d54a4e31f24afdd9eb1b53f8319ac83c646c9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x337ec747f2149074184ed5d52ea3fa5770b9b4bb2d6a62c165ddcc2209de0910"
      }
    ],
    "blockNumber": 3733869,
    "cumulativeGasUsed": "5700000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xceb95423B86c1823deC2Cc6F877997DC9349C2F1",
    "0xa11ad60dB5f7170c3447c9b87a7801246BeA5c73"
  ],
  "solcInputHash": "e63f957c29c087e709180d3d8b0fa519",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISushiBar\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exit(uint256)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"harvest(uint256,address)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\",\"sender\":\"The address of the initiator of this transaction. Can be used for reimbursements, etc.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"skim(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to invest.\"}},\"withdraw(uint256)\":{\"details\":\"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\",\"params\":{\"amount\":\"The requested amount the caller wants to withdraw.\"},\"returns\":{\"actualAmount\":\"The real amount that is withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit(uint256)\":{\"notice\":\"Withdraw all assets in the safest way possible. This shouldn't fail.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest any profits made converted to the asset and pass them to the caller.\"},\"skim(uint256)\":{\"notice\":\"Send the assets to the Strategy and call skim to invest them.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw assets. The returned amount can differ from the requested amount due to rounding.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bentobox/SushiStrategy.sol\":\"SushiStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract BoringOwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract BoringOwnable is BoringOwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n        \\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x5ee0d5606a9dd683203a34ecde9ea08e4e5ffd3ae2c0ea16d94192cac0db94e3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xbc2bbe46ffb84b39aa0e39c925b071e3a2ce6e912f7f216619550a38bbf0f9b3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary BoringERC20 {\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\",\"keccak256\":\"0x74e55a994e33a3d6ca777c4adbd573b5427e33030c1e8603dc09f07b5f4d0a51\",\"license\":\"UNLICENSED\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"BoringMath: Mul Overflow\\\");}\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\n}\\n\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\n}\\n\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\n}\",\"keccak256\":\"0x697187e610e3fb6d83cbb7a21d3207acd587fee596efde089e48e159ff29687e\",\"license\":\"MIT\"},\"contracts/bentobox/SushiStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\n\\n\\ninterface IStrategy {\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\n    /// @param amount The amount of tokens to invest.\\n    function skim(uint256 amount) external;\\n\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    /// @dev The `actualAmount` should be very close to the amount.\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\n    /// @param amount The requested amount the caller wants to withdraw.\\n    /// @return actualAmount The real amount that is withdrawn.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n\\ninterface ISushiBar is IERC20 {\\n    function enter(uint256 _amount) external;\\n\\n    function leave(uint256 _share) external;\\n}\\n\\ncontract SushiStrategy is IStrategy, BoringOwnable {\\n    using BoringMath for uint256;\\n    using BoringERC20 for IERC20;\\n\\n    IERC20 private immutable sushi;\\n    ISushiBar private immutable bar;\\n\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\n        bar = bar_;\\n        sushi = sushi_;\\n    }\\n\\n    // Send the assets to the Strategy and call skim to invest them\\n    /// @inheritdoc IStrategy\\n    function skim(uint256 amount) external override {\\n        sushi.approve(address(bar), amount);\\n        bar.enter(amount);\\n    }\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    /// @inheritdoc IStrategy\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\n        uint256 share = bar.balanceOf(address(this));\\n        uint256 totalShares = bar.totalSupply();\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\n        uint256 harvestShare = share.sub(keepShare);\\n        bar.leave(harvestShare);\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\n    }\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\n    /// @inheritdoc IStrategy\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\n        uint256 totalShares = bar.totalSupply();\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\n        uint256 share = bar.balanceOf(address(this));\\n        if (withdrawShare > share) {\\n            withdrawShare = share;\\n        }\\n        bar.leave(withdrawShare);\\n        actualAmount = sushi.balanceOf(address(this));\\n        sushi.safeTransfer(owner, actualAmount);\\n    }\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    /// @inheritdoc IStrategy\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\n        uint256 share = bar.balanceOf(address(this));\\n        bar.leave(share);\\n\\n        uint256 amount = sushi.balanceOf(address(this));\\n        amountAdded = int256(amount) - int256(balance);\\n        sushi.safeTransfer(owner, amount);\\n    }\\n}\",\"keccak256\":\"0x72325c2a1c4575d6b084882f58b3755e3f739fdba405783b7a71dfd0cf924823\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516112333803806112338339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606092831b811660a052911b1660805260805160601c60a05160601c61111761011c6000398061031652806103cd5280610457528061052552806106cd5280610768528061082a52806108d15280610b185280610bcb5280610c7f5280610d3a52508061048752806105bf52806106475280610798528061096b52806109f35280610ae95280610d9e5280610e4e52506111176000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636939aaf51161005b5780636939aaf5146101285780637f8661a1146101455780638da5cb5b14610162578063e30c39781461018657610088565b8063078dfbe71461008d57806318fccc76146100c55780632e1a7d4d146101035780634e71e0c814610120575b600080fd5b6100c3600480360360608110156100a357600080fd5b506001600160a01b0381351690602081013515159060400135151561018e565b005b6100f1600480360360408110156100db57600080fd5b50803590602001356001600160a01b03166102c4565b60408051918252519081900360200190f35b6100f16004803603602081101561011957600080fd5b503561067b565b6100c3610a25565b6100c36004803603602081101561013e57600080fd5b5035610ae7565b6100f16004803603602081101561015b57600080fd5b5035610c2d565b61016a610e7e565b604080516001600160a01b039092168252519081900360200190f35b61016a610e8d565b6000546001600160a01b031633146101db576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b81156102a3576001600160a01b0383161515806101f55750805b61023e576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b0319918216179091556001805490911690556102bf565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b600080546001600160a01b03163314610312576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561038157600080fd5b505afa158015610395573d6000803e3d6000fd5b505050506040513d60208110156103ab57600080fd5b5051604080516318160ddd60e01b815290519192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561041357600080fd5b505afa158015610427573d6000803e3d6000fd5b505050506040513d602081101561043d57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156104d057600080fd5b505afa1580156104e4573d6000803e3d6000fd5b505050506040513d60208110156104fa57600080fd5b5051905060008161050b8885610e9c565b8161051257fe5b04905060006105218583610f0e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367dfd4c9826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561058957600080fd5b505af115801561059d573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693506370a0823192506024808301926020929190829003018186803b15801561060757600080fd5b505afa15801561061b573d6000803e3d6000fd5b505050506040513d602081101561063157600080fd5b5051600054909650610670906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911688610f5e565b505050505092915050565b600080546001600160a01b031633146106c9576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d602081101561074e57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d602081101561080b57600080fd5b5051905060008161081c8685610e9c565b8161082357fe5b04905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d60208110156108bf57600080fd5b50519050808211156108cf578091505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367dfd4c9836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561093557600080fd5b505af1158015610949573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693506370a0823192506024808301926020929190829003018186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d60208110156109dd57600080fd5b5051600054909550610a1c906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911687610f5e565b50505050919050565b6001546001600160a01b0316338114610a85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d6020811015610ba857600080fd5b505060408051632967cf8360e21b81526004810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a59f3e0c91602480830192600092919082900301818387803b158015610c1257600080fd5b505af1158015610c26573d6000803e3d6000fd5b5050505050565b600080546001600160a01b03163314610c7b576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6020811015610d1457600080fd5b5051604080516367dfd4c960e01b81526004810183905290519192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916367dfd4c99160248082019260009290919082900301818387803b158015610d8257600080fd5b505af1158015610d96573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b50516000548582039450909150610e77906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683610f5e565b5050919050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6000811580610eb757505080820282828281610eb457fe5b04145b610f08576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b92915050565b80820382811115610f08576040805162461bcd60e51b8152602060048201526015602482015274426f72696e674d6174683a20556e646572666c6f7760581b604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610fdb5780518252601f199092019160209182019101610fbc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461103d576040519150601f19603f3d011682016040523d82523d6000602084013e611042565b606091505b5091509150818015611070575080511580611070575080806020019051602081101561106d57600080fd5b50515b610c26576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f06067476f3a363720402ef8220a49692df936f5355836b3ba588ebf213e29ab64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80636939aaf51161005b5780636939aaf5146101285780637f8661a1146101455780638da5cb5b14610162578063e30c39781461018657610088565b8063078dfbe71461008d57806318fccc76146100c55780632e1a7d4d146101035780634e71e0c814610120575b600080fd5b6100c3600480360360608110156100a357600080fd5b506001600160a01b0381351690602081013515159060400135151561018e565b005b6100f1600480360360408110156100db57600080fd5b50803590602001356001600160a01b03166102c4565b60408051918252519081900360200190f35b6100f16004803603602081101561011957600080fd5b503561067b565b6100c3610a25565b6100c36004803603602081101561013e57600080fd5b5035610ae7565b6100f16004803603602081101561015b57600080fd5b5035610c2d565b61016a610e7e565b604080516001600160a01b039092168252519081900360200190f35b61016a610e8d565b6000546001600160a01b031633146101db576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b81156102a3576001600160a01b0383161515806101f55750805b61023e576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b0319918216179091556001805490911690556102bf565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b600080546001600160a01b03163314610312576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561038157600080fd5b505afa158015610395573d6000803e3d6000fd5b505050506040513d60208110156103ab57600080fd5b5051604080516318160ddd60e01b815290519192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916318160ddd916004808301926020929190829003018186803b15801561041357600080fd5b505afa158015610427573d6000803e3d6000fd5b505050506040513d602081101561043d57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156104d057600080fd5b505afa1580156104e4573d6000803e3d6000fd5b505050506040513d60208110156104fa57600080fd5b5051905060008161050b8885610e9c565b8161051257fe5b04905060006105218583610f0e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367dfd4c9826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561058957600080fd5b505af115801561059d573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693506370a0823192506024808301926020929190829003018186803b15801561060757600080fd5b505afa15801561061b573d6000803e3d6000fd5b505050506040513d602081101561063157600080fd5b5051600054909650610670906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911688610f5e565b505050505092915050565b600080546001600160a01b031633146106c9576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561072457600080fd5b505afa158015610738573d6000803e3d6000fd5b505050506040513d602081101561074e57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b1580156107e157600080fd5b505afa1580156107f5573d6000803e3d6000fd5b505050506040513d602081101561080b57600080fd5b5051905060008161081c8685610e9c565b8161082357fe5b04905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d60208110156108bf57600080fd5b50519050808211156108cf578091505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367dfd4c9836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561093557600080fd5b505af1158015610949573d6000803e3d6000fd5b5050604080516370a0823160e01b815230600482015290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693506370a0823192506024808301926020929190829003018186803b1580156109b357600080fd5b505afa1580156109c7573d6000803e3d6000fd5b505050506040513d60208110156109dd57600080fd5b5051600054909550610a1c906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911687610f5e565b50505050919050565b6001546001600160a01b0316338114610a85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050506040513d6020811015610ba857600080fd5b505060408051632967cf8360e21b81526004810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a59f3e0c91602480830192600092919082900301818387803b158015610c1257600080fd5b505af1158015610c26573d6000803e3d6000fd5b5050505050565b600080546001600160a01b03163314610c7b576040805162461bcd60e51b815260206004820181905260248201526000805160206110c2833981519152604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d6020811015610d1457600080fd5b5051604080516367dfd4c960e01b81526004810183905290519192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916367dfd4c99160248082019260009290919082900301818387803b158015610d8257600080fd5b505af1158015610d96573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b50516000548582039450909150610e77906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683610f5e565b5050919050565b6000546001600160a01b031681565b6001546001600160a01b031681565b6000811580610eb757505080820282828281610eb457fe5b04145b610f08576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b92915050565b80820382811115610f08576040805162461bcd60e51b8152602060048201526015602482015274426f72696e674d6174683a20556e646572666c6f7760581b604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610fdb5780518252601f199092019160209182019101610fbc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461103d576040519150601f19603f3d011682016040523d82523d6000602084013e611042565b606091505b5091509150818015611070575080511580611070575080806020019051602081101561106d57600080fd5b50515b610c26576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f06067476f3a363720402ef8220a49692df936f5355836b3ba588ebf213e29ab64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "exit(uint256)": {
        "params": {
          "balance": "The amount of tokens the caller thinks it has invested."
        },
        "returns": {
          "amountAdded": "The delta (+profit or -loss) that occured in contrast to `balance`."
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "balance": "The amount of tokens the caller thinks it has invested.",
          "sender": "The address of the initiator of this transaction. Can be used for reimbursements, etc."
        },
        "returns": {
          "amountAdded": "The delta (+profit or -loss) that occured in contrast to `balance`."
        }
      },
      "skim(uint256)": {
        "params": {
          "amount": "The amount of tokens to invest."
        }
      },
      "withdraw(uint256)": {
        "details": "The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.",
        "params": {
          "amount": "The requested amount the caller wants to withdraw."
        },
        "returns": {
          "actualAmount": "The real amount that is withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exit(uint256)": {
        "notice": "Withdraw all assets in the safest way possible. This shouldn't fail."
      },
      "harvest(uint256,address)": {
        "notice": "Harvest any profits made converted to the asset and pass them to the caller."
      },
      "skim(uint256)": {
        "notice": "Send the assets to the Strategy and call skim to invest them."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw assets. The returned amount can differ from the requested amount due to rounding."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 149,
        "contract": "contracts/bentobox/SushiStrategy.sol:SushiStrategy",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 151,
        "contract": "contracts/bentobox/SushiStrategy.sol:SushiStrategy",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}