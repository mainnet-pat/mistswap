{
  "address": "0x6D701f555d0C6C4df19c6FD4Cb846181871A958C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBoxV1",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "shareOut",
          "type": "uint256"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMaxIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "path1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "path2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareOut",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3522decc6ce7591eab5858e473be097d2a349065ff1dc6d14f8b6521d86f4ae3",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0x6D701f555d0C6C4df19c6FD4Cb846181871A958C",
    "transactionIndex": 0,
    "gasUsed": "5700000",
    "logsBloom": "0x
    "blockHash": "0xb12b89c55c34db2a95df7c5966af9f22dc27f516f86e43e6fd659ecfdb0b81df",
    "transactionHash": "0x3522decc6ce7591eab5858e473be097d2a349065ff1dc6d14f8b6521d86f4ae3",
    "logs": [],
    "blockNumber": 3853648,
    "cumulativeGasUsed": "5700000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaa094cA3FBd19dCCcE91C79d1FffA28293B05f28",
    "0xEfbb25ec12EB1aAe98600c5614F9C4BCAff41F5d",
    "0xacca68b46e4aa677641d8d20d81c9f4b252af83de62ff9e2fb58a9b648ee3537"
  ],
  "solcInputHash": "a42d4aae0f924acde9e21d96732ba719",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMaxIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"path1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"path2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bentobox/SushiSwapMultiExactSwapperFlat.sol\":\"SushiSwapMultiExactSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/bentobox/SushiSwapMultiExactSwapperFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File contracts/swappers/SushiSwapMultiExactSwapper.sol\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.1\\n// License-Identifier: MIT\\ninterface IERC20 {\\n\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.1\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.1\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n}\\n\\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol@v1.4.2\\n// License-Identifier: GPL-3.0\\n\\ninterface IUniswapV2Pair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File contracts/libraries/UniswapV2Library.sol\\n// License-Identifier: GPL-3.0\\n\\nlibrary UniswapV2Library {\\n    using BoringMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        pairCodeHash // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, pairCodeHash)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n    \\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1], pairCodeHash);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n    \\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path, bytes32 pairCodeHash) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], pairCodeHash);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\\n// License-Identifier: MIT\\n\\ninterface IBentoBoxV1 {\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n    \\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n    \\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/swappers/SushiSwapMultiSwapper.sol\\n// License-Identifier: GPL-3.0\\n\\ncontract SushiSwapMultiExactSwapper {\\n    using BoringERC20 for IERC20;\\n    using BoringMath for uint256;\\n\\n    address private immutable factory;\\n    IBentoBoxV1 private immutable bentoBox;\\n    bytes32 private immutable pairCodeHash;\\n\\n    constructor(\\n        address _factory,\\n        IBentoBoxV1 _bentoBox,\\n        bytes32 _pairCodeHash\\n    ) public {\\n        factory = _factory;\\n        bentoBox = _bentoBox;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n\\n    function getInputAmount(\\n        IERC20 tokenOut,\\n        address[] memory path,\\n        uint256 shareOut\\n    ) public view returns (uint256 amountIn) {\\n        uint256 amountOut = bentoBox.toAmount(tokenOut, shareOut, true);\\n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path, pairCodeHash);\\n        amountIn = amounts[0];\\n    }\\n\\n    function swap(\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        uint256 amountMaxIn,\\n        address path1,\\n        address path2,\\n        address to,\\n        uint256 shareIn,\\n        uint256 shareOut\\n    ) external returns (uint256) {\\n        address[] memory path;\\n        if (path2 == address(0)) {\\n            if (path1 == address(0)) {\\n                path = new address[](2);\\n                path[1] = address(tokenOut);\\n            } else {\\n                path = new address[](3);\\n                path[1] = path1;\\n                path[2] = address(tokenOut);\\n            }\\n        } else {\\n            path = new address[](4);\\n            path[1] = path1;\\n            path[2] = path2;\\n            path[3] = address(tokenOut);\\n        }\\n        path[0] = address(tokenIn);\\n        uint256 amountIn = getInputAmount(tokenOut, path, shareOut);\\n        require(amountIn <= amountMaxIn, \\\"insufficient-amount-in\\\");\\n        uint256 difference = shareIn.sub(bentoBox.toShare(tokenIn, amountIn, true));\\n        bentoBox.withdraw(tokenIn, address(this), UniswapV2Library.pairFor(factory, path[0], path[1], pairCodeHash), amountIn, 0);\\n        _swapExactTokensForTokens(amountIn, path, address(bentoBox));\\n        bentoBox.transfer(tokenIn, address(this), to, difference);\\n        bentoBox.deposit(tokenOut, address(bentoBox), to, 0, shareOut);\\n        return (difference);\\n    }\\n\\n    // Swaps an exact amount of tokens for another token through the path passed as an argument\\n    // Returns the amount of the final token\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        address[] memory path,\\n        address to\\n    ) internal {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path, pairCodeHash);\\n        _swap(amounts, path, to);\\n    }\\n\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2], pairCodeHash) : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output, pairCodeHash)).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xde2efbf4ae14e35dcaec475b6a89a183e696cf36c5f257d2e69adc9f7e9e3e7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516115e83803806115e883398101604081905261002f91610052565b6001600160601b0319606093841b81166080529190921b1660a05260c0526100ac565b600080600060608486031215610066578283fd5b835161007181610094565b602085015190935061008281610094565b80925050604084015190509250925092565b6001600160a01b03811681146100a957600080fd5b50565b60805160601c60a05160601c60c0516114cf6101196000398061014752806104c552806108a55280610ce5525080607c528061039c5280610446528061056652806105a1528061061a525080610124528061047a52806108825280610c8c5280610cc252506114cf6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631e2e4ebc1461003b5780633087d74214610064575b600080fd5b61004e610049366004610eaa565b610077565b60405161005b91906113cb565b60405180910390f35b61004e610072366004610f72565b61018d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166356623118868560016040518463ffffffff1660e01b81526004016100cb93929190611149565b60206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011b9190611051565b9050606061016b7f000000000000000000000000000000000000000000000000000000000000000083877f00000000000000000000000000000000000000000000000000000000000000006106c5565b90508060008151811061017a57fe5b6020026020010151925050509392505050565b600060606001600160a01b038616610283576001600160a01b03871661020057604080516002808252606082018352909160208301908036833701905050905088816001815181106101db57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061027e565b604080516003808252608082019092529060208201606080368337019050509050868160018151811061022f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160028151811061025d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b61032f565b60408051600480825260a08201909252906020820160808036833701905050905086816001815181106102b257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505085816002815181106102e057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050888160038151811061030e57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b898160008151811061033d57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600061036a8a8386610077565b9050888111156103955760405162461bcd60e51b815260040161038c9061119b565b60405180910390fd5b60006104427f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5139ca8e8560016040518463ffffffff1660e01b81526004016103eb93929190611149565b60206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611051565b87906107df565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d308d306104e97f0000000000000000000000000000000000000000000000000000000000000000886000815181106104a657fe5b6020026020010151896001815181106104bb57fe5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000610808565b8660006040518663ffffffff1660e01b815260040161050c9594939291906110eb565b6040805180830381600087803b15801561052557600080fd5b505af1158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190611069565b505061058a82847f000000000000000000000000000000000000000000000000000000000000000061087b565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906105dc908f9030908c90879060040161111f565b600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505060405162ae511b60e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03811693506302b9446c9250610662918f91908c906000908c906004016110eb565b6040805180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b39190611069565b50909c9b505050505050505050505050565b60606002835110156106e95760405162461bcd60e51b815260040161038c9061125c565b825167ffffffffffffffff8111801561070157600080fd5b5060405190808252806020026020018201604052801561072b578160200160208202803683370190505b509050838160018351038151811061073f57fe5b60209081029190910101528251600019015b80156107d65760008061078f8887600186038151811061076d57fe5b602002602001015188868151811061078157fe5b6020026020010151886108dc565b915091506107b18484815181106107a257fe5b602002602001015183836109b7565b8460018503815181106107c057fe5b6020908102919091010152505060001901610751565b50949350505050565b808203828111156108025760405162461bcd60e51b815260040161038c9061116c565b92915050565b60008060006108178686610a51565b9150915086828260405160200161082f92919061108c565b6040516020818303038152906040528051906020012085604051602001610858939291906110b3565b60408051601f198184030181529190528051602090910120979650505050505050565b60606108c97f000000000000000000000000000000000000000000000000000000000000000085857f0000000000000000000000000000000000000000000000000000000000000000610adb565b90506108d6818484610bdd565b50505050565b60008060006108eb8686610a51565b5090506000806108fd89898989610808565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561093557600080fd5b505afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190610ffd565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b0316146109a45780826109a7565b81815b909a909950975050505050505050565b60008084116109d85760405162461bcd60e51b815260040161038c906111cb565b6000831180156109e85750600082115b610a045760405162461bcd60e51b815260040161038c906112ca565b6000610a1c6103e8610a168688610dab565b90610dab565b90506000610a306103e5610a1686896107df565b9050610a476001828481610a4057fe5b0490610de2565b9695505050505050565b600080826001600160a01b0316846001600160a01b03161415610a865760405162461bcd60e51b815260040161038c90611217565b826001600160a01b0316846001600160a01b031610610aa6578284610aa9565b83835b90925090506001600160a01b038216610ad45760405162461bcd60e51b815260040161038c90611312565b9250929050565b6060600283511015610aff5760405162461bcd60e51b815260040161038c9061125c565b825167ffffffffffffffff81118015610b1757600080fd5b50604051908082528060200260200182016040528015610b41578160200160208202803683370190505b5090508381600081518110610b5257fe5b60200260200101818152505060005b60018451038110156107d657600080610b9788878581518110610b8057fe5b602002602001015188866001018151811061078157fe5b91509150610bb9848481518110610baa57fe5b60200260200101518383610e05565b848460010181518110610bc857fe5b60209081029190910101525050600101610b61565b60005b60018351038110156108d657600080848381518110610bfb57fe5b6020026020010151858460010181518110610c1257fe5b6020026020010151915091506000610c2a8383610a51565b5090506000878560010181518110610c3e57fe5b60200260200101519050600080836001600160a01b0316866001600160a01b031614610c6c57826000610c70565b6000835b91509150600060028a51038810610c875788610cbb565b610cbb7f0000000000000000000000000000000000000000000000000000000000000000878c8b600201815181106104bb57fe5b9050610d097f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000610808565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015610d46576020820181803683370190505b506040518563ffffffff1660e01b8152600401610d6694939291906113d4565b600060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b505060019099019850610be0975050505050505050565b6000811580610dc657505080820282828281610dc357fe5b04145b6108025760405162461bcd60e51b815260040161038c90611394565b818101818110156108025760405162461bcd60e51b815260040161038c90611293565b6000808411610e265760405162461bcd60e51b815260040161038c90611349565b600083118015610e365750600082115b610e525760405162461bcd60e51b815260040161038c906112ca565b6000610e60856103e5610dab565b90506000610e6e8285610dab565b90506000610e8883610e82886103e8610dab565b90610de2565b9050808281610e9357fe5b04979650505050505050565b80356108028161146c565b600080600060608486031215610ebe578283fd5b8335610ec98161146c565b925060208481013567ffffffffffffffff80821115610ee6578485fd5b818701915087601f830112610ef9578485fd5b813581811115610f07578586fd5b8381029150610f17848301611445565b8181528481019084860184860187018c1015610f31578889fd5b8895505b83861015610f5b57610f478c82610e9f565b835260019590950194918601918601610f35565b50979a979950505050604095909501359450505050565b600080600080600080600080610100898b031215610f8e578384fd5b8835610f998161146c565b97506020890135610fa98161146c565b9650604089013595506060890135610fc08161146c565b94506080890135610fd08161146c565b935060a0890135610fe08161146c565b979a969950949793969295929450505060c08201359160e0013590565b600080600060608486031215611011578283fd5b835161101c81611484565b602085015190935061102d81611484565b604085015190925063ffffffff81168114611046578182fd5b809150509250925092565b600060208284031215611062578081fd5b5051919050565b6000806040838503121561107b578182fd5b505080516020909101519092909150565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b60208082526016908201527534b739bab33334b1b4b2b73a16b0b6b7bab73a16b4b760511b604082015260600190565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201526b155514155517d05353d5539560a21b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b90815260200190565b60008582526020858184015260018060a01b0385166040840152608060608401528351806080850152825b8181101561141b5785810183015185820160a0015282016113ff565b8181111561142c578360a083870101525b50601f01601f19169290920160a0019695505050505050565b60405181810167ffffffffffffffff8111828210171561146457600080fd5b604052919050565b6001600160a01b038116811461148157600080fd5b50565b6001600160701b038116811461148157600080fdfea2646970667358221220d2d0ff5ce42890746006face0d7b2a2bb15dadd407466a45981a532a3f6e42f964736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}