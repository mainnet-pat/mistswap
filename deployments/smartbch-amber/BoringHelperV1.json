{
  "address": "0xEd019DA0a65feccB33e4842Cc01B9FD77320e114",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "chef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maker_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "sushi_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WETH_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WBTC_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "sushiFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "uniV2Factory_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "bar_",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBox",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WBTC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bar",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "findBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.Balance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "findPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.PoolFound[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bentoAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "bentoAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "bentoShare",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.BalanceFull[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getETHRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFactory",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toID",
          "type": "uint256"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPair",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.PairBase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAllocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.PoolsInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "contract IPair",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPair",
              "type": "bool"
            },
            {
              "internalType": "contract IFactory",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct BoringHelperV1.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "DOMAIN_SEPARATOR",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BoringHelperV1.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IFactory[]",
          "name": "factoryAddresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "masterContracts",
          "type": "address[]"
        }
      ],
      "name": "getUIInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ethBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBarBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xsushiBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "xsushiSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiBarAllowance",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract IFactory",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allPairsLength",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BoringHelperV1.Factory[]",
              "name": "factories",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "ethRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sushiRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "btcRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingSushi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockTimeStamp",
              "type": "uint256"
            },
            {
              "internalType": "bool[]",
              "name": "masterContractApproved",
              "type": "bool[]"
            }
          ],
          "internalType": "struct BoringHelperV1.UIInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IKashiPair[]",
          "name": "pairsIn",
          "type": "address[]"
        }
      ],
      "name": "pollKashiPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "oracleData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "totalCollateralShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userCollateralShare",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "elastic",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "base",
                  "type": "uint128"
                }
              ],
              "internalType": "struct Rebase",
              "name": "totalAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "userAssetFraction",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "elastic",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "base",
                  "type": "uint128"
                }
              ],
              "internalType": "struct Rebase",
              "name": "totalBorrow",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "userBorrowPart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentExchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spotExchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleExchangeRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "interestPerSecond",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lastAccrued",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "feesEarnedFraction",
                  "type": "uint128"
                }
              ],
              "internalType": "struct AccrueInfo",
              "name": "accrueInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct BoringHelperV1.KashiPairPoll[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "contract IPair[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "pollPairs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IPair",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.PairPoll[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "pollPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTotalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserve1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pending",
              "type": "uint256"
            }
          ],
          "internalType": "struct BoringHelperV1.UserPoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "chef_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "maker_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "sushi_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WETH_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "WBTC_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "sushiFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "uniV2Factory_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "bar_",
          "type": "address"
        },
        {
          "internalType": "contract IBentoBox",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniV2Factory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a87f903821142765050f66886301b3339654b1ef3936dcf110a58eb06c8887e",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0xEd019DA0a65feccB33e4842Cc01B9FD77320e114",
    "transactionIndex": 0,
    "gasUsed": "4370648",
    "logsBloom": "0x
    "blockHash": "0xf2049dc0fad2119388ce34868eff36d0b77653f3545c516384f3efc118e54ede",
    "transactionHash": "0x9a87f903821142765050f66886301b3339654b1ef3936dcf110a58eb06c8887e",
    "logs": [],
    "blockNumber": 3835999,
    "cumulativeGasUsed": "4370648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5ee747274cDAc7F6CF5cD3aE2c53123BCEED59c4",
    "0x6b8A569B1bA6a172d2e8Dd244282a4b16b14CaEA",
    "0x3d2cd929D1fC1dA68D2557AB85336C2740b1Ae81",
    "0x17F4FCF5b6E0A95D4eE331c8529041896A073F9b",
    "0x0000000000000000000000000000000000000000",
    "0xaa094cA3FBd19dCCcE91C79d1FffA28293B05f28",
    "0x0000000000000000000000000000000000000000",
    "0xceb95423B86c1823deC2Cc6F877997DC9349C2F1",
    "0xEfbb25ec12EB1aAe98600c5614F9C4BCAff41F5d"
  ],
  "solcInputHash": "eeea151df73079e98677a8b090b50a5d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBox\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bar\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"findBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.Balance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"findPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.PoolFound[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bentoAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"bentoAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bentoShare\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.BalanceFull[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getETHRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.PairBase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.PoolsInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IPair\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"},{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct BoringHelperV1.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"DOMAIN_SEPARATOR\",\"type\":\"bytes32\"}],\"internalType\":\"struct BoringHelperV1.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IFactory[]\",\"name\":\"factoryAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"masterContracts\",\"type\":\"address[]\"}],\"name\":\"getUIInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xsushiSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiBarAllowance\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.Factory[]\",\"name\":\"factories\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"ethRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btcRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingSushi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"masterContractApproved\",\"type\":\"bool[]\"}],\"internalType\":\"struct BoringHelperV1.UIInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IKashiPair[]\",\"name\":\"pairsIn\",\"type\":\"address[]\"}],\"name\":\"pollKashiPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCollateralShare\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"internalType\":\"struct Rebase\",\"name\":\"totalAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"userAssetFraction\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"internalType\":\"struct Rebase\",\"name\":\"totalBorrow\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"userBorrowPart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleExchangeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"interestPerSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastAccrued\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feesEarnedFraction\",\"type\":\"uint128\"}],\"internalType\":\"struct AccrueInfo\",\"name\":\"accrueInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct BoringHelperV1.KashiPairPoll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"contract IPair[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"pollPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IPair\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.PairPoll[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"pollPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"internalType\":\"struct BoringHelperV1.UserPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WETH_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"WBTC_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"sushiFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"uniV2Factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBox\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/BoringHelperFlat.sol\":\"BoringHelperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/flat/BoringHelperFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright (c) 2021 BoringCrypto\\n// Twitter: @Boring_Crypto\\n\\n// Version 22-Mar-2021\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IMasterChef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function devaddr() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function sushi() external view returns (address);\\n\\n    function sushiPerBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolInfo(uint256 nr)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function userInfo(uint256 nr, address who) external view returns (uint256, uint256);\\n\\n    function pendingSushi(uint256 nr, address who) external view returns (uint256);\\n}\\n\\ninterface IPair is IERC20 {\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n}\\n\\ninterface IFactory {\\n    function allPairsLength() external view returns (uint256);\\n\\n    function allPairs(uint256 i) external view returns (IPair);\\n\\n    function getPair(IERC20 token0, IERC20 token1) external view returns (IPair);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n}\\n\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n}\\n\\ncontract Ownable {\\n    address public immutable owner;\\n\\n    constructor() internal {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\nlibrary BoringERC20 {\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    function symbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    function name(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    function decimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function DOMAIN_SEPARATOR(IERC20 token) internal view returns (bytes32) {\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 10000}(abi.encodeWithSelector(0x3644e515));\\n        return success && data.length == 32 ? abi.decode(data, (bytes32)) : bytes32(0);\\n    }\\n\\n    function nonces(IERC20 token, address owner) internal view returns (uint256) {\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 5000}(abi.encodeWithSelector(0x7ecebe00, owner));\\n        return success && data.length == 32 ? abi.decode(data, (uint256)) : uint256(-1); // Use max uint256 to signal failure to retrieve nonce (probably not supported)\\n    }\\n}\\n\\nlibrary BoringPair {\\n    function factory(IPair pair) internal view returns (IFactory) {\\n        (bool success, bytes memory data) = address(pair).staticcall(abi.encodeWithSelector(0xc45a0155));\\n        return success && data.length == 32 ? abi.decode(data, (IFactory)) : IFactory(0);\\n    }\\n}\\n\\ninterface IStrategy {\\n    function skim(uint256 amount) external;\\n\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\ninterface IBentoBox {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n\\n    function claimOwnership() external;\\n\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) external payable;\\n\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n\\n    function masterContractApproved(address, address) external view returns (bool);\\n\\n    function masterContractOf(address) external view returns (address);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function registerProtocol() external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n\\n    function strategy(IERC20) external view returns (IStrategy);\\n\\n    function strategyData(IERC20)\\n        external\\n        view\\n        returns (\\n            uint64 strategyStartDate,\\n            uint64 targetPercentage,\\n            uint128 balance\\n        );\\n\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function totals(IERC20) external view returns (uint128 elastic, uint128 base);\\n\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\nstruct AccrueInfo {\\n    uint64 interestPerSecond;\\n    uint64 lastAccrued;\\n    uint128 feesEarnedFraction;\\n}\\n\\ninterface IOracle {\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\\ninterface IKashiPair {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function accrue() external;\\n\\n    function accrueInfo() external view returns (AccrueInfo memory info);\\n\\n    function addAsset(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) external returns (uint256 fraction);\\n\\n    function addCollateral(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) external;\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function asset() external view returns (IERC20);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function bentoBox() external view returns (IBentoBox);\\n\\n    function borrow(address to, uint256 amount) external returns (uint256 part, uint256 share);\\n\\n    function claimOwnership() external;\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external payable returns (uint256 value1, uint256 value2);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getInitData(\\n        IERC20 collateral_,\\n        IERC20 asset_,\\n        address oracle_,\\n        bytes calldata oracleData_\\n    ) external pure returns (bytes memory data);\\n\\n    function init(bytes calldata data) external payable;\\n\\n    function isSolvent(address user, bool open) external view returns (bool);\\n\\n    function liquidate(\\n        address[] calldata users,\\n        uint256[] calldata borrowParts,\\n        address to,\\n        address swapper,\\n        bool open\\n    ) external;\\n\\n    function masterContract() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function oracleData() external view returns (bytes memory);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function removeAsset(address to, uint256 fraction) external returns (uint256 share);\\n\\n    function removeCollateral(address to, uint256 share) external;\\n\\n    function repay(\\n        address to,\\n        bool skim,\\n        uint256 part\\n    ) external returns (uint256 amount);\\n\\n    function setFeeTo(address newFeeTo) external;\\n\\n    function setSwapper(address swapper, bool enable) external;\\n\\n    function swappers(address) external view returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalAsset() external view returns (Rebase memory total);\\n\\n    function totalBorrow() external view returns (Rebase memory total);\\n\\n    function totalCollateralShare() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\n\\n    function userBorrowPart(address) external view returns (uint256);\\n\\n    function userCollateralShare(address) external view returns (uint256);\\n\\n    function withdrawFees() external;\\n}\\n\\ncontract BoringHelperV1 is Ownable {\\n    using BoringMath for uint256;\\n    using BoringERC20 for IERC20;\\n    using BoringERC20 for IPair;\\n    using BoringPair for IPair;\\n\\n    IMasterChef public chef; // IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n    address public maker; // ISushiMaker(0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50);\\n    IERC20 public sushi; // ISushiToken(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n    IERC20 public WETH; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public WBTC; // 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    IFactory public sushiFactory; // IFactory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n    IFactory public uniV2Factory; // IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    IERC20 public bar; // 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272;\\n    IBentoBox public bentoBox; // 0xB5891167796722331b7ea7824F036b3Bdcb4531C\\n\\n    constructor(\\n        IMasterChef chef_,\\n        address maker_,\\n        IERC20 sushi_,\\n        IERC20 WETH_,\\n        IERC20 WBTC_,\\n        IFactory sushiFactory_,\\n        IFactory uniV2Factory_,\\n        IERC20 bar_,\\n        IBentoBox bentoBox_\\n    ) public {\\n        chef = chef_;\\n        maker = maker_;\\n        sushi = sushi_;\\n        WETH = WETH_;\\n        WBTC = WBTC_;\\n        sushiFactory = sushiFactory_;\\n        uniV2Factory = uniV2Factory_;\\n        bar = bar_;\\n        bentoBox = bentoBox_;\\n    }\\n\\n    function setContracts(\\n        IMasterChef chef_,\\n        address maker_,\\n        IERC20 sushi_,\\n        IERC20 WETH_,\\n        IERC20 WBTC_,\\n        IFactory sushiFactory_,\\n        IFactory uniV2Factory_,\\n        IERC20 bar_,\\n        IBentoBox bentoBox_\\n    ) public onlyOwner {\\n        chef = chef_;\\n        maker = maker_;\\n        sushi = sushi_;\\n        WETH = WETH_;\\n        WBTC = WBTC_;\\n        sushiFactory = sushiFactory_;\\n        uniV2Factory = uniV2Factory_;\\n        bar = bar_;\\n        bentoBox = bentoBox_;\\n    }\\n\\n    function getETHRate(IERC20 token) public view returns (uint256) {\\n        if (token == WETH) {\\n            return 1e18;\\n        }\\n        IPair pairUniV2;\\n        IPair pairSushi;\\n        if (uniV2Factory != IFactory(0)) {\\n            pairUniV2 = IPair(uniV2Factory.getPair(token, WETH));\\n        }\\n        if (sushiFactory != IFactory(0)) {\\n            pairSushi = IPair(sushiFactory.getPair(token, WETH));\\n        }\\n        if (address(pairUniV2) == address(0) && address(pairSushi) == address(0)) {\\n            return 0;\\n        }\\n\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        IERC20 token0;\\n        if (address(pairUniV2) != address(0)) {\\n            (uint112 reserve0UniV2, uint112 reserve1UniV2, ) = pairUniV2.getReserves();\\n            reserve0 += reserve0UniV2;\\n            reserve1 += reserve1UniV2;\\n            token0 = pairUniV2.token0();\\n        }\\n\\n        if (address(pairSushi) != address(0)) {\\n            (uint112 reserve0Sushi, uint112 reserve1Sushi, ) = pairSushi.getReserves();\\n            reserve0 += reserve0Sushi;\\n            reserve1 += reserve1Sushi;\\n            if (token0 == IERC20(0)) {\\n                token0 = pairSushi.token0();\\n            }\\n        }\\n\\n        if (token0 == WETH) {\\n            return (uint256(reserve1) * 1e18) / reserve0;\\n        } else {\\n            return (uint256(reserve0) * 1e18) / reserve1;\\n        }\\n    }\\n\\n    struct Factory {\\n        IFactory factory;\\n        uint256 allPairsLength;\\n    }\\n\\n    struct UIInfo {\\n        uint256 ethBalance;\\n        uint256 sushiBalance;\\n        uint256 sushiBarBalance;\\n        uint256 xsushiBalance;\\n        uint256 xsushiSupply;\\n        uint256 sushiBarAllowance;\\n        Factory[] factories;\\n        uint256 ethRate;\\n        uint256 sushiRate;\\n        uint256 btcRate;\\n        uint256 pendingSushi;\\n        uint256 blockTimeStamp;\\n        bool[] masterContractApproved;\\n    }\\n\\n    function getUIInfo(\\n        address who,\\n        IFactory[] calldata factoryAddresses,\\n        IERC20 currency,\\n        address[] calldata masterContracts\\n    ) public view returns (UIInfo memory) {\\n        UIInfo memory info;\\n        info.ethBalance = who.balance;\\n\\n        info.factories = new Factory[](factoryAddresses.length);\\n        for (uint256 i = 0; i < factoryAddresses.length; i++) {\\n            IFactory factory = factoryAddresses[i];\\n            info.factories[i].factory = factory;\\n            info.factories[i].allPairsLength = factory.allPairsLength();\\n        }\\n\\n        info.masterContractApproved = new bool[](masterContracts.length);\\n        for (uint256 i = 0; i < masterContracts.length; i++) {\\n            info.masterContractApproved[i] = bentoBox.masterContractApproved(masterContracts[i], who);\\n        }\\n\\n        if (currency != IERC20(0)) {\\n            info.ethRate = getETHRate(currency);\\n        }\\n\\n        if (WBTC != IERC20(0)) {\\n            info.btcRate = getETHRate(WBTC);\\n        }\\n\\n        if (sushi != IERC20(0)) {\\n            info.sushiRate = getETHRate(sushi);\\n            info.sushiBalance = sushi.balanceOf(who);\\n            info.sushiBarBalance = sushi.balanceOf(address(bar));\\n            info.sushiBarAllowance = sushi.allowance(who, address(bar));\\n        }\\n\\n        if (bar != IERC20(0)) {\\n            info.xsushiBalance = bar.balanceOf(who);\\n            info.xsushiSupply = bar.totalSupply();\\n        }\\n\\n        if (chef != IMasterChef(0)) {\\n            uint256 poolLength = chef.poolLength();\\n            uint256 pendingSushi;\\n            for (uint256 i = 0; i < poolLength; i++) {\\n                pendingSushi += chef.pendingSushi(i, who);\\n            }\\n            info.pendingSushi = pendingSushi;\\n        }\\n        info.blockTimeStamp = block.timestamp;\\n\\n        return info;\\n    }\\n\\n    struct Balance {\\n        IERC20 token;\\n        uint256 balance;\\n        uint256 bentoBalance;\\n    }\\n\\n    struct BalanceFull {\\n        IERC20 token;\\n        uint256 totalSupply;\\n        uint256 balance;\\n        uint256 bentoBalance;\\n        uint256 bentoAllowance;\\n        uint256 nonce;\\n        uint128 bentoAmount;\\n        uint128 bentoShare;\\n        uint256 rate;\\n    }\\n\\n    struct TokenInfo {\\n        IERC20 token;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n        bytes32 DOMAIN_SEPARATOR;\\n    }\\n\\n    function getTokenInfo(address[] calldata addresses) public view returns (TokenInfo[] memory) {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IERC20 token = IERC20(addresses[i]);\\n            infos[i].token = token;\\n\\n            infos[i].name = token.name();\\n            infos[i].symbol = token.symbol();\\n            infos[i].decimals = token.decimals();\\n            infos[i].DOMAIN_SEPARATOR = token.DOMAIN_SEPARATOR();\\n        }\\n\\n        return infos;\\n    }\\n\\n    function findBalances(address who, address[] calldata addresses) public view returns (Balance[] memory) {\\n        Balance[] memory balances = new Balance[](addresses.length);\\n\\n        uint256 len = addresses.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            IERC20 token = IERC20(addresses[i]);\\n            balances[i].token = token;\\n            balances[i].balance = token.balanceOf(who);\\n            balances[i].bentoBalance = bentoBox.balanceOf(token, who);\\n        }\\n\\n        return balances;\\n    }\\n\\n    function getBalances(address who, IERC20[] calldata addresses) public view returns (BalanceFull[] memory) {\\n        BalanceFull[] memory balances = new BalanceFull[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IERC20 token = addresses[i];\\n            balances[i].totalSupply = token.totalSupply();\\n            balances[i].token = token;\\n            balances[i].balance = token.balanceOf(who);\\n            balances[i].bentoAllowance = token.allowance(who, address(bentoBox));\\n            balances[i].nonce = token.nonces(who);\\n            balances[i].bentoBalance = bentoBox.balanceOf(token, who);\\n            (balances[i].bentoAmount, balances[i].bentoShare) = bentoBox.totals(token);\\n            balances[i].rate = getETHRate(token);\\n        }\\n\\n        return balances;\\n    }\\n\\n    struct PairBase {\\n        IPair token;\\n        IERC20 token0;\\n        IERC20 token1;\\n        uint256 totalSupply;\\n    }\\n\\n    function getPairs(\\n        IFactory factory,\\n        uint256 fromID,\\n        uint256 toID\\n    ) public view returns (PairBase[] memory) {\\n        PairBase[] memory pairs = new PairBase[](toID - fromID);\\n\\n        for (uint256 id = fromID; id < toID; id++) {\\n            IPair token = factory.allPairs(id);\\n            uint256 i = id - fromID;\\n            pairs[i].token = token;\\n            pairs[i].token0 = token.token0();\\n            pairs[i].token1 = token.token1();\\n            pairs[i].totalSupply = token.totalSupply();\\n        }\\n        return pairs;\\n    }\\n\\n    struct PairPoll {\\n        IPair token;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 totalSupply;\\n        uint256 balance;\\n    }\\n\\n    function pollPairs(address who, IPair[] calldata addresses) public view returns (PairPoll[] memory) {\\n        PairPoll[] memory pairs = new PairPoll[](addresses.length);\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            IPair token = addresses[i];\\n            pairs[i].token = token;\\n            (uint256 reserve0, uint256 reserve1, ) = token.getReserves();\\n            pairs[i].reserve0 = reserve0;\\n            pairs[i].reserve1 = reserve1;\\n            pairs[i].balance = token.balanceOf(who);\\n            pairs[i].totalSupply = token.totalSupply();\\n        }\\n        return pairs;\\n    }\\n\\n    struct PoolsInfo {\\n        uint256 totalAllocPoint;\\n        uint256 poolLength;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 pid;\\n        IPair lpToken;\\n        uint256 allocPoint;\\n        bool isPair;\\n        IFactory factory;\\n        IERC20 token0;\\n        IERC20 token1;\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    function getPools(uint256[] calldata pids) public view returns (PoolsInfo memory, PoolInfo[] memory) {\\n        PoolsInfo memory info;\\n        info.totalAllocPoint = chef.totalAllocPoint();\\n        uint256 poolLength = chef.poolLength();\\n        info.poolLength = poolLength;\\n\\n        PoolInfo[] memory pools = new PoolInfo[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            pools[i].pid = pids[i];\\n            (address lpToken, uint256 allocPoint, , ) = chef.poolInfo(pids[i]);\\n            IPair uniV2 = IPair(lpToken);\\n            pools[i].lpToken = uniV2;\\n            pools[i].allocPoint = allocPoint;\\n\\n            pools[i].name = uniV2.name();\\n            pools[i].symbol = uniV2.symbol();\\n            pools[i].decimals = uniV2.decimals();\\n\\n            pools[i].factory = uniV2.factory();\\n            if (pools[i].factory != IFactory(0)) {\\n                pools[i].isPair = true;\\n                pools[i].token0 = uniV2.token0();\\n                pools[i].token1 = uniV2.token1();\\n            }\\n        }\\n        return (info, pools);\\n    }\\n\\n    struct PoolFound {\\n        uint256 pid;\\n        uint256 balance;\\n    }\\n\\n    function findPools(address who, uint256[] calldata pids) public view returns (PoolFound[] memory) {\\n        PoolFound[] memory pools = new PoolFound[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            pools[i].pid = pids[i];\\n            (pools[i].balance, ) = chef.userInfo(pids[i], who);\\n        }\\n\\n        return pools;\\n    }\\n\\n    struct UserPoolInfo {\\n        uint256 pid;\\n        uint256 balance; // Balance of pool tokens\\n        uint256 totalSupply; // Token staked lp tokens\\n        uint256 lpBalance; // Balance of lp tokens not staked\\n        uint256 lpTotalSupply; // TotalSupply of lp tokens\\n        uint256 lpAllowance; // LP tokens approved for masterchef\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 rewardDebt;\\n        uint256 pending; // Pending SUSHI\\n    }\\n\\n    function pollPools(address who, uint256[] calldata pids) public view returns (UserPoolInfo[] memory) {\\n        UserPoolInfo[] memory pools = new UserPoolInfo[](pids.length);\\n\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            (uint256 amount, ) = chef.userInfo(pids[i], who);\\n            pools[i].balance = amount;\\n            pools[i].pending = chef.pendingSushi(pids[i], who);\\n\\n            (address lpToken, , , ) = chef.poolInfo(pids[i]);\\n            pools[i].pid = pids[i];\\n            IPair uniV2 = IPair(lpToken);\\n            IFactory factory = uniV2.factory();\\n            if (factory != IFactory(0)) {\\n                pools[i].totalSupply = uniV2.balanceOf(address(chef));\\n                pools[i].lpAllowance = uniV2.allowance(who, address(chef));\\n                pools[i].lpBalance = uniV2.balanceOf(who);\\n                pools[i].lpTotalSupply = uniV2.totalSupply();\\n\\n                (uint112 reserve0, uint112 reserve1, ) = uniV2.getReserves();\\n                pools[i].reserve0 = reserve0;\\n                pools[i].reserve1 = reserve1;\\n            }\\n        }\\n        return pools;\\n    }\\n\\n    struct KashiPairPoll {\\n        IERC20 collateral;\\n        IERC20 asset;\\n        IOracle oracle;\\n        bytes oracleData;\\n        uint256 totalCollateralShare;\\n        uint256 userCollateralShare;\\n        Rebase totalAsset;\\n        uint256 userAssetFraction;\\n        Rebase totalBorrow;\\n        uint256 userBorrowPart;\\n        uint256 currentExchangeRate;\\n        uint256 spotExchangeRate;\\n        uint256 oracleExchangeRate;\\n        AccrueInfo accrueInfo;\\n    }\\n\\n    function pollKashiPairs(address who, IKashiPair[] calldata pairsIn) public view returns (KashiPairPoll[] memory) {\\n        uint256 len = pairsIn.length;\\n        KashiPairPoll[] memory pairs = new KashiPairPoll[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IKashiPair pair = pairsIn[i];\\n            pairs[i].collateral = pair.collateral();\\n            pairs[i].asset = pair.asset();\\n            pairs[i].oracle = pair.oracle();\\n            pairs[i].oracleData = pair.oracleData();\\n            pairs[i].totalCollateralShare = pair.totalCollateralShare();\\n            pairs[i].userCollateralShare = pair.userCollateralShare(who);\\n            pairs[i].totalAsset = pair.totalAsset();\\n            pairs[i].userAssetFraction = pair.balanceOf(who);\\n            pairs[i].totalBorrow = pair.totalBorrow();\\n            pairs[i].userBorrowPart = pair.userBorrowPart(who);\\n\\n            pairs[i].currentExchangeRate = pair.exchangeRate();\\n            (, pairs[i].oracleExchangeRate) = pair.oracle().peek(pair.oracleData());\\n            pairs[i].spotExchangeRate = pair.oracle().peekSpot(pair.oracleData());\\n            pairs[i].accrueInfo = pair.accrueInfo();\\n        }\\n\\n        return pairs;\\n    }\\n}\",\"keccak256\":\"0xbb646715370444fe21f0cbb34dc81bb06039bdeeab236ee118104651f640d3a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004d2338038062004d238339810160408190526200003491620000dc565b3360601b608052600080546001600160a01b03199081166001600160a01b039b8c1617909155600180548216998b1699909917909855600280548916978a16979097179096556003805488169589169590951790945560048054871693881693909317909255600580548616918716919091179055600680548516918616919091179055600780548416918516919091179055600880549092169216919091179055620001cb565b60008060008060008060008060006101208a8c031215620000fb578485fd5b89516200010881620001b2565b60208b01519099506200011b81620001b2565b60408b01519098506200012e81620001b2565b60608b01519097506200014181620001b2565b60808b01519096506200015481620001b2565b60a08b01519095506200016781620001b2565b60c08b01519094506200017a81620001b2565b60e08b01519093506200018d81620001b2565b6101008b0151909250620001a181620001b2565b809150509295985092959850929598565b6001600160a01b0381168114620001c857600080fd5b50565b60805160601c614b35620001ee60003980612cd95280612cfd5250614b356000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80635ec54659116100b8578063a88830601161007c578063a88830601461029e578063a959dd80146102b3578063ac6091f8146102d3578063ad5c4648146102f3578063ca0f937c146102fb578063febb0f7e1461031b57610142565b80635ec546591461022e5780636a385ae91461024e5780636b2ace871461026e5780637e3e2596146102765780638da5cb5b1461029657610142565b806329a4a88e1161010a57806329a4a88e146101b65780633009f414146101d65780633da04b87146101f65780634a69ac50146101fe5780634dede3de1461021e57806350655d8c1461022657610142565b80630a0879031461014757806315243475146101655780631fc8bc5d1461018557806322984b241461018d5780632952dde814610195575b600080fd5b61014f610323565b60405161015c9190614352565b60405180910390f35b610178610173366004613dec565b610332565b60405161015c919061496f565b61014f610a3c565b61014f610a4b565b6101a86101a3366004613ebd565b610a5a565b60405161015c92919061484d565b6101c96101c4366004613db3565b610f77565b60405161015c9190614488565b6101e96101e4366004613db3565b611a06565b60405161015c919061476f565b61014f611ff0565b61021161020c366004613ebd565b611fff565b60405161015c91906146ce565b61014f61216e565b61014f61217d565b61024161023c366004613d3e565b61218c565b60405161015c9190614a32565b61026161025c366004613db3565b6125b1565b60405161015c9190614380565b61014f6129d5565b610289610284366004613fb3565b6129e4565b60405161015c91906145bf565b61014f612cd7565b6102b16102ac366004613fe7565b612cfb565b005b6102c66102c1366004613db3565b612de9565b60405161015c9190614624565b6102e66102e1366004613db3565b613094565b60405161015c919061468e565b61014f6131d4565b61030e610309366004613d61565b6131e3565b60405161015c9190614433565b61014f6133cf565b6002546001600160a01b031681565b61033a61395a565b61034261395a565b6001600160a01b038816318152856001600160401b038111801561036557600080fd5b5060405190808252806020026020018201604052801561039f57816020015b61038c6139c2565b8152602001906001900390816103845790505b5060c082015260005b868110156104a25760008888838181106103be57fe5b90506020020160208101906103d39190613d3e565b9050808360c0015183815181106103e657fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b031663574f2ba36040518163ffffffff1660e01b815260040160206040518083038186803b15801561044357600080fd5b505afa158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b9190613f4d565b8360c00151838151811061048b57fe5b6020908102919091018101510152506001016103a8565b50826001600160401b03811180156104b957600080fd5b506040519080825280602002602001820160405280156104e3578160200160208202803683370190505b5061018082015260005b838110156105be576008546001600160a01b03166391e0eab586868481811061051257fe5b90506020020160208101906105279190613d3e565b8b6040518363ffffffff1660e01b8152600401610545929190614366565b60206040518083038186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190613efc565b82610180015182815181106105a657fe5b911515602092830291909101909101526001016104ed565b506001600160a01b038516156105dd576105d78561218c565b60e08201525b6004546001600160a01b03161561060a57600454610603906001600160a01b031661218c565b6101208201525b6002546001600160a01b0316156107d457600254610630906001600160a01b031661218c565b6101008201526002546040516370a0823160e01b81526001600160a01b03909116906370a0823190610666908b90600401614352565b60206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190613f4d565b60208201526002546007546040516370a0823160e01b81526001600160a01b03928316926370a08231926106ef92911690600401614352565b60206040518083038186803b15801561070757600080fd5b505afa15801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190613f4d565b6040808301919091526002546007549151636eb1769f60e11b81526001600160a01b039182169263dd62ed3e9261077e928d9290911690600401614366565b60206040518083038186803b15801561079657600080fd5b505afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce9190613f4d565b60a08201525b6007546001600160a01b0316156108ed576007546040516370a0823160e01b81526001600160a01b03909116906370a0823190610815908b90600401614352565b60206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190613f4d565b6060820152600754604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156108af57600080fd5b505afa1580156108c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190613f4d565b60808201525b6000546001600160a01b031615610a2a5760008060009054906101000a90046001600160a01b03166001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b15801561094d57600080fd5b505afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190613f4d565b90506000805b82811015610a215760005460405163065509bb60e21b81526001600160a01b039091169063195426ec906109c59084908f90600401614a3b565b60206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190613f4d565b9091019060010161098b565b50610140830152505b42610160820152979650505050505050565b6000546001600160a01b031681565b6005546001600160a01b031681565b610a626139d9565b6060610a6c6139d9565b60008054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab857600080fd5b505afa158015610acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af09190613f4d565b8152600080546040805163040f1f6d60e11b815290516001600160a01b039092169163081e3eda91600480820192602092909190829003018186803b158015610b3857600080fd5b505afa158015610b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b709190613f4d565b6020830181905290506060856001600160401b0381118015610b9157600080fd5b50604051908082528060200260200182016040528015610bcb57816020015b610bb86139f3565b815260200190600190039081610bb05790505b50905060005b86811015610f6757878782818110610be557fe5b90506020020135828281518110610bf857fe5b6020908102919091010151526000805481906001600160a01b0316631526fe278b8b86818110610c2457fe5b905060200201356040518263ffffffff1660e01b8152600401610c479190614a32565b60806040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c979190613e7f565b505091509150600082905080858581518110610caf57fe5b6020026020010151602001906001600160a01b031690816001600160a01b03168152505081858581518110610ce057fe5b60200260200101516040018181525050610d02816001600160a01b03166133de565b858581518110610d0e57fe5b602002602001015160e00181905250610d2f816001600160a01b03166134a1565b858581518110610d3b57fe5b60200260200101516101000181905250610d5d816001600160a01b03166134e8565b858581518110610d6957fe5b6020026020010151610120019060ff16908160ff1681525050610d94816001600160a01b03166135a1565b858581518110610da057fe5b6020026020010151608001906001600160a01b031690816001600160a01b03168152505060006001600160a01b0316858581518110610ddb57fe5b6020026020010151608001516001600160a01b031614610f5c576001858581518110610e0357fe5b60200260200101516060019015159081151581525050806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5257600080fd5b505afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a9190613f97565b858581518110610e9657fe5b602002602001015160a001906001600160a01b031690816001600160a01b031681525050806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190613f97565b858581518110610f3757fe5b602002602001015160c001906001600160a01b031690816001600160a01b0316815250505b505050600101610bd1565b50919350909150505b9250929050565b60608181816001600160401b0381118015610f9157600080fd5b50604051908082528060200260200182016040528015610fcb57816020015b610fb8613a46565b815260200190600190039081610fb05790505b50905060005b828110156119fc576000868683818110610fe757fe5b9050602002016020810190610ffc9190613d3e565b9050806001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561103757600080fd5b505afa15801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f9190613f97565b83838151811061107b57fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190613f97565b83838151811061111c57fe5b6020026020010151602001906001600160a01b031690816001600160a01b031681525050806001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190613f97565b8383815181106111bd57fe5b6020026020010151604001906001600160a01b031690816001600160a01b031681525050806001600160a01b03166374645ff36040518163ffffffff1660e01b815260040160006040518083038186803b15801561121a57600080fd5b505afa15801561122e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112569190810190613f65565b83838151811061126257fe5b602002602001015160600181905250806001600160a01b031663473e3ce76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190613f4d565b8383815181106112ee57fe5b602090810291909101015160800152604051631c9e379b60e01b81526001600160a01b03821690631c9e379b90611329908b90600401614352565b60206040518083038186803b15801561134157600080fd5b505afa158015611355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113799190613f4d565b83838151811061138557fe5b602002602001015160a0018181525050806001600160a01b031663f9557ccb6040518163ffffffff1660e01b8152600401604080518083038186803b1580156113cd57600080fd5b505afa1580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140591906140f7565b83838151811061141157fe5b602090810291909101015160c001526040516370a0823160e01b81526001600160a01b038216906370a082319061144c908b90600401614352565b60206040518083038186803b15801561146457600080fd5b505afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149c9190613f4d565b8383815181106114a857fe5b602002602001015160e0018181525050806001600160a01b0316638285ef406040518163ffffffff1660e01b8152600401604080518083038186803b1580156114f057600080fd5b505afa158015611504573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152891906140f7565b83838151811061153457fe5b602090810291909101015161010001526040516324720b1f60e11b81526001600160a01b038216906348e4163e90611570908b90600401614352565b60206040518083038186803b15801561158857600080fd5b505afa15801561159c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c09190613f4d565b8383815181106115cc57fe5b6020026020010151610120018181525050806001600160a01b0316633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190613f4d565b83838151811061165a57fe5b6020026020010151610140018181525050806001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc9190613f97565b6001600160a01b031663eeb8a8d3826001600160a01b03166374645ff36040518163ffffffff1660e01b815260040160006040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261175f9190810190613f65565b6040518263ffffffff1660e01b815260040161177b9190614805565b604080518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca9190613f1c565b90508383815181106117d857fe5b6020026020010151610180018181525050806001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185a9190613f97565b6001600160a01b031663d39bbef0826001600160a01b03166374645ff36040518163ffffffff1660e01b815260040160006040518083038186803b1580156118a157600080fd5b505afa1580156118b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118dd9190810190613f65565b6040518263ffffffff1660e01b81526004016118f99190614805565b60206040518083038186803b15801561191157600080fd5b505afa158015611925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119499190613f4d565b83838151811061195557fe5b6020026020010151610160018181525050806001600160a01b031663b27c0e746040518163ffffffff1660e01b815260040160606040518083038186803b15801561199f57600080fd5b505afa1580156119b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d791906140a2565b8383815181106119e357fe5b60209081029190910101516101a0015250600101610fd1565b5095945050505050565b606080826001600160401b0381118015611a1f57600080fd5b50604051908082528060200260200182016040528015611a5957816020015b611a46613ae1565b815260200190600190039081611a3e5790505b50905060005b83811015611fe757600080546001600160a01b03166393f1a40b878785818110611a8557fe5b90506020020135896040518363ffffffff1660e01b8152600401611aaa929190614a3b565b604080518083038186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af991906141c4565b50905080838381518110611b0957fe5b60209081029190910181015101526000546001600160a01b031663195426ec878785818110611b3457fe5b90506020020135896040518363ffffffff1660e01b8152600401611b59929190614a3b565b60206040518083038186803b158015611b7157600080fd5b505afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190613f4d565b838381518110611bb557fe5b60209081029190910101516101200152600080546001600160a01b0316631526fe27888886818110611be357fe5b905060200201356040518263ffffffff1660e01b8152600401611c069190614a32565b60806040518083038186803b158015611c1e57600080fd5b505afa158015611c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c569190613e7f565b5050509050868684818110611c6757fe5b90506020020135848481518110611c7a57fe5b602090810291909101015152806000611c9b6001600160a01b0383166135a1565b90506001600160a01b03811615611fd7576000546040516370a0823160e01b81526001600160a01b03848116926370a0823192611cde9290911690600401614352565b60206040518083038186803b158015611cf657600080fd5b505afa158015611d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2e9190613f4d565b868681518110611d3a57fe5b60209081029190910101516040908101919091526000549051636eb1769f60e11b81526001600160a01b038085169263dd62ed3e92611d7f928f921690600401614366565b60206040518083038186803b158015611d9757600080fd5b505afa158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190613f4d565b868681518110611ddb57fe5b602090810291909101015160a001526040516370a0823160e01b81526001600160a01b038316906370a0823190611e16908d90600401614352565b60206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e669190613f4d565b868681518110611e7257fe5b60200260200101516060018181525050816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ebb57600080fd5b505afa158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190613f4d565b868681518110611eff57fe5b60200260200101516080018181525050600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190614137565b5091509150816001600160701b0316888881518110611f9e57fe5b602002602001015160c0018181525050806001600160701b0316888881518110611fc457fe5b602002602001015160e001818152505050505b505060019092019150611a5f9050565b50949350505050565b6006546001600160a01b031681565b606080826001600160401b038111801561201857600080fd5b5060405190808252806020026020018201604052801561205257816020015b61203f613b34565b8152602001906001900390816120375790505b50905060005b8381101561216457600085858381811061206e57fe5b90506020020160208101906120839190613d3e565b90508083838151811061209257fe5b60209081029190910101516001600160a01b0391821690526120b59082166133de565b8383815181106120c157fe5b6020026020010151604001819052506120e2816001600160a01b03166134a1565b8383815181106120ee57fe5b60200260200101516060018190525061210f816001600160a01b03166134e8565b60ff1683838151811061211e57fe5b60200260200101516020018181525050612140816001600160a01b031661365a565b83838151811061214c57fe5b60209081029190910101516080015250600101612058565b5090505b92915050565b6004546001600160a01b031681565b6001546001600160a01b031681565b6003546000906001600160a01b03838116911614156121b45750670de0b6b3a76400006125ac565b60065460009081906001600160a01b0316156122545760065460035460405163e6a4390560e01b81526001600160a01b039283169263e6a439059261220192899290911690600401614366565b60206040518083038186803b15801561221957600080fd5b505afa15801561222d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122519190613f97565b91505b6005546001600160a01b0316156122ef5760055460035460405163e6a4390560e01b81526001600160a01b039283169263e6a439059261229c92899290911690600401614366565b60206040518083038186803b1580156122b457600080fd5b505afa1580156122c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ec9190613f97565b90505b6001600160a01b03821615801561230d57506001600160a01b038116155b1561231d576000925050506125ac565b600080806001600160a01b0385161561242957600080866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561236c57600080fd5b505afa158015612380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a49190614137565b509150915081850194508084019350866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ec57600080fd5b505afa158015612400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124249190613f97565b925050505b6001600160a01b0384161561253f57600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561247457600080fd5b505afa158015612488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ac9190614137565b50958101959485019490925090506001600160a01b03831661253c57856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125399190613f97565b92505b50505b6003546001600160a01b038281169116141561258757826001600160701b0316826001600160701b0316670de0b6b3a7640000028161257a57fe5b04955050505050506125ac565b816001600160701b0316836001600160701b0316670de0b6b3a7640000028161257a57fe5b919050565b606080826001600160401b03811180156125ca57600080fd5b5060405190808252806020026020018201604052801561260457816020015b6125f1613b6f565b8152602001906001900390816125e95790505b50905060005b83811015611fe757600085858381811061262057fe5b90506020020160208101906126359190613d3e565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561267057600080fd5b505afa158015612684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a89190613f4d565b8383815181106126b457fe5b60200260200101516020018181525050808383815181106126d157fe5b60209081029190910101516001600160a01b0391821690526040516370a0823160e01b8152908216906370a082319061270e908a90600401614352565b60206040518083038186803b15801561272657600080fd5b505afa15801561273a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275e9190613f4d565b83838151811061276a57fe5b60209081029190910101516040908101919091526008549051636eb1769f60e11b81526001600160a01b038084169263dd62ed3e926127af928c921690600401614366565b60206040518083038186803b1580156127c757600080fd5b505afa1580156127db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ff9190613f4d565b83838151811061280b57fe5b60209081029190910101516080015261282d6001600160a01b03821688613717565b83838151811061283957fe5b602090810291909101015160a00152600854604051633de222bb60e21b81526001600160a01b039091169063f7888aec9061287a9084908b90600401614366565b60206040518083038186803b15801561289257600080fd5b505afa1580156128a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ca9190613f4d565b8383815181106128d657fe5b602090810291909101015160600152600854604051634ffe34db60e01b81526001600160a01b0390911690634ffe34db90612915908490600401614352565b604080518083038186803b15801561292c57600080fd5b505afa158015612940573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612964919061418b565b84848151811061297057fe5b602002602001015160c00185858151811061298757fe5b60209081029190910101516001600160801b0392831660e090910152911690526129b08161218c565b8383815181106129bc57fe5b602090810291909101015161010001525060010161260a565b6008546001600160a01b031681565b6060808383036001600160401b03811180156129ff57600080fd5b50604051908082528060200260200182016040528015612a3957816020015b612a26613bd6565b815260200190600190039081612a1e5790505b509050835b83811015611fe757604051631e3dd18b60e01b81526000906001600160a01b03881690631e3dd18b90612a75908590600401614a32565b60206040518083038186803b158015612a8d57600080fd5b505afa158015612aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac59190613f97565b90506000868303905081848281518110612adb57fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3857600080fd5b505afa158015612b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b709190613f97565b848281518110612b7c57fe5b6020026020010151602001906001600160a01b031690816001600160a01b031681525050816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612bd957600080fd5b505afa158015612bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c119190613f97565b848281518110612c1d57fe5b6020026020010151604001906001600160a01b031690816001600160a01b031681525050816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c7a57600080fd5b505afa158015612c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb29190613f4d565b848281518110612cbe57fe5b6020908102919091010151606001525050600101612a3e565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314612d4c5760405162461bcd60e51b8152600401612d4390614818565b60405180910390fd5b600080546001600160a01b03199081166001600160a01b039b8c1617909155600180548216998b1699909917909855600280548916978a16979097179096556003805488169589169590951790945560048054871693881693909317909255600580548616918716919091179055600680548516918616919091179055600780548416918516919091179055600880549092169216919091179055565b606080826001600160401b0381118015612e0257600080fd5b50604051908082528060200260200182016040528015612e3c57816020015b612e29613bfd565b815260200190600190039081612e215790505b50905060005b83811015611fe7576000858583818110612e5857fe5b9050602002016020810190612e6d9190613d3e565b905080838381518110612e7c57fe5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612edc57600080fd5b505afa158015612ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f149190614137565b506001600160701b031691506001600160701b0316915081858581518110612f3857fe5b6020026020010151602001818152505080858581518110612f5557fe5b60200260200101516040018181525050826001600160a01b03166370a082318a6040518263ffffffff1660e01b8152600401612f919190614352565b60206040518083038186803b158015612fa957600080fd5b505afa158015612fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fe19190613f4d565b858581518110612fed57fe5b60200260200101516080018181525050826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561303657600080fd5b505afa15801561304a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306e9190613f4d565b85858151811061307a57fe5b602090810291909101015160600152505050600101612e42565b606080826001600160401b03811180156130ad57600080fd5b506040519080825280602002602001820160405280156130e757816020015b6130d46139d9565b8152602001906001900390816130cc5790505b50905060005b83811015611fe75784848281811061310157fe5b9050602002013582828151811061311457fe5b6020908102919091010151526000546001600160a01b03166393f1a40b86868481811061313d57fe5b90506020020135886040518363ffffffff1660e01b8152600401613162929190614a3b565b604080518083038186803b15801561317957600080fd5b505afa15801561318d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b191906141c4565b508282815181106131be57fe5b60209081029190910181015101526001016130ed565b6003546001600160a01b031681565b606080826001600160401b03811180156131fc57600080fd5b5060405190808252806020026020018201604052801561323657816020015b613223613c35565b81526020019060019003908161321b5790505b5090508260005b818110156133c457600086868381811061325357fe5b90506020020160208101906132689190613d3e565b90508084838151811061327757fe5b60209081029190910101516001600160a01b0391821690526040516370a0823160e01b8152908216906370a08231906132b4908b90600401614352565b60206040518083038186803b1580156132cc57600080fd5b505afa1580156132e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133049190613f4d565b84838151811061331057fe5b6020908102919091018101510152600854604051633de222bb60e21b81526001600160a01b039091169063f7888aec906133509084908c90600401614366565b60206040518083038186803b15801561336857600080fd5b505afa15801561337c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a09190613f4d565b8483815181106133ac57fe5b6020908102919091010151604001525060010161323d565b509095945050505050565b6007546001600160a01b031681565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009183916001600160a01b038616916134259190614336565b600060405180830381855afa9150503d8060008114613460576040519150601f19603f3d011682016040523d82523d6000602084013e613465565b606091505b50915091508161349057604051806040016040528060038152602001623f3f3f60e81b815250613499565b613499816137f5565b949350505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b038616916134259190614336565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b0386169161352f9190614336565b600060405180830381855afa9150503d806000811461356a576040519150601f19603f3d011682016040523d82523d6000602084013e61356f565b606091505b5091509150818015613582575080516020145b61358d576012613499565b8080602001905181019061349991906141e7565b60408051600481526024810182526020810180516001600160e01b031663c45a015560e01b179052905160009182916060916001600160a01b038616916135e89190614336565b600060405180830381855afa9150503d8060008114613623576040519150601f19603f3d011682016040523d82523d6000602084013e613628565b606091505b509150915081801561363b575080516020145b613646576000613499565b808060200190518101906134999190613f97565b60408051600481526024810182526020810180516001600160e01b0316633644e51560e01b179052905160009182916060916001600160a01b03861691612710916136a491614336565b6000604051808303818686fa925050503d80600081146136e0576040519150601f19603f3d011682016040523d82523d6000602084013e6136e5565b606091505b50915091508180156136f8575080516020145b613703576000613499565b808060200190518101906134999190613f4d565b6000806060846001600160a01b0316611388637ecebe008660405160240161373f9190614352565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516137789190614336565b6000604051808303818686fa925050503d80600081146137b4576040519150601f19603f3d011682016040523d82523d6000602084013e6137b9565b606091505b50915091508180156137cc575080516020145b6137d8576000196137ec565b808060200190518101906137ec9190613f4d565b95945050505050565b6060604082511061381b57818060200190518101906138149190613f65565b90506125ac565b81516020141561393a5760005b60208160ff161080156138575750828160ff168151811061384557fe5b01602001516001600160f81b03191615155b1561386457600101613828565b60608160ff166001600160401b038111801561387f57600080fd5b506040519080825280601f01601f1916602001820160405280156138aa576020820181803683370190505b509050600091505b60208260ff161080156138e15750838260ff16815181106138cf57fe5b01602001516001600160f81b03191615155b1561393157838260ff16815181106138f557fe5b602001015160f81c60f81b818360ff168151811061390f57fe5b60200101906001600160f81b031916908160001a9053506001909101906138b2565b91506125ac9050565b506040805180820190915260038152623f3f3f60e81b60208201526125ac565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001600081525090565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820181905261010082015261012081019190915290565b604051806101c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001613a9f6139c2565b815260200160008152602001613ab36139c2565b815260200160008152602001600081526020016000815260200160008152602001613adc613c5f565b905290565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060a0016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001600080191681525090565b60405180610120016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160801b0316815260200160006001600160801b03168152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b60008083601f840112613c90578182fd5b5081356001600160401b03811115613ca6578182fd5b6020830191508360208083028501011115610f7057600080fd5b600082601f830112613cd0578081fd5b81516001600160401b03811115613ce5578182fd5b613cf8601f8201601f1916602001614a52565b9150808252836020828501011115613d0f57600080fd5b613d20816020840160208601614a78565b5092915050565b80516001600160801b038116811461216857600080fd5b600060208284031215613d4f578081fd5b8135613d5a81614aa8565b9392505050565b600080600060408486031215613d75578182fd5b8335613d8081614aa8565b925060208401356001600160401b03811115613d9a578283fd5b613da686828701613c7f565b9497909650939450505050565b600080600060408486031215613dc7578081fd5b8335613dd281614aa8565b925060208401356001600160401b03811115613d9a578182fd5b60008060008060008060808789031215613e04578384fd5b8635613e0f81614aa8565b955060208701356001600160401b0380821115613e2a578586fd5b613e368a838b01613c7f565b909750955060408901359150613e4b82614aa8565b90935060608801359080821115613e60578384fd5b50613e6d89828a01613c7f565b979a9699509497509295939492505050565b60008060008060808587031215613e94578182fd5b8451613e9f81614aa8565b60208601516040870151606090970151919890975090945092505050565b60008060208385031215613ecf578182fd5b82356001600160401b03811115613ee4578283fd5b613ef085828601613c7f565b90969095509350505050565b600060208284031215613f0d578081fd5b81518015158114613d5a578182fd5b60008060408385031215613f2e578182fd5b82518015158114613f3d578283fd5b6020939093015192949293505050565b600060208284031215613f5e578081fd5b5051919050565b600060208284031215613f76578081fd5b81516001600160401b03811115613f8b578182fd5b61349984828501613cc0565b600060208284031215613fa8578081fd5b8151613d5a81614aa8565b600080600060608486031215613fc7578081fd5b8335613fd281614aa8565b95602085013595506040909401359392505050565b60008060008060008060008060006101208a8c031215614005578687fd5b893561401081614aa8565b985060208a013561402081614aa8565b975060408a013561403081614aa8565b965060608a013561404081614aa8565b955060808a013561405081614aa8565b945060a08a013561406081614aa8565b935060c08a013561407081614aa8565b925060e08a013561408081614aa8565b91506101008a013561409181614aa8565b809150509295985092959850929598565b6000606082840312156140b3578081fd5b6140bd6060614a52565b82516140c881614aea565b815260208301516140d881614aea565b602082015260408301516140eb81614ad5565b60408201529392505050565b600060408284031215614108578081fd5b6141126040614a52565b61411c8484613d27565b815261412b8460208501613d27565b60208201529392505050565b60008060006060848603121561414b578081fd5b835161415681614ac0565b602085015190935061416781614ac0565b604085015190925063ffffffff81168114614180578182fd5b809150509250925092565b6000806040838503121561419d578182fd5b82516141a881614ad5565b60208401519092506141b981614ad5565b809150509250929050565b600080604083850312156141d6578182fd5b505080516020909101519092909150565b6000602082840312156141f8578081fd5b815160ff81168114613d5a578182fd5b6000815180845260208085019450808401835b8381101561423957815115158752958201959082019060010161421b565b509495945050505050565b6000815180845260208085019450808401835b8381101561423957815180516001600160a01b031688528301518388015260409096019590820190600101614257565b15159052565b600081518084526142a5816020860160208601614a78565b601f01601f19169290920160200192915050565b6001600160a01b03169052565b6001600160401b03808251168352806020830151166020840152506001600160801b0360408201511660408301525050565b80518252602090810151910152565b80516001600160801b03908116835260209182015116910152565b6001600160801b03169052565b60ff169052565b60008251614348818460208701614a78565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156144265781516143b28582516142b9565b80870151858801528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201516143f282880182614322565b505060e08082015161440682880182614322565b50506101009081015190850152610120909301929085019060010161439d565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561442657815180516001600160a01b0316855286810151878601528501518585015260609093019290850190600101614450565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156145b157603f1989840301855281516102406144cd8583516142b9565b888201516144dd8a8701826142b9565b50878201516144ee898701826142b9565b5060608083015182828801526145068388018261428d565b92505050608080830151818701525060a080830151818701525060c08083015161453282880182614307565b505060e08201516101008681019190915282015161012061455581880183614307565b8301516101608781019190915261014084015161018080890191909152908401516101a080890191909152908401516101c088015290920151915061459e6101e08601836142c6565b95880195935050908601906001016144ac565b509098975050505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561442657815180516001600160a01b0390811686528782015181168887015286820151168686015260609081015190850152608090930192908501906001016145dc565b602080825282518282018190526000919060409081850190868401855b8281101561442657815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101614641565b602080825282518282018190526000919060409081850190868401855b82811015614426576146be8483516142f8565b92840192908501906001016146ab565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156145b157888303603f19018552815180516001600160a01b0316845287810151888501528681015160a0888601819052906147338287018261428d565b9150506060808301518683038288015261474d838261428d565b60809485015197909401969096525050948701949250908601906001016146f2565b602080825282518282018190526000919060409081850190868401855b828110156144265781518051855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e0808201519086015261010080820151908601526101209081015190850152610140909301929085019060010161478c565b600060208252613d5a602083018461428d565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000606080830161485e84876142f8565b604084810183905285519182905260809182860190602080820288018501818a01885b8481101561495e57607f198b8403018652815161014081518552858201516148ab878701826142b9565b5088820151898601528a8201516148c48c870182614287565b50898201516148d58b8701826142b9565b5060a0808301516148e8828801826142b9565b505060c0808301516148fc828801826142b9565b505060e08083015182828801526149158388018261428d565b925050506101008083015186830382880152614931838261428d565b9250505061012080830151925061494a8187018461432f565b509685019693505090830190600101614881565b50909b9a5050505050505050505050565b60006020825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c08301516101a08060e08501526149ca6101c0850183614244565b60e08601516101008681019190915286015161012080870191909152860151610140808701919091528601516101608087019190915286015161018080870191909152860151858203601f190183870152909250614a288382614208565b9695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b6040518181016001600160401b0381118282101715614a7057600080fd5b604052919050565b60005b83811015614a93578181015183820152602001614a7b565b83811115614aa2576000848401525b50505050565b6001600160a01b0381168114614abd57600080fd5b50565b6001600160701b0381168114614abd57600080fd5b6001600160801b0381168114614abd57600080fd5b6001600160401b0381168114614abd57600080fdfea264697066735822122082570a239c133664994206ea9f7dcc01163eac9e723a7b59e9e778566f69b87264736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1431,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "chef",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMasterChef)138"
      },
      {
        "astId": 1433,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "maker",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1435,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "sushi",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 1437,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "WETH",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 1439,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "WBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 1441,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "sushiFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IFactory)192"
      },
      {
        "astId": 1443,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "uniV2Factory",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFactory)192"
      },
      {
        "astId": 1445,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "bar",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)54"
      },
      {
        "astId": 1447,
        "contract": "contracts/flat/BoringHelperFlat.sol:BoringHelperV1",
        "label": "bentoBox",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBentoBox)1024"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBentoBox)1024": {
        "encoding": "inplace",
        "label": "contract IBentoBox",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)54": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFactory)192": {
        "encoding": "inplace",
        "label": "contract IFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)138": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      }
    }
  }
}