{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accruedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeFraction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "rate",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "utilization",
          "type": "uint256"
        }
      ],
      "name": "LogAccrue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "LogAddAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "LogAddCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "LogBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "LogExchangeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "LogFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "LogRemoveAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "LogRemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "LogRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feesEarnedFraction",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "interestPerSecond",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "lastAccrued",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "feesEarnedFraction",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "addAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value2",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxBorrowParts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract ISwapper",
          "name": "swapper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterContract",
      "outputs": [
        {
          "internalType": "contract KashiPairMediumRiskV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fraction",
          "type": "uint256"
        }
      ],
      "name": "removeAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "swapper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAsset",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "elastic",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "base",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "elastic",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "base",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateExchangeRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "updated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowPart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d693d60b358545e5e26cf36a8a99205a1da7d989f3b77803b7fa4511de0fa02",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "5316191",
    "logsBloom": "0x
    "blockHash": "0x8a979bbc2178924008c7baa125d7aa07e4a5d4c26b790212ec5a41bbbe662284",
    "transactionHash": "0x9d693d60b358545e5e26cf36a8a99205a1da7d989f3b77803b7fa4511de0fa02",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17,
        "transactionHash": "0x9d693d60b358545e5e26cf36a8a99205a1da7d989f3b77803b7fa4511de0fa02",
        "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8a979bbc2178924008c7baa125d7aa07e4a5d4c26b790212ec5a41bbbe662284"
      }
    ],
    "blockNumber": 17,
    "cumulativeGasUsed": "5316191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9A676e781A523b5d0C0e43731313A708CB607508"
  ],
  "solcInputHash": "538f5d64ee312be250145a166fb09dd6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accruedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeFraction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilization\",\"type\":\"uint256\"}],\"name\":\"LogAccrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"LogAddAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogAddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"LogFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"LogRemoveAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesEarnedFraction\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"interestPerSecond\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastAccrued\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feesEarnedFraction\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxBorrowParts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract KashiPairMediumRiskV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fraction\",\"type\":\"uint256\"}],\"name\":\"removeAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAsset\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return the DOMAIN_SEPARATOR\"},\"addAsset(address,bool,uint256)\":{\"params\":{\"share\":\"The amount of shares to add.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"The address of the user to receive the assets.\"},\"returns\":{\"fraction\":\"Total fractions added.\"}},\"addCollateral(address,bool,uint256)\":{\"params\":{\"share\":\"The amount of shares to add for `to`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"The receiver of the tokens.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The maximum collective amount that `spender` can draw.\",\"spender\":\"Address of the party that can draw from msg.sender's account.\"},\"returns\":{\"_0\":\"(bool) Returns True if approved.\"}},\"borrow(address,uint256)\":{\"returns\":{\"part\":\"Total part of the debt held by borrowers.\",\"share\":\"Total amount in shares borrowed.\"}},\"cook(uint8[],uint256[],bytes[])\":{\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\"},\"returns\":{\"value1\":\"May contain the first positioned return value of the last executed action (if applicable).\",\"value2\":\"May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\"}},\"init(bytes)\":{\"details\":\"`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\"},\"liquidate(address[],uint256[],address,address,bool)\":{\"params\":{\"maxBorrowParts\":\"A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\",\"open\":\"True to perform a open liquidation else False.\",\"swapper\":\"Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.\",\"to\":\"Address of the receiver in open liquidations if `swapper` is zero.\",\"users\":\"An array of user addresses.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"This permit must be redeemed before this deadline (UTC timestamp in seconds).\",\"owner_\":\"Address of the owner.\",\"spender\":\"The address of the spender that gets approved to draw from `owner_`.\",\"value\":\"The maximum collective amount that `spender` can draw.\"}},\"removeAsset(address,uint256)\":{\"params\":{\"fraction\":\"The amount/fraction of assets held to remove.\",\"to\":\"The user that receives the removed assets.\"},\"returns\":{\"share\":\"The amount of shares transferred to `to`.\"}},\"removeCollateral(address,uint256)\":{\"params\":{\"share\":\"Amount of shares to remove.\",\"to\":\"The receiver of the shares.\"}},\"repay(address,bool,uint256)\":{\"params\":{\"part\":\"The amount to repay. See `userBorrowPart`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"Address of the user this payment should go.\"},\"returns\":{\"amount\":\"The total amount repayed.\"}},\"setFeeTo(address)\":{\"params\":{\"newFeeTo\":\"The address of the receiver.\"}},\"setSwapper(address,bool)\":{\"params\":{\"enable\":\"True to enable the swapper. To disable use False.\",\"swapper\":\"The address of the swapper contract that conforms to `ISwapper`.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"of the tokens to move.\",\"to\":\"The address to move the tokens.\"},\"returns\":{\"_0\":\"(bool) Returns True if succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The token amount to move.\",\"from\":\"Address to draw tokens from.\",\"to\":\"The address to move the tokens.\"},\"returns\":{\"_0\":\"(bool) Returns True if succeeded.\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"updateExchangeRate()\":{\"returns\":{\"rate\":\"The new exchange rate.\",\"updated\":\"True if `exchangeRate` was updated.\"}}},\"title\":\"KashiPair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrue()\":{\"notice\":\"Accrues the interest on the borrowed tokens and handles the accumulation of fees.\"},\"addAsset(address,bool,uint256)\":{\"notice\":\"Adds assets to the lending pair.\"},\"addCollateral(address,bool,uint256)\":{\"notice\":\"Adds `collateral` from msg.sender to the account `to`.\"},\"allowance(address,address)\":{\"notice\":\"owner > spender > allowance mapping.\"},\"approve(address,uint256)\":{\"notice\":\"Approves `amount` from sender to be spend by `spender`.\"},\"balanceOf(address)\":{\"notice\":\"owner > balance mapping.\"},\"borrow(address,uint256)\":{\"notice\":\"Sender borrows `amount` and transfers it to `to`.\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\",\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"exchangeRate()\":{\"notice\":\"Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive.\"},\"init(bytes)\":{\"notice\":\"Serves as the constructor for clones, as clones can't have a regular constructor\"},\"liquidate(address[],uint256[],address,address,bool)\":{\"notice\":\"Handles the liquidation of users' balances, once the users' amount of collateral is too low.\"},\"nonces(address)\":{\"notice\":\"owner > nonce mapping. Used in `permit`.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approves `value` from `owner_` to be spend by `spender`.\"},\"removeAsset(address,uint256)\":{\"notice\":\"Removes an asset from msg.sender and transfers it to `to`.\"},\"removeCollateral(address,uint256)\":{\"notice\":\"Removes `share` amount of collateral and transfers it to `to`.\"},\"repay(address,bool,uint256)\":{\"notice\":\"Repays a loan.\"},\"setFeeTo(address)\":{\"notice\":\"Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function.\"},\"setSwapper(address,bool)\":{\"notice\":\"Used to register and enable or disable swapper contracts used in closed liquidations. MasterContract Only Admin function.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `msg.sender` to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"updateExchangeRate()\":{\"notice\":\"Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive.\"},\"withdrawFees()\":{\"notice\":\"Withdraws the fees accumulated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bentobox/KashiPairMediumRiskV1.sol\":\"KashiPairMediumRiskV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/bentobox/KashiPairMediumRiskV1.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Kashi Lending Medium Risk\\n\\n//  __  __             __    __      _____                  __ __\\n// |  |/  .---.-.-----|  |--|__|    |     |_.-----.-----.--|  |__.-----.-----.\\n// |     <|  _  |__ --|     |  |    |       |  -__|     |  _  |  |     |  _  |\\n// |__|\\\\__|___._|_____|__|__|__|    |_______|_____|__|__|_____|__|__|__|___  |\\n//                                                                     |_____|\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to:\\n// @0xKeno - for all his invaluable contributions\\n// @burger_crypto - for the idea of trying to let the LPs benefit from liquidations\\n\\n// Version: 22-Feb-2021\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/Domain.sol@v1.2.0\\n// License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\n    }\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, DOMAIN_SEPARATOR(), dataHash));\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/ERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// Data part taken out for building of contracts that receive delegate calls\\ncontract ERC20Data {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n}\\n\\ncontract ERC20 is ERC20Data, Domain {\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\\n    /// @param to The address to move the tokens.\\n    /// @param amount of the tokens to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[msg.sender];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n            if (msg.sender != to) {\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so low balance calls safe some gas\\n\\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount; // Can't overflow because totalSupply would be greater than 2^256-1\\n            }\\n        }\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\\n    /// @param from Address to draw tokens from.\\n    /// @param to The address to move the tokens.\\n    /// @param amount The token amount to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // If `amount` is 0, or `from` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[from];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n\\n            if (from != to) {\\n                uint256 spenderAllowance = allowance[from][msg.sender];\\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\\n                if (spenderAllowance != type(uint256).max) {\\n                    require(spenderAllowance >= amount, \\\"ERC20: allowance too low\\\");\\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\\n                }\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so other failed calls safe some gas\\n\\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount; // Can't overflow because totalSupply would be greater than 2^256-1\\n            }\\n        }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approves `amount` from sender to be spend by `spender`.\\n    /// @param spender Address of the party that can draw from msg.sender's account.\\n    /// @param amount The maximum collective amount that `spender` can draw.\\n    /// @return (bool) Returns True if approved.\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\\n    /// @param owner_ Address of the owner.\\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\\n    /// @param value The maximum collective amount that `spender` can draw.\\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(owner_ != address(0), \\\"ERC20: Owner cannot be 0\\\");\\n        require(block.timestamp < deadline, \\\"ERC20: Expired\\\");\\n        require(\\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\\n                owner_,\\n            \\\"ERC20: Invalid Signature\\\"\\n        );\\n        allowance[owner_][spender] = value;\\n        emit Approval(owner_, spender, value);\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\n// License-Identifier: MIT\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n    \\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n       return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n    \\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol@v1.0.1\\n// License-Identifier: MIT\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol@v1.0.1\\n// License-Identifier: MIT\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IStrategy.sol@v1.0.1\\n// License-Identifier: MIT\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.1\\n// License-Identifier: MIT\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n\\n    function batchFlashLoan(\\n        IBatchFlashBorrower borrower,\\n        address[] calldata receivers,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    function claimOwnership() external;\\n\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) external payable;\\n\\n    function deposit(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    function flashLoan(\\n        IFlashBorrower borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function harvest(\\n        IERC20 token,\\n        bool balance,\\n        uint256 maxChangeAmount\\n    ) external;\\n\\n    function masterContractApproved(address, address) external view returns (bool);\\n\\n    function masterContractOf(address) external view returns (address);\\n\\n    function nonces(address) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n\\n    function permitToken(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function registerProtocol() external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n\\n    function strategy(IERC20) external view returns (IStrategy);\\n\\n    function strategyData(IERC20)\\n        external\\n        view\\n        returns (\\n            uint64 strategyStartDate,\\n            uint64 targetPercentage,\\n            uint128 balance\\n        );\\n\\n    function toAmount(\\n        IERC20 token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function totals(IERC20) external view returns (Rebase memory totals_);\\n\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/interfaces/IOracle.sol\\n// License-Identifier: MIT\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\\n// File contracts/interfaces/ISwapper.sol\\n// License-Identifier: MIT\\n\\ninterface ISwapper {\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\n\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\n    /// this should be less than or equal to amountFromMax.\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swapExact(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        address refundTo,\\n        uint256 shareFromSupplied,\\n        uint256 shareToExact\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\n}\\n\\n// File contracts/KashiPair.sol\\n// License-Identifier: UNLICENSED\\n// Kashi Lending Medium Risk\\n\\n/// @title KashiPair\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\ncontract KashiPairMediumRiskV1 is ERC20, BoringOwnable, IMasterContract {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using RebaseLibrary for Rebase;\\n    using BoringERC20 for IERC20;\\n\\n    event LogExchangeRate(uint256 rate);\\n    event LogAccrue(uint256 accruedAmount, uint256 feeFraction, uint64 rate, uint256 utilization);\\n    event LogAddCollateral(address indexed from, address indexed to, uint256 share);\\n    event LogAddAsset(address indexed from, address indexed to, uint256 share, uint256 fraction);\\n    event LogRemoveCollateral(address indexed from, address indexed to, uint256 share);\\n    event LogRemoveAsset(address indexed from, address indexed to, uint256 share, uint256 fraction);\\n    event LogBorrow(address indexed from, address indexed to, uint256 amount, uint256 feeAmount, uint256 part);\\n    event LogRepay(address indexed from, address indexed to, uint256 amount, uint256 part);\\n    event LogFeeTo(address indexed newFeeTo);\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\n\\n    // Immutables (for MasterContract and all clones)\\n    IBentoBoxV1 public immutable bentoBox;\\n    KashiPairMediumRiskV1 public immutable masterContract;\\n\\n    // MasterContract variables\\n    address public feeTo;\\n    mapping(ISwapper => bool) public swappers;\\n\\n    // Per clone variables\\n    // Clone init settings\\n    IERC20 public collateral;\\n    IERC20 public asset;\\n    IOracle public oracle;\\n    bytes public oracleData;\\n\\n    // Total amounts\\n    uint256 public totalCollateralShare; // Total collateral supplied\\n    Rebase public totalAsset; // elastic = BentoBox shares held by the KashiPair, base = Total fractions held by asset suppliers\\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\\n\\n    // User balances\\n    mapping(address => uint256) public userCollateralShare;\\n    // userAssetFraction is called balanceOf for ERC20 compatibility (it's in ERC20.sol)\\n    mapping(address => uint256) public userBorrowPart;\\n\\n    /// @notice Exchange and interest rate tracking.\\n    /// This is 'cached' here because calls to Oracles can be very expensive.\\n    uint256 public exchangeRate;\\n\\n    struct AccrueInfo {\\n        uint64 interestPerSecond;\\n        uint64 lastAccrued;\\n        uint128 feesEarnedFraction;\\n    }\\n\\n    AccrueInfo public accrueInfo;\\n\\n    // ERC20 'variables'\\n    function symbol() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"km\\\", collateral.safeSymbol(), \\\"/\\\", asset.safeSymbol(), \\\"-\\\", oracle.symbol(oracleData)));\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"Kashi Medium Risk \\\", collateral.safeName(), \\\"/\\\", asset.safeName(), \\\"-\\\", oracle.name(oracleData)));\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return asset.safeDecimals();\\n    }\\n\\n    // totalSupply for ERC20 compatibility\\n    function totalSupply() public view returns (uint256) {\\n        return totalAsset.base;\\n    }\\n\\n    // Settings for the Medium Risk KashiPair\\n    uint256 private constant CLOSED_COLLATERIZATION_RATE = 75000; // 75%\\n    uint256 private constant OPEN_COLLATERIZATION_RATE = 77000; // 77%\\n    uint256 private constant COLLATERIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\\n    uint256 private constant MINIMUM_TARGET_UTILIZATION = 7e17; // 70%\\n    uint256 private constant MAXIMUM_TARGET_UTILIZATION = 8e17; // 80%\\n    uint256 private constant UTILIZATION_PRECISION = 1e18;\\n    uint256 private constant FULL_UTILIZATION = 1e18;\\n    uint256 private constant FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION - MAXIMUM_TARGET_UTILIZATION;\\n    uint256 private constant FACTOR_PRECISION = 1e18;\\n\\n    uint64 private constant STARTING_INTEREST_PER_SECOND = 317097920; // approx 1% APR\\n    uint64 private constant MINIMUM_INTEREST_PER_SECOND = 79274480; // approx 0.25% APR\\n    uint64 private constant MAXIMUM_INTEREST_PER_SECOND = 317097920000; // approx 1000% APR\\n    uint256 private constant INTEREST_ELASTICITY = 28800e36; // Half or double in 28800 seconds (8 hours) if linear\\n\\n    uint256 private constant EXCHANGE_RATE_PRECISION = 1e18;\\n\\n    uint256 private constant LIQUIDATION_MULTIPLIER = 112000; // add 12%\\n    uint256 private constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\\n\\n    // Fees\\n    uint256 private constant PROTOCOL_FEE = 10000; // 10%\\n    uint256 private constant PROTOCOL_FEE_DIVISOR = 1e5;\\n    uint256 private constant BORROW_OPENING_FEE = 50; // 0.05%\\n    uint256 private constant BORROW_OPENING_FEE_PRECISION = 1e5;\\n\\n    /// @notice The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\\n    constructor(IBentoBoxV1 bentoBox_) public {\\n        bentoBox = bentoBox_;\\n        masterContract = this;\\n        feeTo = msg.sender;\\n    }\\n\\n    /// @notice Serves as the constructor for clones, as clones can't have a regular constructor\\n    /// @dev `data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\\n    function init(bytes calldata data) public payable override {\\n        require(address(collateral) == address(0), \\\"KashiPair: already initialized\\\");\\n        (collateral, asset, oracle, oracleData) = abi.decode(data, (IERC20, IERC20, IOracle, bytes));\\n        require(address(collateral) != address(0), \\\"KashiPair: bad pair\\\");\\n\\n        accrueInfo.interestPerSecond = uint64(STARTING_INTEREST_PER_SECOND); // 1% APR, with 1e18 being 100%\\n    }\\n\\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\\n    function accrue() public {\\n        AccrueInfo memory _accrueInfo = accrueInfo;\\n        // Number of seconds since accrue was called\\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\\n        if (elapsedTime == 0) {\\n            return;\\n        }\\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\\n\\n        Rebase memory _totalBorrow = totalBorrow;\\n        if (_totalBorrow.base == 0) {\\n            // If there are no borrows, reset the interest rate\\n            if (_accrueInfo.interestPerSecond != STARTING_INTEREST_PER_SECOND) {\\n                _accrueInfo.interestPerSecond = STARTING_INTEREST_PER_SECOND;\\n                emit LogAccrue(0, 0, STARTING_INTEREST_PER_SECOND, 0);\\n            }\\n            accrueInfo = _accrueInfo;\\n            return;\\n        }\\n\\n        uint256 extraAmount = 0;\\n        uint256 feeFraction = 0;\\n        Rebase memory _totalAsset = totalAsset;\\n\\n        // Accrue interest\\n        extraAmount = uint256(_totalBorrow.elastic).mul(_accrueInfo.interestPerSecond).mul(elapsedTime) / 1e18;\\n        _totalBorrow.elastic = _totalBorrow.elastic.add(extraAmount.to128());\\n        uint256 fullAssetAmount = bentoBox.toAmount(asset, _totalAsset.elastic, false).add(_totalBorrow.elastic);\\n\\n        uint256 feeAmount = extraAmount.mul(PROTOCOL_FEE) / PROTOCOL_FEE_DIVISOR; // % of interest paid goes to fee\\n        feeFraction = feeAmount.mul(_totalAsset.base) / fullAssetAmount;\\n        _accrueInfo.feesEarnedFraction = _accrueInfo.feesEarnedFraction.add(feeFraction.to128());\\n        totalAsset.base = _totalAsset.base.add(feeFraction.to128());\\n        totalBorrow = _totalBorrow;\\n\\n        // Update interest rate\\n        uint256 utilization = uint256(_totalBorrow.elastic).mul(UTILIZATION_PRECISION) / fullAssetAmount;\\n        if (utilization < MINIMUM_TARGET_UTILIZATION) {\\n            uint256 underFactor = MINIMUM_TARGET_UTILIZATION.sub(utilization).mul(FACTOR_PRECISION) / MINIMUM_TARGET_UTILIZATION;\\n            uint256 scale = INTEREST_ELASTICITY.add(underFactor.mul(underFactor).mul(elapsedTime));\\n            _accrueInfo.interestPerSecond = uint64(uint256(_accrueInfo.interestPerSecond).mul(INTEREST_ELASTICITY) / scale);\\n\\n            if (_accrueInfo.interestPerSecond < MINIMUM_INTEREST_PER_SECOND) {\\n                _accrueInfo.interestPerSecond = MINIMUM_INTEREST_PER_SECOND; // 0.25% APR minimum\\n            }\\n        } else if (utilization > MAXIMUM_TARGET_UTILIZATION) {\\n            uint256 overFactor = utilization.sub(MAXIMUM_TARGET_UTILIZATION).mul(FACTOR_PRECISION) / FULL_UTILIZATION_MINUS_MAX;\\n            uint256 scale = INTEREST_ELASTICITY.add(overFactor.mul(overFactor).mul(elapsedTime));\\n            uint256 newInterestPerSecond = uint256(_accrueInfo.interestPerSecond).mul(scale) / INTEREST_ELASTICITY;\\n            if (newInterestPerSecond > MAXIMUM_INTEREST_PER_SECOND) {\\n                newInterestPerSecond = MAXIMUM_INTEREST_PER_SECOND; // 1000% APR maximum\\n            }\\n            _accrueInfo.interestPerSecond = uint64(newInterestPerSecond);\\n        }\\n\\n        emit LogAccrue(extraAmount, feeFraction, _accrueInfo.interestPerSecond, utilization);\\n        accrueInfo = _accrueInfo;\\n    }\\n\\n    /// @notice Concrete implementation of `isSolvent`. Includes a third parameter to allow caching `exchangeRate`.\\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\\n    function _isSolvent(\\n        address user,\\n        bool open,\\n        uint256 _exchangeRate\\n    ) internal view returns (bool) {\\n        // accrue must have already been called!\\n        uint256 borrowPart = userBorrowPart[user];\\n        if (borrowPart == 0) return true;\\n        uint256 collateralShare = userCollateralShare[user];\\n        if (collateralShare == 0) return false;\\n\\n        Rebase memory _totalBorrow = totalBorrow;\\n\\n        return\\n            bentoBox.toAmount(\\n                collateral,\\n                collateralShare.mul(EXCHANGE_RATE_PRECISION / COLLATERIZATION_RATE_PRECISION).mul(\\n                    open ? OPEN_COLLATERIZATION_RATE : CLOSED_COLLATERIZATION_RATE\\n                ),\\n                false\\n            ) >=\\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\\n            borrowPart.mul(_totalBorrow.elastic).mul(_exchangeRate) / _totalBorrow.base;\\n    }\\n\\n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\\n    modifier solvent() {\\n        _;\\n        require(_isSolvent(msg.sender, false, exchangeRate), \\\"KashiPair: user insolvent\\\");\\n    }\\n\\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\\n    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\\n    /// @return updated True if `exchangeRate` was updated.\\n    /// @return rate The new exchange rate.\\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\\n        (updated, rate) = oracle.get(oracleData);\\n\\n        if (updated) {\\n            exchangeRate = rate;\\n            emit LogExchangeRate(rate);\\n        } else {\\n            // Return the old rate if fetching wasn't successful\\n            rate = exchangeRate;\\n        }\\n    }\\n\\n    /// @dev Helper function to move tokens.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount in shares to add.\\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\\n    /// Only used for accounting checks.\\n    /// @param skim If True, only does a balance check on this contract.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    function _addTokens(\\n        IERC20 token,\\n        uint256 share,\\n        uint256 total,\\n        bool skim\\n    ) internal {\\n        if (skim) {\\n            require(share <= bentoBox.balanceOf(token, address(this)).sub(total), \\\"KashiPair: Skim too much\\\");\\n        } else {\\n            bentoBox.transfer(token, msg.sender, address(this), share);\\n        }\\n    }\\n\\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\\n    /// @param to The receiver of the tokens.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param share The amount of shares to add for `to`.\\n    function addCollateral(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) public {\\n        userCollateralShare[to] = userCollateralShare[to].add(share);\\n        uint256 oldTotalCollateralShare = totalCollateralShare;\\n        totalCollateralShare = oldTotalCollateralShare.add(share);\\n        _addTokens(collateral, share, oldTotalCollateralShare, skim);\\n        emit LogAddCollateral(skim ? address(bentoBox) : msg.sender, to, share);\\n    }\\n\\n    /// @dev Concrete implementation of `removeCollateral`.\\n    function _removeCollateral(address to, uint256 share) internal {\\n        userCollateralShare[msg.sender] = userCollateralShare[msg.sender].sub(share);\\n        totalCollateralShare = totalCollateralShare.sub(share);\\n        emit LogRemoveCollateral(msg.sender, to, share);\\n        bentoBox.transfer(collateral, address(this), to, share);\\n    }\\n\\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\\n    /// @param to The receiver of the shares.\\n    /// @param share Amount of shares to remove.\\n    function removeCollateral(address to, uint256 share) public solvent {\\n        // accrue must be called because we check solvency\\n        accrue();\\n        _removeCollateral(to, share);\\n    }\\n\\n    /// @dev Concrete implementation of `addAsset`.\\n    function _addAsset(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) internal returns (uint256 fraction) {\\n        Rebase memory _totalAsset = totalAsset;\\n        uint256 totalAssetShare = _totalAsset.elastic;\\n        uint256 allShare = _totalAsset.elastic + bentoBox.toShare(asset, totalBorrow.elastic, true);\\n        fraction = allShare == 0 ? share : share.mul(_totalAsset.base) / allShare;\\n        if (_totalAsset.base.add(fraction.to128()) < 1000) {\\n            return 0;\\n        }\\n        totalAsset = _totalAsset.add(share, fraction);\\n        balanceOf[to] = balanceOf[to].add(fraction);\\n        _addTokens(asset, share, totalAssetShare, skim);\\n        emit LogAddAsset(skim ? address(bentoBox) : msg.sender, to, share, fraction);\\n    }\\n\\n    /// @notice Adds assets to the lending pair.\\n    /// @param to The address of the user to receive the assets.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param share The amount of shares to add.\\n    /// @return fraction Total fractions added.\\n    function addAsset(\\n        address to,\\n        bool skim,\\n        uint256 share\\n    ) public returns (uint256 fraction) {\\n        accrue();\\n        fraction = _addAsset(to, skim, share);\\n    }\\n\\n    /// @dev Concrete implementation of `removeAsset`.\\n    function _removeAsset(address to, uint256 fraction) internal returns (uint256 share) {\\n        Rebase memory _totalAsset = totalAsset;\\n        uint256 allShare = _totalAsset.elastic + bentoBox.toShare(asset, totalBorrow.elastic, true);\\n        share = fraction.mul(allShare) / _totalAsset.base;\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(fraction);\\n        _totalAsset.elastic = _totalAsset.elastic.sub(share.to128());\\n        _totalAsset.base = _totalAsset.base.sub(fraction.to128());\\n        require(_totalAsset.base >= 1000, \\\"Kashi: below minimum\\\");\\n        totalAsset = _totalAsset;\\n        emit LogRemoveAsset(msg.sender, to, share, fraction);\\n        bentoBox.transfer(asset, address(this), to, share);\\n    }\\n\\n    /// @notice Removes an asset from msg.sender and transfers it to `to`.\\n    /// @param to The user that receives the removed assets.\\n    /// @param fraction The amount/fraction of assets held to remove.\\n    /// @return share The amount of shares transferred to `to`.\\n    function removeAsset(address to, uint256 fraction) public returns (uint256 share) {\\n        accrue();\\n        share = _removeAsset(to, fraction);\\n    }\\n\\n    /// @dev Concrete implementation of `borrow`.\\n    function _borrow(address to, uint256 amount) internal returns (uint256 part, uint256 share) {\\n        uint256 feeAmount = amount.mul(BORROW_OPENING_FEE) / BORROW_OPENING_FEE_PRECISION; // A flat % fee is charged for any borrow\\n\\n        (totalBorrow, part) = totalBorrow.add(amount.add(feeAmount), true);\\n        userBorrowPart[msg.sender] = userBorrowPart[msg.sender].add(part);\\n        emit LogBorrow(msg.sender, to, amount, feeAmount, part);\\n\\n        share = bentoBox.toShare(asset, amount, false);\\n        Rebase memory _totalAsset = totalAsset;\\n        require(_totalAsset.base >= 1000, \\\"Kashi: below minimum\\\");\\n        _totalAsset.elastic = _totalAsset.elastic.sub(share.to128());\\n        totalAsset = _totalAsset;\\n        bentoBox.transfer(asset, address(this), to, share);\\n    }\\n\\n    /// @notice Sender borrows `amount` and transfers it to `to`.\\n    /// @return part Total part of the debt held by borrowers.\\n    /// @return share Total amount in shares borrowed.\\n    function borrow(address to, uint256 amount) public solvent returns (uint256 part, uint256 share) {\\n        accrue();\\n        (part, share) = _borrow(to, amount);\\n    }\\n\\n    /// @dev Concrete implementation of `repay`.\\n    function _repay(\\n        address to,\\n        bool skim,\\n        uint256 part\\n    ) internal returns (uint256 amount) {\\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\\n        userBorrowPart[to] = userBorrowPart[to].sub(part);\\n\\n        uint256 share = bentoBox.toShare(asset, amount, true);\\n        uint128 totalShare = totalAsset.elastic;\\n        _addTokens(asset, share, uint256(totalShare), skim);\\n        totalAsset.elastic = totalShare.add(share.to128());\\n        emit LogRepay(skim ? address(bentoBox) : msg.sender, to, amount, part);\\n    }\\n\\n    /// @notice Repays a loan.\\n    /// @param to Address of the user this payment should go.\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\n    /// @param part The amount to repay. See `userBorrowPart`.\\n    /// @return amount The total amount repayed.\\n    function repay(\\n        address to,\\n        bool skim,\\n        uint256 part\\n    ) public returns (uint256 amount) {\\n        accrue();\\n        amount = _repay(to, skim, part);\\n    }\\n\\n    // Functions that need accrue to be called\\n    uint8 internal constant ACTION_ADD_ASSET = 1;\\n    uint8 internal constant ACTION_REPAY = 2;\\n    uint8 internal constant ACTION_REMOVE_ASSET = 3;\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\n    uint8 internal constant ACTION_BORROW = 5;\\n    uint8 internal constant ACTION_GET_REPAY_SHARE = 6;\\n    uint8 internal constant ACTION_GET_REPAY_PART = 7;\\n    uint8 internal constant ACTION_ACCRUE = 8;\\n\\n    // Functions that don't need accrue to be called\\n    uint8 internal constant ACTION_ADD_COLLATERAL = 10;\\n    uint8 internal constant ACTION_UPDATE_EXCHANGE_RATE = 11;\\n\\n    // Function on BentoBox\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\n\\n    // Any external call (except to BentoBox)\\n    uint8 internal constant ACTION_CALL = 30;\\n\\n    int256 internal constant USE_VALUE1 = -1;\\n    int256 internal constant USE_VALUE2 = -2;\\n\\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\\n    function _num(\\n        int256 inNum,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal pure returns (uint256 outNum) {\\n        outNum = inNum >= 0 ? uint256(inNum) : (inNum == USE_VALUE1 ? value1 : value2);\\n    }\\n\\n    /// @dev Helper function for depositing into `bentoBox`.\\n    function _bentoDeposit(\\n        bytes memory data,\\n        uint256 value,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\\n        share = int256(_num(share, value1, value2));\\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\\n    }\\n\\n    /// @dev Helper function to withdraw from the `bentoBox`.\\n    function _bentoWithdraw(\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\\n    }\\n\\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\\n    /// Calls to `bentoBox` are not allowed for obvious security reasons.\\n    /// This also means that calls made from this contract shall *not* be trusted.\\n    function _call(\\n        uint256 value,\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (bytes memory, uint8) {\\n        (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) =\\n            abi.decode(data, (address, bytes, bool, bool, uint8));\\n\\n        if (useValue1 && !useValue2) {\\n            callData = abi.encodePacked(callData, value1);\\n        } else if (!useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value2);\\n        } else if (useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value1, value2);\\n        }\\n\\n        require(callee != address(bentoBox) && callee != address(this), \\\"KashiPair: can't call\\\");\\n\\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\\n        require(success, \\\"KashiPair: call failed\\\");\\n        return (returnData, returnValues);\\n    }\\n\\n    struct CookStatus {\\n        bool needsSolvencyCheck;\\n        bool hasAccrued;\\n    }\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\\n    function cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external payable returns (uint256 value1, uint256 value2) {\\n        CookStatus memory status;\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            if (!status.hasAccrued && action < 10) {\\n                accrue();\\n                status.hasAccrued = true;\\n            }\\n            if (action == ACTION_ADD_COLLATERAL) {\\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                addCollateral(to, skim, _num(share, value1, value2));\\n            } else if (action == ACTION_ADD_ASSET) {\\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                value1 = _addAsset(to, skim, _num(share, value1, value2));\\n            } else if (action == ACTION_REPAY) {\\n                (int256 part, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\n                _repay(to, skim, _num(part, value1, value2));\\n            } else if (action == ACTION_REMOVE_ASSET) {\\n                (int256 fraction, address to) = abi.decode(datas[i], (int256, address));\\n                value1 = _removeAsset(to, _num(fraction, value1, value2));\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\n                (int256 share, address to) = abi.decode(datas[i], (int256, address));\\n                _removeCollateral(to, _num(share, value1, value2));\\n                status.needsSolvencyCheck = true;\\n            } else if (action == ACTION_BORROW) {\\n                (int256 amount, address to) = abi.decode(datas[i], (int256, address));\\n                (value1, value2) = _borrow(to, _num(amount, value1, value2));\\n                status.needsSolvencyCheck = true;\\n            } else if (action == ACTION_UPDATE_EXCHANGE_RATE) {\\n                (bool must_update, uint256 minRate, uint256 maxRate) = abi.decode(datas[i], (bool, uint256, uint256));\\n                (bool updated, uint256 rate) = updateExchangeRate();\\n                require((!must_update || updated) && rate > minRate && (maxRate == 0 || rate > maxRate), \\\"KashiPair: rate not ok\\\");\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) =\\n                    abi.decode(datas[i], (address, address, bool, uint8, bytes32, bytes32));\\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\n                (value1, value2) = _bentoDeposit(datas[i], values[i], value1, value2);\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\n                (value1, value2) = _bentoWithdraw(datas[i], value1, value2);\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\\n                bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\\n            } else if (action == ACTION_CALL) {\\n                (bytes memory returnData, uint8 returnValues) = _call(values[i], datas[i], value1, value2);\\n\\n                if (returnValues == 1) {\\n                    (value1) = abi.decode(returnData, (uint256));\\n                } else if (returnValues == 2) {\\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\\n                }\\n            } else if (action == ACTION_GET_REPAY_SHARE) {\\n                int256 part = abi.decode(datas[i], (int256));\\n                value1 = bentoBox.toShare(asset, totalBorrow.toElastic(_num(part, value1, value2), true), true);\\n            } else if (action == ACTION_GET_REPAY_PART) {\\n                int256 amount = abi.decode(datas[i], (int256));\\n                value1 = totalBorrow.toBase(_num(amount, value1, value2), false);\\n            }\\n        }\\n\\n        if (status.needsSolvencyCheck) {\\n            require(_isSolvent(msg.sender, false, exchangeRate), \\\"KashiPair: user insolvent\\\");\\n        }\\n    }\\n\\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\\n    /// @param users An array of user addresses.\\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\\n    /// @param to Address of the receiver in open liquidations if `swapper` is zero.\\n    /// @param swapper Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.\\n    /// @param open True to perform a open liquidation else False.\\n    function liquidate(\\n        address[] calldata users,\\n        uint256[] calldata maxBorrowParts,\\n        address to,\\n        ISwapper swapper,\\n        bool open\\n    ) public {\\n        // Oracle can fail but we still need to allow liquidations\\n        (, uint256 _exchangeRate) = updateExchangeRate();\\n        accrue();\\n\\n        uint256 allCollateralShare;\\n        uint256 allBorrowAmount;\\n        uint256 allBorrowPart;\\n        Rebase memory _totalBorrow = totalBorrow;\\n        Rebase memory bentoBoxTotals = bentoBox.totals(collateral);\\n        for (uint256 i = 0; i < users.length; i++) {\\n            address user = users[i];\\n            if (!_isSolvent(user, open, _exchangeRate)) {\\n                uint256 borrowPart;\\n                {\\n                    uint256 availableBorrowPart = userBorrowPart[user];\\n                    borrowPart = maxBorrowParts[i] > availableBorrowPart ? availableBorrowPart : maxBorrowParts[i];\\n                    userBorrowPart[user] = availableBorrowPart.sub(borrowPart);\\n                }\\n                uint256 borrowAmount = _totalBorrow.toElastic(borrowPart, false);\\n                uint256 collateralShare =\\n                    bentoBoxTotals.toBase(\\n                        borrowAmount.mul(LIQUIDATION_MULTIPLIER).mul(_exchangeRate) /\\n                            (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\\n                        false\\n                    );\\n\\n                userCollateralShare[user] = userCollateralShare[user].sub(collateralShare);\\n                emit LogRemoveCollateral(user, swapper == ISwapper(0) ? to : address(swapper), collateralShare);\\n                emit LogRepay(swapper == ISwapper(0) ? msg.sender : address(swapper), user, borrowAmount, borrowPart);\\n\\n                // Keep totals\\n                allCollateralShare = allCollateralShare.add(collateralShare);\\n                allBorrowAmount = allBorrowAmount.add(borrowAmount);\\n                allBorrowPart = allBorrowPart.add(borrowPart);\\n            }\\n        }\\n        require(allBorrowAmount != 0, \\\"KashiPair: all are solvent\\\");\\n        _totalBorrow.elastic = _totalBorrow.elastic.sub(allBorrowAmount.to128());\\n        _totalBorrow.base = _totalBorrow.base.sub(allBorrowPart.to128());\\n        totalBorrow = _totalBorrow;\\n        totalCollateralShare = totalCollateralShare.sub(allCollateralShare);\\n\\n        uint256 allBorrowShare = bentoBox.toShare(asset, allBorrowAmount, true);\\n\\n        if (!open) {\\n            // Closed liquidation using a pre-approved swapper for the benefit of the LPs\\n            require(masterContract.swappers(swapper), \\\"KashiPair: Invalid swapper\\\");\\n\\n            // Swaps the users' collateral for the borrowed asset\\n            bentoBox.transfer(collateral, address(this), address(swapper), allCollateralShare);\\n            swapper.swap(collateral, asset, address(this), allBorrowShare, allCollateralShare);\\n\\n            uint256 returnedShare = bentoBox.balanceOf(asset, address(this)).sub(uint256(totalAsset.elastic));\\n            uint256 extraShare = returnedShare.sub(allBorrowShare);\\n            uint256 feeShare = extraShare.mul(PROTOCOL_FEE) / PROTOCOL_FEE_DIVISOR; // % of profit goes to fee\\n            // solhint-disable-next-line reentrancy\\n            bentoBox.transfer(asset, address(this), masterContract.feeTo(), feeShare);\\n            totalAsset.elastic = totalAsset.elastic.add(returnedShare.sub(feeShare).to128());\\n            emit LogAddAsset(address(swapper), address(this), extraShare.sub(feeShare), 0);\\n        } else {\\n            // Swap using a swapper freely chosen by the caller\\n            // Open (flash) liquidation: get proceeds first and provide the borrow after\\n            bentoBox.transfer(collateral, address(this), swapper == ISwapper(0) ? to : address(swapper), allCollateralShare);\\n            if (swapper != ISwapper(0)) {\\n                swapper.swap(collateral, asset, msg.sender, allBorrowShare, allCollateralShare);\\n            }\\n\\n            bentoBox.transfer(asset, msg.sender, address(this), allBorrowShare);\\n            totalAsset.elastic = totalAsset.elastic.add(allBorrowShare.to128());\\n        }\\n    }\\n\\n    /// @notice Withdraws the fees accumulated.\\n    function withdrawFees() public {\\n        accrue();\\n        address _feeTo = masterContract.feeTo();\\n        uint256 _feesEarnedFraction = accrueInfo.feesEarnedFraction;\\n        balanceOf[_feeTo] = balanceOf[_feeTo].add(_feesEarnedFraction);\\n        accrueInfo.feesEarnedFraction = 0;\\n\\n        emit LogWithdrawFees(_feeTo, _feesEarnedFraction);\\n    }\\n\\n    /// @notice Used to register and enable or disable swapper contracts used in closed liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param swapper The address of the swapper contract that conforms to `ISwapper`.\\n    /// @param enable True to enable the swapper. To disable use False.\\n    function setSwapper(ISwapper swapper, bool enable) public onlyOwner {\\n        swappers[swapper] = enable;\\n    }\\n\\n    /// @notice Sets the beneficiary of fees accrued in liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param newFeeTo The address of the receiver.\\n    function setFeeTo(address newFeeTo) public onlyOwner {\\n        feeTo = newFeeTo;\\n        emit LogFeeTo(newFeeTo);\\n    }\\n}\",\"keccak256\":\"0xe69a1f1651af473819120b2b10595faf0fdf0f93b0f119ccc10a03af92129f0a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620060b0380380620060b0833981016040819052620000359162000110565b4660a08190526200004681620000ba565b60805250600380546001600160a01b031916339081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606091821b1660c05230901b60e052600580546001600160a01b031916331790556200015f565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001620000f39392919062000140565b604051602081830303815290604052805190602001209050919050565b60006020828403121562000122578081fd5b81516001600160a01b038116811462000139578182fd5b9392505050565b92835260208301919091526001600160a01b0316604082015260600190565b60805160a05160c05160601c60e05160601c615e7a6200023660003980610d8c5280611f1f528061220f52806128ea52508061141652806115de52806116b6528061182952806119ce5280611afd5280611e765280611fda528061210a52806121c952806123a352806124ec52806126505280612d7352806132c352806133cb528061348d5280613645528061370552806138d65280613ba45280613cf35280613e1c5280613fa9528061405f528061413b52806142c052806145bb5280614642525080610cb5525080610cea5250615e7a6000f3fe6080604052600436106102725760003560e01c8063656f3d641161014f5780638da5cb5b116100c1578063d8dfeb451161007a578063d8dfeb45146106f1578063dd62ed3e14610706578063e30c397814610726578063f46901ed1461073b578063f8ba4cff1461075b578063f9557ccb1461077057610272565b80638da5cb5b1461064e57806395d89b4114610663578063a9059cbb14610678578063b27c0e7414610698578063cd446e22146106bc578063d505accf146106d157610272565b80637dc0d1d0116101135780637dc0d1d0146105965780637ecebe00146105ab5780638285ef40146105cb578063860ffea1146105ee578063876467f81461060e5780638cad7fbe1461062e57610272565b8063656f3d64146105195780636b2ace871461052c57806370a082311461054157806374645ff31461056157806376ee101b1461057657610272565b8063313ce567116101e8578063473e3ce7116101ac578063473e3ce714610479578063476343ee1461048e57806348e4163e146104a35780634b8a3529146104c35780634ddf47d4146104f15780634e71e0c81461050457610272565b8063313ce567146103f85780633644e5151461041a57806338d52e0f1461042f5780633ba0b9a9146104445780633f2617cb1461045957610272565b806315294c401161023a57806315294c401461033657806318160ddd146103635780631b51e940146103785780631c9e379b146103985780632317ef67146103b857806323b872dd146103d857610272565b8063017e7e581461027757806302ce728f146102a257806306fdde03146102c5578063078dfbe7146102e7578063095ea7b314610309575b600080fd5b34801561028357600080fd5b5061028c610785565b6040516102999190615504565b60405180910390f35b3480156102ae57600080fd5b506102b7610794565b60405161029992919061555c565b3480156102d157600080fd5b506102da610871565b60405161029991906155e6565b3480156102f357600080fd5b50610307610302366004614d88565b610949565b005b34801561031557600080fd5b50610329610324366004614e01565b610a39565b6040516102999190615551565b34801561034257600080fd5b50610356610351366004614dd2565b610aa4565b604051610299919061556c565b34801561036f57600080fd5b50610356610ac1565b34801561038457600080fd5b50610356610393366004614dd2565b610ad7565b3480156103a457600080fd5b506103566103b3366004614b71565b610aec565b3480156103c457600080fd5b506103566103d3366004614e01565b610afe565b3480156103e457600080fd5b506103296103f3366004614cd8565b610b19565b34801561040457600080fd5b5061040d610c93565b6040516102999190615d08565b34801561042657600080fd5b50610356610cb0565b34801561043b57600080fd5b5061028c610d10565b34801561045057600080fd5b50610356610d1f565b34801561046557600080fd5b50610307610474366004615213565b610d25565b34801561048557600080fd5b50610356610d7a565b34801561049a57600080fd5b50610307610d80565b3480156104af57600080fd5b506103566104be366004614b71565b610ebd565b3480156104cf57600080fd5b506104e36104de366004614e01565b610ecf565b604051610299929190615cb8565b6103076104ff366004614fe3565b610f1d565b34801561051057600080fd5b50610307611000565b6104e3610527366004614ed1565b61108e565b34801561053857600080fd5b5061028c6119cc565b34801561054d57600080fd5b5061035661055c366004614b71565b6119f0565b34801561056d57600080fd5b506102da611a02565b34801561058257600080fd5b50610307610591366004614e2c565b611a90565b3480156105a257600080fd5b5061028c61259a565b3480156105b757600080fd5b506103566105c6366004614b71565b6125a9565b3480156105d757600080fd5b506105e06125bb565b604051610299929190615c9e565b3480156105fa57600080fd5b50610307610609366004614dd2565b6125d5565b34801561061a57600080fd5b50610307610629366004614e01565b6126b6565b34801561063a57600080fd5b50610329610649366004614b71565b6126f6565b34801561065a57600080fd5b5061028c61270b565b34801561066f57600080fd5b506102da61271a565b34801561068457600080fd5b50610329610693366004614e01565b6127de565b3480156106a457600080fd5b506106ad6128bb565b60405161029993929190615cdc565b3480156106c857600080fd5b5061028c6128e8565b3480156106dd57600080fd5b506103076106ec366004614d18565b61290c565b3480156106fd57600080fd5b5061028c612aad565b34801561071257600080fd5b50610356610721366004614ca0565b612abc565b34801561073257600080fd5b5061028c612ad9565b34801561074757600080fd5b50610307610756366004614b71565b612ae8565b34801561076757600080fd5b50610307612b5c565b34801561077c57600080fd5b506105e061311e565b6005546001600160a01b031681565b60095460405163d6d7d52560e01b815260009182916001600160a01b039091169063d6d7d525906107ca90600a906004016155f9565b6040805180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190614f82565b909250905081156108685760108190556040517f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c89061085b90839061556c565b60405180910390a161086d565b506010545b9091565b600754606090610889906001600160a01b0316613138565b60085461089e906001600160a01b0316613138565b60095460405163355a219b60e21b81526001600160a01b039091169063d568866c906108cf90600a906004016155f9565b60006040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092391908101906152a2565b6040516020016109359392919061541a565b604051602081830303815290604052905090565b6003546001600160a01b0316331461097c5760405162461bcd60e51b815260040161097390615a93565b60405180910390fd5b8115610a18576001600160a01b0383161515806109965750805b6109b25760405162461bcd60e51b8152600401610973906158d4565b6003546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0385166001600160a01b031991821617909155600480549091169055610a34565b600480546001600160a01b0319166001600160a01b0385161790555b505050565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a9290869061556c565b60405180910390a35060015b92915050565b6000610aae612b5c565b610ab98484846131fd565b949350505050565b600c54600160801b90046001600160801b031690565b6000610ae1612b5c565b610ab9848484613436565b600e6020526000908152604090205481565b6000610b08612b5c565b610b1283836136b1565b9392505050565b60008115610c3e576001600160a01b03841660009081526020819052604090205482811015610b5a5760405162461bcd60e51b815260040161097390615b62565b836001600160a01b0316856001600160a01b031614610c3c576001600160a01b03851660009081526001602090815260408083203384529091529020546000198114610be95783811015610bc05760405162461bcd60e51b8152600401610973906159ce565b6001600160a01b0386166000908152600160209081526040808320338452909152902084820390555b6001600160a01b038516610c0f5760405162461bcd60e51b81526004016109739061586d565b506001600160a01b0380861660009081526020819052604080822086850390559186168152208054840190555b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c81919061556c565b60405180910390a35060019392505050565b600854600090610cab906001600160a01b031661394f565b905090565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610ce857610ce381613a08565b610d0a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6008546001600160a01b031681565b60105481565b6003546001600160a01b03163314610d4f5760405162461bcd60e51b815260040161097390615a93565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600b5481565b610d88612b5c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190614b8d565b6011546001600160a01b038216600090815260208190526040902054919250600160801b90046001600160801b031690610e559082613a5c565b6001600160a01b0383166000818152602081905260409081902092909255601180546001600160801b0316905590517fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e790610eb190849061556c565b60405180910390a25050565b600f6020526000908152604090205481565b600080610eda612b5c565b610ee48484613a7f565b8092508193505050610efa336000601054613d6d565b610f165760405162461bcd60e51b815260040161097390615a5c565b9250929050565b6007546001600160a01b031615610f465760405162461bcd60e51b815260040161097390615836565b610f5281830183615169565b805160079060009060089082906009908290610f7590600a9060208a01906149af565b5081546001600160a01b0398891661010092830a908102908a021990911617909155825497871691810a918202918702199097161790558154958416940a93840293830219909416929092179092555060075416610fe55760405162461bcd60e51b8152600401610973906159a1565b50506011805467ffffffffffffffff19166312e687c0179055565b6004546001600160a01b031633811461102b5760405162461bcd60e51b815260040161097390615ac8565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b039092166001600160a01b0319928316179055600480549091169055565b600080611099614a29565b60005b8881101561198e5760008a8a838181106110b257fe5b90506020020160208101906110c79190615351565b905082602001511580156110de5750600a8160ff16105b156110f3576110eb612b5c565b600160208401525b60ff8116600a141561114d57600080600089898681811061111057fe5b90506020028101906111229190615d16565b81019061112f919061527c565b9250925092506111458282610609868c8c613ee8565b505050611985565b60ff8116600114156111ae57600080600089898681811061116a57fe5b905060200281019061117c9190615d16565b810190611189919061527c565b9250925092506111a4828261119f868c8c613ee8565b613436565b9750505050611985565b60ff81166002141561120e5760008060008989868181106111cb57fe5b90506020028101906111dd9190615d16565b8101906111ea919061527c565b9250925092506112058282611200868c8c613ee8565b6131fd565b50505050611985565b60ff8116600314156112695760008088888581811061122957fe5b905060200281019061123b9190615d16565b8101906112489190615258565b915091506112608161125b848a8a613ee8565b6136b1565b96505050611985565b60ff8116600414156112c65760008088888581811061128457fe5b90506020028101906112969190615d16565b8101906112a39190615258565b915091506112bb816112b6848a8a613ee8565b613f10565b505060018352611985565b60ff811660051415611329576000808888858181106112e157fe5b90506020028101906112f39190615d16565b8101906113009190615258565b9150915061131881611313848a8a613ee8565b613a7f565b600187529097509550611985915050565b60ff8116600b14156113c857600080600089898681811061134657fe5b90506020028101906113589190615d16565b8101906113659190614faf565b925092509250600080611376610794565b915091508415806113845750815b801561138f57508381115b80156113a257508215806113a257508281115b6113be5760405162461bcd60e51b815260040161097390615c37565b5050505050611985565b60ff8116601814156114a7576000806000806000808c8c898181106113e957fe5b90506020028101906113fb9190615d16565b8101906114089190614ba9565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b815260040161146a96959493929190615518565b600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b50505050505050505050611985565b60ff81166014141561152f576115258787848181106114c257fe5b90506020028101906114d49190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c915086905081811061151757fe5b90506020020135878761401e565b9095509350611985565b60ff81166015141561159a5761152587878481811061154a57fe5b905060200281019061155c9190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506141149050565b60ff8116601614156116725760008060008989868181106115b757fe5b90506020028101906115c99190615d16565b8101906115d69190614cd8565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385611619868e8e613ee8565b6040518563ffffffff1660e01b8152600401611638949392919061569d565b600060405180830381600087803b15801561165257600080fd5b505af1158015611666573d6000803e3d6000fd5b50505050505050611985565b60ff81166017141561170657600060608089898681811061168f57fe5b90506020028101906116a19190615d16565b8101906116ae9190615096565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b815260040161163894939291906156fb565b60ff8116601e14156117e057606060006117888b8b8681811061172557fe5b905060200201358a8a8781811061173857fe5b905060200281019061174a9190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91506142029050565b915091508060ff16600114156117b357818060200190518101906117ac9190615316565b96506117d9565b8060ff16600214156117d957818060200190518101906117d3919061532e565b90975095505b5050611985565b60ff8116600614156119085760008787848181106117fa57fe5b905060200281019061180c9190615d16565b8101906118199190615240565b6008549091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca9116611890611860858b8b613ee8565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201529060016143b8565b60016040518463ffffffff1660e01b81526004016118b0939291906157c0565b60206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190615316565b955050611985565b60ff81166007141561198557600087878481811061192257fe5b90506020028101906119349190615d16565b8101906119419190615240565b9050611981611951828888613ee8565b60408051808201909152600d546001600160801b038082168352600160801b909104166020820152906000614451565b9550505b5060010161109c565b508051156119c0576119a4336000601054613d6d565b6119c05760405162461bcd60e51b815260040161097390615a5c565b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611a885780601f10611a5d57610100808354040283529160200191611a88565b820191906000526020600020905b815481529060010190602001808311611a6b57829003601f168201915b505050505081565b6000611a9a610794565b915050611aa5612b5c565b6000806000611ab2614a29565b5060408051808201909152600d546001600160801b038082168352600160801b909104166020820152611ae3614a29565b600754604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692634ffe34db92611b36929190911690600401615504565b604080518083038186803b158015611b4d57600080fd5b505afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906152d4565b905060005b8c811015611dac5760008e8e83818110611ba057fe5b9050602002016020810190611bb59190614b71565b9050611bc2818a8a613d6d565b611da3576001600160a01b0381166000908152600f6020526040812054808f8f86818110611bec57fe5b9050602002013511611c10578e8e85818110611c0457fe5b90506020020135611c12565b805b9150611c1e81836144ca565b6001600160a01b0384166000908152600f60205260408120919091559050611c478683836143b8565b90506000611c8269152d02c7e14af6800000611c708d611c6a866201b5806144ed565b906144ed565b81611c7757fe5b889190046000614451565b6001600160a01b0385166000908152600e6020526040902054909150611ca890826144ca565b6001600160a01b038086166000908152600e60205260409020919091558d1615611cd2578c611cd4565b8d5b6001600160a01b0316846001600160a01b03167f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40283604051611d16919061556c565b60405180910390a36001600160a01b03808516908e1615611d37578d611d39565b335b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051611d73929190615cb8565b60405180910390a3611d858a82613a5c565b9950611d918983613a5c565b9850611d9d8884613a5c565b97505050505b50600101611b8a565b5083611dca5760405162461bcd60e51b81526004016109739061589d565b611de7611dd685614524565b83516001600160801b031690614551565b6001600160801b03168252611e12611dfe84614524565b60208401516001600160801b031690614551565b6001600160801b03908116602084018190528351600d80546001600160801b03191691841691909117909216600160801b909102179055600b54611e5690866144ca565b600b55600854604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92611eb192169089906001906004016157c0565b60206040518083038186803b158015611ec957600080fd5b505afa158015611edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f019190615316565b90508761239657604051634656bfdf60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cad7fbe90611f54908c90600401615504565b60206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190614f66565b611fc05760405162461bcd60e51b815260040161097390615bc9565b600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261201992919091169030908e908c9060040161569d565b600060405180830381600087803b15801561203357600080fd5b505af1158015612047573d6000803e3d6000fd5b50506007546008546040516371a1ff0960e11b81526001600160a01b03808f16955063e343fe129450612087938116921690309087908d906004016156c7565b6040805180830381600087803b1580156120a057600080fd5b505af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d8919061532e565b5050600c54600854604051633de222bb60e21b815260009261219b926001600160801b03909116916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926121459291909116903090600401615683565b60206040518083038186803b15801561215d57600080fd5b505afa158015612171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121959190615316565b906144ca565b905060006121a982846144ca565b90506000620186a06121bd836127106144ed565b816121c457fe5b0490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc600860009054906101000a90046001600160a01b0316307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561226657600080fd5b505afa15801561227a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229e9190614b8d565b856040518563ffffffff1660e01b81526004016122be949392919061569d565b600060405180830381600087803b1580156122d857600080fd5b505af11580156122ec573d6000803e3d6000fd5b5050505061232061230e61230983866144ca90919063ffffffff16565b614524565b600c546001600160801b031690614580565b600c80546001600160801b0319166001600160801b0392909216919091179055306001600160a01b038d167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e3861237685856144ca565b6000604051612386929190615cb8565b60405180910390a350505061258a565b6007546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163f18d03cc919081169030908d16156123de578c6123e0565b8d5b8a6040518563ffffffff1660e01b8152600401612400949392919061569d565b600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506001600160a01b038916156124d2576007546008546040516371a1ff0960e11b81526001600160a01b03808d169363e343fe129361247e93918316921690339087908d906004016156c7565b6040805180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf919061532e565b50505b600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261252b92919091169033903090879060040161569d565b600060405180830381600087803b15801561254557600080fd5b505af1158015612559573d6000803e3d6000fd5b5050505061256961230e82614524565b600c80546001600160801b0319166001600160801b03929092169190911790555b5050505050505050505050505050565b6009546001600160a01b031681565b60026020526000908152604090205481565b600d546001600160801b0380821691600160801b90041682565b6001600160a01b0383166000908152600e60205260409020546125f89082613a5c565b6001600160a01b0384166000908152600e6020526040902055600b5461261e8183613a5c565b600b55600754612639906001600160a01b03168383866145af565b836001600160a01b03168361264e5733612670565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab87846040516126a8919061556c565b60405180910390a350505050565b6126be612b5c565b6126c88282613f10565b6126d6336000601054613d6d565b6126f25760405162461bcd60e51b815260040161097390615a5c565b5050565b60066020526000908152604090205460ff1681565b6003546001600160a01b031681565b600754606090612732906001600160a01b03166146b6565b600854612747906001600160a01b03166146b6565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d69061277890600a906004016155f9565b60006040518083038186803b15801561279057600080fd5b505afa1580156127a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127cc91908101906152a2565b60405160200161093593929190615497565b600081156128785733600090815260208190526040902054828110156128165760405162461bcd60e51b815260040161097390615b62565b336001600160a01b03851614612876576001600160a01b03841661284c5760405162461bcd60e51b81526004016109739061586d565b3360009081526020819052604080822085840390556001600160a01b038616825290208054840190555b505b826001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a92919061556c565b6011546001600160401b0380821691600160401b810490911690600160801b90046001600160801b031683565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0387166129325760405162461bcd60e51b815260040161097390615afd565b8342106129515760405162461bcd60e51b815260040161097390615a34565b6001600160a01b03871660008181526002602090815260409182902080546001818101909255925190926129cf926129b4927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e92918e9101615575565b604051602081830303815290604052805190602001206146fd565b858585604051600081526020016040526040516129ef94939291906155c8565b6020604051602081039080840390855afa158015612a11573d6000803e3d6000fd5b505050602060405103516001600160a01b031614612a415760405162461bcd60e51b815260040161097390615c67565b6001600160a01b038088166000818152600160209081526040808320948b168084529490915290819020889055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612a9c90899061556c565b60405180910390a350505050505050565b6007546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b6004546001600160a01b031681565b6003546001600160a01b03163314612b125760405162461bcd60e51b815260040161097390615a93565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b612b64614a40565b50604080516060810182526011546001600160401b038082168352600160401b82041660208301819052600160801b9091046001600160801b03169282019290925290420380612bb557505061311c565b6001600160401b0342166020830152612bcc614a29565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201819052612cbe5782516001600160401b03166312e687c014612c56576312e687c08084526040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b91612c4d91600091829182906157e3565b60405180910390a15b5050805160118054602084015160409094015167ffffffffffffffff199091166001600160401b039384161767ffffffffffffffff60401b1916600160401b9390941692909202929092176001600160801b03908116600160801b919092160217905561311c565b600080612cc9614a29565b5060408051808201909152600c546001600160801b038082168352600160801b9091048116602083015286518551670de0b6b3a764000092612d1b928992611c6a9216906001600160401b03166144ed565b81612d2257fe5b049250612d42612d3184614524565b85516001600160801b031690614580565b6001600160801b03168085526008548251604051630acc462360e31b8152600093612e039390926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693635662311893612dad93921691908890600401615794565b60206040518083038186803b158015612dc557600080fd5b505afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd9190615316565b90613a5c565b90506000620186a0612e17866127106144ed565b81612e1e57fe5b04905081612e4284602001516001600160801b0316836144ed90919063ffffffff16565b81612e4957fe5b049350612e6c612e5885614524565b60408a01516001600160801b031690614580565b6001600160801b03166040890152612e9a612e8685614524565b60208501516001600160801b031690614580565b600c80546001600160801b03908116600160801b9382168402179091558751600d805460208b01516001600160801b031990911692841692831784169316909302919091179091556000908390612ef990670de0b6b3a76400006144ed565b81612f0057fe5b0490506709b6e64a8ec60000811015612fc25760006709b6e64a8ec60000612f34670de0b6b3a7640000611c6a83866144ca565b81612f3b57fe5b0490506000612f69612f518b611c6a85806144ed565b7054a2b63d65d79d094abb6688000000000090613a5c565b8b519091508190612f94906001600160401b03167054a2b63d65d79d094abb668800000000006144ed565b81612f9b57fe5b046001600160401b0316808c526304b9a1f01115612fbb576304b9a1f08b525b5050613073565b670b1a2bc2ec5000008111156130735760006702c68af0bb140000612ffb670de0b6b3a7640000611c6a85670b1a2bc2ec5000006144ca565b8161300257fe5b0490506000613018612f518b611c6a85806144ed565b8b519091506000907054a2b63d65d79d094abb6688000000000090613046906001600160401b0316846144ed565b8161304d57fe5b0490506449d482460081111561306557506449d48246005b6001600160401b03168b5250505b88516040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b916130a9918991899186906157e3565b60405180910390a1505086516011805460208a01516040909a015167ffffffffffffffff199091166001600160401b039384161767ffffffffffffffff60401b1916600160401b93909a1692909202989098176001600160801b03908116600160801b9190921602179096555050505050505b565b600c546001600160801b0380821691600160801b90041682565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009183916001600160a01b0386169161317f91906153b5565b600060405180830381855afa9150503d80600081146131ba576040519150601f19603f3d011682016040523d82523d6000602084013e6131bf565b606091505b5091509150816131ea57604051806040016040528060038152602001623f3f3f60e81b8152506131f3565b6131f381614735565b925050505b919050565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201526000906132349083600161489a565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b0386166000908152600f90925260409091205490915061329290836144ca565b6001600160a01b038086166000908152600f6020526040808220939093556008549251636d289ce560e11b815290927f000000000000000000000000000000000000000000000000000000000000000083169263da5139ca92613300929091169086906001906004016157c0565b60206040518083038186803b15801561331857600080fd5b505afa15801561332c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133509190615316565b600c546008549192506001600160801b031690613378906001600160a01b03168383886145af565b61339461338483614524565b6001600160801b03831690614580565b600c80546001600160801b0319166001600160801b03929092169190911790556001600160a01b038616856133c957336133eb565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8587604051613425929190615cb8565b60405180910390a350509392505050565b6000613440614a29565b50604080518082018252600c546001600160801b03808216808452600160801b90920481166020840152600854600d549451636d289ce560e11b8152939492936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca946134c9949216921690600190600401615794565b60206040518083038186803b1580156134e157600080fd5b505afa1580156134f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135199190615316565b83516001600160801b0316019050801561355b578061354e84602001516001600160801b0316876144ed90919063ffffffff16565b8161355557fe5b0461355d565b845b93506103e861358261356e86614524565b60208601516001600160801b031690614580565b6001600160801b0316101561359d5760009350505050610b12565b6135a883868661490f565b8051600c80546020938401516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b03881660009081529081905260409020546136019085613a5c565b6001600160a01b0380891660009081526020819052604090209190915560085461362e91168684896145af565b866001600160a01b0316866136435733613665565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38878760405161369f929190615cb8565b60405180910390a35050509392505050565b60006136bb614a29565b50604080518082018252600c546001600160801b038082168352600160801b90910481166020830152600854600d549351636d289ce560e11b815292936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461374294921692911690600190600401615794565b60206040518083038186803b15801561375a57600080fd5b505afa15801561376e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137929190615316565b825160208401516001600160801b03918216929092019250166137b585836144ed565b816137bc57fe5b3360009081526020819052604090205491900493506137db90856144ca565b336000908152602081905260409020556137f7611dd684614524565b6001600160801b0316825261380e611dfe85614524565b6001600160801b0316602083018190526103e8111561383f5760405162461bcd60e51b815260040161097390615b34565b8151600c805460208501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556040516001600160a01b0386169033907f6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228906138b49087908990615cb8565b60405180910390a3600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261391592919091169030908a90899060040161569d565b600060405180830381600087803b15801561392f57600080fd5b505af1158015613943573d6000803e3d6000fd5b50505050505092915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b0386169161399691906153b5565b600060405180830381855afa9150503d80600081146139d1576040519150601f19603f3d011682016040523d82523d6000602084013e6139d6565b606091505b50915091508180156139e9575080516020145b6139f45760126131f3565b808060200190518101906131f3919061536d565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001613a3f939291906155a9565b604051602081830303815290604052805190602001209050919050565b81810181811015610a9e5760405162461bcd60e51b81526004016109739061596a565b60008080620186a0613a928560326144ed565b81613a9957fe5b049050613ad9613aa98583613a5c565b60408051808201909152600d546001600160801b038082168352600160801b909104166020820152906001614950565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b03199092169190911716919091179055336000908152600f909252604090912054909350613b2e9084613a5c565b336000818152600f6020526040908190209290925590516001600160a01b03871691907f3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a690613b8290889086908990615cc6565b60405180910390a3600854604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92613be292919091169088906000906004016157c0565b60206040518083038186803b158015613bfa57600080fd5b505afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190615316565b9150613c3c614a29565b5060408051808201909152600c546001600160801b038082168352600160801b90910416602082018190526103e81115613c885760405162461bcd60e51b815260040161097390615b34565b613ca5613c9484614524565b82516001600160801b031690614551565b6001600160801b03908116808352600c805460208501518416600160801b026001600160801b0319909116909217909216179055600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613d3292919091169030908b90899060040161569d565b600060405180830381600087803b158015613d4c57600080fd5b505af1158015613d60573d6000803e3d6000fd5b5050505050509250929050565b6001600160a01b0383166000908152600f602052604081205480613d95576001915050610b12565b6001600160a01b0385166000908152600e602052604090205480613dbe57600092505050610b12565b613dc6614a29565b5060408051808201909152600d546001600160801b03808216808452600160801b909204166020830181905290613e04908790611c6a9087906144ed565b81613e0b57fe5b600754919004906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163566231189116613e6b8a613e5657620124f8613e5b565b62012cc85b611c6a886509184e72a0006144ed565b60006040518463ffffffff1660e01b8152600401613e8b939291906157c0565b60206040518083038186803b158015613ea357600080fd5b505afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb9190615316565b1015979650505050505050565b600080841215613f08576000198414613f015781613f03565b825b610ab9565b509192915050565b336000908152600e6020526040902054613f2a90826144ca565b336000908152600e6020526040902055600b54613f4790826144ca565b600b556040516001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40290613f8790859061556c565b60405180910390a3600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613fe892919091169030908790879060040161569d565b600060405180830381600087803b15801561400257600080fd5b505af1158015614016573d6000803e3d6000fd5b505050505050565b6000806000806000808980602001905181019061403b919061504f565b935093509350935061404e828989613ee8565b915061405b818989613ee8565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b81526004016140b29594939291906156c7565b60408051808303818588803b1580156140ca57600080fd5b505af11580156140de573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190614103919061532e565b955095505050505094509492505050565b60008060008060008088806020019051810190614131919061504f565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386614176878e8e613ee8565b614181878f8f613ee8565b6040518663ffffffff1660e01b81526004016141a19594939291906156c7565b6040805180830381600087803b1580156141ba57600080fd5b505af11580156141ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f2919061532e565b9550955050505050935093915050565b606060008060606000806000898060200190518101906142229190614c16565b94509450945094509450828015614237575081155b1561426557838960405160200161424f9291906153d1565b60405160208183030381529060405293506142be565b821580156142705750815b1561428857838860405160200161424f9291906153d1565b8280156142925750815b156142be578389896040516020016142ac939291906153f3565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415801561430957506001600160a01b0385163014155b6143255760405162461bcd60e51b815260040161097390615a05565b60006060866001600160a01b03168d8760405161434291906153b5565b60006040518083038185875af1925050503d806000811461437f576040519150601f19603f3d011682016040523d82523d6000602084013e614384565b606091505b5091509150816143a65760405162461bcd60e51b815260040161097390615903565b9c919b50909950505050505050505050565b600083602001516001600160801b0316600014156143d7575081610b12565b602084015184516001600160801b03918216916143f6918691166144ed565b816143fd57fe5b04905081801561444157508284600001516001600160801b031661443786602001516001600160801b0316846144ed90919063ffffffff16565b8161443e57fe5b04105b15610b1257610ab9816001613a5c565b82516000906001600160801b031661446a575081610b12565b835160208501516001600160801b0391821691614489918691166144ed565b8161449057fe5b04905081801561444157508284602001516001600160801b031661443786600001516001600160801b0316846144ed90919063ffffffff16565b80820382811115610a9e5760405162461bcd60e51b815260040161097390615807565b60008115806145085750508082028282828161450557fe5b04145b610a9e5760405162461bcd60e51b815260040161097390615c00565b60006001600160801b0382111561454d5760405162461bcd60e51b815260040161097390615933565b5090565b8082036001600160801b038084169082161115610a9e5760405162461bcd60e51b815260040161097390615807565b8181016001600160801b038083169082161015610a9e5760405162461bcd60e51b81526004016109739061596a565b801561462b57614607827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec87306040518363ffffffff1660e01b8152600401612145929190615683565b8311156146265760405162461bcd60e51b815260040161097390615b92565b6146b0565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc9061467d90879033903090899060040161569d565b600060405180830381600087803b15801561469757600080fd5b505af11580156146ab573d6000803e3d6000fd5b505050505b50505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b0386169161317f91906153b5565b600060405180604001604052806002815260200161190160f01b815250614722610cb0565b83604051602001613a3f939291906153f3565b6060604082511061475b578180602001905181019061475491906152a2565b90506131f8565b81516020141561487a5760005b60208160ff161080156147975750828160ff168151811061478557fe5b01602001516001600160f81b03191615155b156147a457600101614768565b60608160ff166001600160401b03811180156147bf57600080fd5b506040519080825280601f01601f1916602001820160405280156147ea576020820181803683370190505b509050600091505b60208260ff161080156148215750838260ff168151811061480f57fe5b01602001516001600160f81b03191615155b1561487157838260ff168151811061483557fe5b602001015160f81c60f81b818360ff168151811061484f57fe5b60200101906001600160f81b031916908160001a9053506001909101906147f2565b91506131f89050565b506040805180820190915260038152623f3f3f60e81b60208201526131f8565b6148a2614a29565b60006148af8585856143b8565b90506148ce6148bd82614524565b86516001600160801b031690614551565b6001600160801b031685526148f96148e585614524565b60208701516001600160801b031690614551565b6001600160801b03166020860152939492505050565b614917614a29565b614923612d3184614524565b6001600160801b0316845261493a61356e83614524565b6001600160801b03166020850152509192915050565b614958614a29565b6000614965858585614451565b905061498461497385614524565b86516001600160801b031690614580565b6001600160801b031685526148f961499b82614524565b60208701516001600160801b031690614580565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106149f057805160ff1916838001178555614a1d565b82800160010185558215614a1d579182015b82811115614a1d578251825591602001919060010190614a02565b5061454d929150614a60565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b5b8082111561454d5760008155600101614a61565b60008083601f840112614a86578182fd5b5081356001600160401b03811115614a9c578182fd5b6020830191508360208083028501011115610f1657600080fd5b600082601f830112614ac6578081fd5b8135614ad9614ad482615d80565b615d5a565b818152915060208083019084810181840286018201871015614afa57600080fd5b60005b84811015614b1957813584529282019290820190600101614afd565b505050505092915050565b600082601f830112614b34578081fd5b8151614b42614ad482615d9f565b9150808252836020828501011115614b5957600080fd5b614b6a816020840160208601615dce565b5092915050565b600060208284031215614b82578081fd5b8135610b1281615dfa565b600060208284031215614b9e578081fd5b8151610b1281615dfa565b60008060008060008060c08789031215614bc1578182fd5b8635614bcc81615dfa565b95506020870135614bdc81615dfa565b94506040870135614bec81615e12565b93506060870135614bfc81615e35565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614c2d578283fd5b8551614c3881615dfa565b60208701519095506001600160401b03811115614c53578384fd5b614c5f88828901614b24565b9450506040860151614c7081615e12565b6060870151909350614c8181615e12565b6080870151909250614c9281615e35565b809150509295509295909350565b60008060408385031215614cb2578182fd5b8235614cbd81615dfa565b91506020830135614ccd81615dfa565b809150509250929050565b600080600060608486031215614cec578081fd5b8335614cf781615dfa565b92506020840135614d0781615dfa565b929592945050506040919091013590565b600080600080600080600060e0888a031215614d32578485fd5b8735614d3d81615dfa565b96506020880135614d4d81615dfa565b955060408801359450606088013593506080880135614d6b81615e35565b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215614d9c578081fd5b8335614da781615dfa565b92506020840135614db781615e12565b91506040840135614dc781615e12565b809150509250925092565b600080600060608486031215614de6578081fd5b8335614df181615dfa565b92506020840135614d0781615e12565b60008060408385031215614e13578182fd5b8235614e1e81615dfa565b946020939093013593505050565b600080600080600080600060a0888a031215614e46578081fd5b87356001600160401b0380821115614e5c578283fd5b614e688b838c01614a75565b909950975060208a0135915080821115614e80578283fd5b50614e8d8a828b01614a75565b9096509450506040880135614ea181615dfa565b92506060880135614eb181615dfa565b91506080880135614ec181615e12565b8091505092959891949750929550565b60008060008060008060608789031215614ee9578384fd5b86356001600160401b0380821115614eff578586fd5b614f0b8a838b01614a75565b90985096506020890135915080821115614f23578586fd5b614f2f8a838b01614a75565b90965094506040890135915080821115614f47578384fd5b50614f5489828a01614a75565b979a9699509497509295939492505050565b600060208284031215614f77578081fd5b8151610b1281615e12565b60008060408385031215614f94578182fd5b8251614f9f81615e12565b6020939093015192949293505050565b600080600060608486031215614fc3578081fd5b8335614fce81615e12565b95602085013595506040909401359392505050565b60008060208385031215614ff5578182fd5b82356001600160401b038082111561500b578384fd5b818501915085601f83011261501e578384fd5b81358181111561502c578485fd5b86602082850101111561503d578485fd5b60209290920196919550909350505050565b60008060008060808587031215615064578182fd5b845161506f81615dfa565b602086015190945061508081615dfa565b6040860151606090960151949790965092505050565b6000806000606084860312156150aa578081fd5b83356150b581615dfa565b92506020848101356001600160401b03808211156150d1578384fd5b818701915087601f8301126150e4578384fd5b81356150f2614ad482615d80565b81815284810190848601868402860187018c101561510e578788fd5b8795505b8386101561513957803561512581615dfa565b835260019590950194918601918601615112565b50965050506040870135925080831115615151578384fd5b505061515f86828701614ab6565b9150509250925092565b6000806000806080858703121561517e578182fd5b843561518981615dfa565b9350602085013561519981615dfa565b925060408501356151a981615dfa565b915060608501356001600160401b038111156151c3578182fd5b8501601f810187136151d3578182fd5b80356151e1614ad482615d9f565b8181528860208385010111156151f5578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615225578182fd5b823561523081615dfa565b91506020830135614ccd81615e12565b600060208284031215615251578081fd5b5035919050565b6000806040838503121561526a578182fd5b823591506020830135614ccd81615dfa565b600080600060608486031215615290578081fd5b833592506020840135614db781615dfa565b6000602082840312156152b3578081fd5b81516001600160401b038111156152c8578182fd5b610ab984828501614b24565b6000604082840312156152e5578081fd5b6152ef6040615d5a565b82516152fa81615e20565b8152602083015161530a81615e20565b60208201529392505050565b600060208284031215615327578081fd5b5051919050565b60008060408385031215615340578182fd5b505080516020909101519092909150565b600060208284031215615362578081fd5b8135610b1281615e35565b60006020828403121561537e578081fd5b8151610b1281615e35565b600081518084526153a1816020860160208601615dce565b601f01601f19169290920160200192915050565b600082516153c7818460208701615dce565b9190910192915050565b600083516153e3818460208801615dce565b9190910191825250602001919050565b60008451615405818460208901615dce565b91909101928352506020820152604001919050565b600071025b0b9b4349026b2b234bab6902934b9b5960751b82528451615447816012850160208901615dce565b602f60f81b6012918401918201528451615468816013840160208901615dce565b602d60f81b60139290910191820152835161548a816014840160208801615dce565b0160140195945050505050565b6000616b6d60f01b825284516154b4816002850160208901615dce565b602f60f81b60029184019182015284516154d5816003840160208901615dce565b602d60f81b6003929091019182015283516154f7816004840160208801615dce565b0160040195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b901515815260200190565b9115158252602082015260400190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610b126020830184615389565b60006020808301818452828554600180821660008114615620576001811461563e57615676565b60028304607f16855260ff1983166040890152606088019350615676565b6002830480865261564e8a615dc2565b885b8281101561566c5781548b820160400152908401908801615650565b8a01604001955050505b5091979650505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006080820160018060a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b8181101561574e578551851683529483019491830191600101615730565b50508581036060870152865180825290820193509150808601845b8381101561578557815185529382019390820190600101615769565b50929998505050505050505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b93845260208401929092526001600160401b03166040830152606082015260800190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b6020808252601e908201527f4b61736869506169723a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526016908201527545524332303a206e6f207a65726f206164647265737360501b604082015260600190565b6020808252601a908201527f4b61736869506169723a20616c6c2061726520736f6c76656e74000000000000604082015260600190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b60208082526016908201527512d85cda1a54185a5c8e8818d85b1b0819985a5b195960521b604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526013908201527225b0b9b434a830b4b91d103130b2103830b4b960691b604082015260600190565b60208082526018908201527f45524332303a20616c6c6f77616e636520746f6f206c6f770000000000000000604082015260600190565b60208082526015908201527412d85cda1a54185a5c8e8818d85b89dd0818d85b1b605a1b604082015260600190565b6020808252600e908201526d115490cc8c0e88115e1c1a5c995960921b604082015260600190565b60208082526019908201527f4b61736869506169723a207573657220696e736f6c76656e7400000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526018908201527f45524332303a204f776e65722063616e6e6f7420626520300000000000000000604082015260600190565b6020808252601490820152734b617368693a2062656c6f77206d696e696d756d60601b604082015260600190565b60208082526016908201527545524332303a2062616c616e636520746f6f206c6f7760501b604082015260600190565b60208082526018908201527f4b61736869506169723a20536b696d20746f6f206d7563680000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20496e76616c69642073776170706572000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252601690820152754b61736869506169723a2072617465206e6f74206f6b60501b604082015260600190565b60208082526018908201527f45524332303a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160401b0393841681529190921660208201526001600160801b03909116604082015260600190565b60ff91909116815260200190565b6000808335601e19843603018112615d2c578283fd5b8301803591506001600160401b03821115615d45578283fd5b602001915036819003821315610f1657600080fd5b6040518181016001600160401b0381118282101715615d7857600080fd5b604052919050565b60006001600160401b03821115615d95578081fd5b5060209081020190565b60006001600160401b03821115615db4578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b83811015615de9578181015183820152602001615dd1565b838111156146b05750506000910152565b6001600160a01b0381168114615e0f57600080fd5b50565b8015158114615e0f57600080fd5b6001600160801b0381168114615e0f57600080fd5b60ff81168114615e0f57600080fdfea264697066735822122014d116eece6562af90bb0c25634530fbfa561cda915d3ed59e4309046101c53164736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c8063656f3d641161014f5780638da5cb5b116100c1578063d8dfeb451161007a578063d8dfeb45146106f1578063dd62ed3e14610706578063e30c397814610726578063f46901ed1461073b578063f8ba4cff1461075b578063f9557ccb1461077057610272565b80638da5cb5b1461064e57806395d89b4114610663578063a9059cbb14610678578063b27c0e7414610698578063cd446e22146106bc578063d505accf146106d157610272565b80637dc0d1d0116101135780637dc0d1d0146105965780637ecebe00146105ab5780638285ef40146105cb578063860ffea1146105ee578063876467f81461060e5780638cad7fbe1461062e57610272565b8063656f3d64146105195780636b2ace871461052c57806370a082311461054157806374645ff31461056157806376ee101b1461057657610272565b8063313ce567116101e8578063473e3ce7116101ac578063473e3ce714610479578063476343ee1461048e57806348e4163e146104a35780634b8a3529146104c35780634ddf47d4146104f15780634e71e0c81461050457610272565b8063313ce567146103f85780633644e5151461041a57806338d52e0f1461042f5780633ba0b9a9146104445780633f2617cb1461045957610272565b806315294c401161023a57806315294c401461033657806318160ddd146103635780631b51e940146103785780631c9e379b146103985780632317ef67146103b857806323b872dd146103d857610272565b8063017e7e581461027757806302ce728f146102a257806306fdde03146102c5578063078dfbe7146102e7578063095ea7b314610309575b600080fd5b34801561028357600080fd5b5061028c610785565b6040516102999190615504565b60405180910390f35b3480156102ae57600080fd5b506102b7610794565b60405161029992919061555c565b3480156102d157600080fd5b506102da610871565b60405161029991906155e6565b3480156102f357600080fd5b50610307610302366004614d88565b610949565b005b34801561031557600080fd5b50610329610324366004614e01565b610a39565b6040516102999190615551565b34801561034257600080fd5b50610356610351366004614dd2565b610aa4565b604051610299919061556c565b34801561036f57600080fd5b50610356610ac1565b34801561038457600080fd5b50610356610393366004614dd2565b610ad7565b3480156103a457600080fd5b506103566103b3366004614b71565b610aec565b3480156103c457600080fd5b506103566103d3366004614e01565b610afe565b3480156103e457600080fd5b506103296103f3366004614cd8565b610b19565b34801561040457600080fd5b5061040d610c93565b6040516102999190615d08565b34801561042657600080fd5b50610356610cb0565b34801561043b57600080fd5b5061028c610d10565b34801561045057600080fd5b50610356610d1f565b34801561046557600080fd5b50610307610474366004615213565b610d25565b34801561048557600080fd5b50610356610d7a565b34801561049a57600080fd5b50610307610d80565b3480156104af57600080fd5b506103566104be366004614b71565b610ebd565b3480156104cf57600080fd5b506104e36104de366004614e01565b610ecf565b604051610299929190615cb8565b6103076104ff366004614fe3565b610f1d565b34801561051057600080fd5b50610307611000565b6104e3610527366004614ed1565b61108e565b34801561053857600080fd5b5061028c6119cc565b34801561054d57600080fd5b5061035661055c366004614b71565b6119f0565b34801561056d57600080fd5b506102da611a02565b34801561058257600080fd5b50610307610591366004614e2c565b611a90565b3480156105a257600080fd5b5061028c61259a565b3480156105b757600080fd5b506103566105c6366004614b71565b6125a9565b3480156105d757600080fd5b506105e06125bb565b604051610299929190615c9e565b3480156105fa57600080fd5b50610307610609366004614dd2565b6125d5565b34801561061a57600080fd5b50610307610629366004614e01565b6126b6565b34801561063a57600080fd5b50610329610649366004614b71565b6126f6565b34801561065a57600080fd5b5061028c61270b565b34801561066f57600080fd5b506102da61271a565b34801561068457600080fd5b50610329610693366004614e01565b6127de565b3480156106a457600080fd5b506106ad6128bb565b60405161029993929190615cdc565b3480156106c857600080fd5b5061028c6128e8565b3480156106dd57600080fd5b506103076106ec366004614d18565b61290c565b3480156106fd57600080fd5b5061028c612aad565b34801561071257600080fd5b50610356610721366004614ca0565b612abc565b34801561073257600080fd5b5061028c612ad9565b34801561074757600080fd5b50610307610756366004614b71565b612ae8565b34801561076757600080fd5b50610307612b5c565b34801561077c57600080fd5b506105e061311e565b6005546001600160a01b031681565b60095460405163d6d7d52560e01b815260009182916001600160a01b039091169063d6d7d525906107ca90600a906004016155f9565b6040805180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b9190614f82565b909250905081156108685760108190556040517f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c89061085b90839061556c565b60405180910390a161086d565b506010545b9091565b600754606090610889906001600160a01b0316613138565b60085461089e906001600160a01b0316613138565b60095460405163355a219b60e21b81526001600160a01b039091169063d568866c906108cf90600a906004016155f9565b60006040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092391908101906152a2565b6040516020016109359392919061541a565b604051602081830303815290604052905090565b6003546001600160a01b0316331461097c5760405162461bcd60e51b815260040161097390615a93565b60405180910390fd5b8115610a18576001600160a01b0383161515806109965750805b6109b25760405162461bcd60e51b8152600401610973906158d4565b6003546040516001600160a01b038086169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0385166001600160a01b031991821617909155600480549091169055610a34565b600480546001600160a01b0319166001600160a01b0385161790555b505050565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a9290869061556c565b60405180910390a35060015b92915050565b6000610aae612b5c565b610ab98484846131fd565b949350505050565b600c54600160801b90046001600160801b031690565b6000610ae1612b5c565b610ab9848484613436565b600e6020526000908152604090205481565b6000610b08612b5c565b610b1283836136b1565b9392505050565b60008115610c3e576001600160a01b03841660009081526020819052604090205482811015610b5a5760405162461bcd60e51b815260040161097390615b62565b836001600160a01b0316856001600160a01b031614610c3c576001600160a01b03851660009081526001602090815260408083203384529091529020546000198114610be95783811015610bc05760405162461bcd60e51b8152600401610973906159ce565b6001600160a01b0386166000908152600160209081526040808320338452909152902084820390555b6001600160a01b038516610c0f5760405162461bcd60e51b81526004016109739061586d565b506001600160a01b0380861660009081526020819052604080822086850390559186168152208054840190555b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c81919061556c565b60405180910390a35060019392505050565b600854600090610cab906001600160a01b031661394f565b905090565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610ce857610ce381613a08565b610d0a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b6008546001600160a01b031681565b60105481565b6003546001600160a01b03163314610d4f5760405162461bcd60e51b815260040161097390615a93565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b600b5481565b610d88612b5c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190614b8d565b6011546001600160a01b038216600090815260208190526040902054919250600160801b90046001600160801b031690610e559082613a5c565b6001600160a01b0383166000818152602081905260409081902092909255601180546001600160801b0316905590517fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e790610eb190849061556c565b60405180910390a25050565b600f6020526000908152604090205481565b600080610eda612b5c565b610ee48484613a7f565b8092508193505050610efa336000601054613d6d565b610f165760405162461bcd60e51b815260040161097390615a5c565b9250929050565b6007546001600160a01b031615610f465760405162461bcd60e51b815260040161097390615836565b610f5281830183615169565b805160079060009060089082906009908290610f7590600a9060208a01906149af565b5081546001600160a01b0398891661010092830a908102908a021990911617909155825497871691810a918202918702199097161790558154958416940a93840293830219909416929092179092555060075416610fe55760405162461bcd60e51b8152600401610973906159a1565b50506011805467ffffffffffffffff19166312e687c0179055565b6004546001600160a01b031633811461102b5760405162461bcd60e51b815260040161097390615ac8565b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b039092166001600160a01b0319928316179055600480549091169055565b600080611099614a29565b60005b8881101561198e5760008a8a838181106110b257fe5b90506020020160208101906110c79190615351565b905082602001511580156110de5750600a8160ff16105b156110f3576110eb612b5c565b600160208401525b60ff8116600a141561114d57600080600089898681811061111057fe5b90506020028101906111229190615d16565b81019061112f919061527c565b9250925092506111458282610609868c8c613ee8565b505050611985565b60ff8116600114156111ae57600080600089898681811061116a57fe5b905060200281019061117c9190615d16565b810190611189919061527c565b9250925092506111a4828261119f868c8c613ee8565b613436565b9750505050611985565b60ff81166002141561120e5760008060008989868181106111cb57fe5b90506020028101906111dd9190615d16565b8101906111ea919061527c565b9250925092506112058282611200868c8c613ee8565b6131fd565b50505050611985565b60ff8116600314156112695760008088888581811061122957fe5b905060200281019061123b9190615d16565b8101906112489190615258565b915091506112608161125b848a8a613ee8565b6136b1565b96505050611985565b60ff8116600414156112c65760008088888581811061128457fe5b90506020028101906112969190615d16565b8101906112a39190615258565b915091506112bb816112b6848a8a613ee8565b613f10565b505060018352611985565b60ff811660051415611329576000808888858181106112e157fe5b90506020028101906112f39190615d16565b8101906113009190615258565b9150915061131881611313848a8a613ee8565b613a7f565b600187529097509550611985915050565b60ff8116600b14156113c857600080600089898681811061134657fe5b90506020028101906113589190615d16565b8101906113659190614faf565b925092509250600080611376610794565b915091508415806113845750815b801561138f57508381115b80156113a257508215806113a257508281115b6113be5760405162461bcd60e51b815260040161097390615c37565b5050505050611985565b60ff8116601814156114a7576000806000806000808c8c898181106113e957fe5b90506020028101906113fb9190615d16565b8101906114089190614ba9565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b815260040161146a96959493929190615518565b600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b50505050505050505050611985565b60ff81166014141561152f576115258787848181106114c257fe5b90506020028101906114d49190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c915086905081811061151757fe5b90506020020135878761401e565b9095509350611985565b60ff81166015141561159a5761152587878481811061154a57fe5b905060200281019061155c9190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506141149050565b60ff8116601614156116725760008060008989868181106115b757fe5b90506020028101906115c99190615d16565b8101906115d69190614cd8565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385611619868e8e613ee8565b6040518563ffffffff1660e01b8152600401611638949392919061569d565b600060405180830381600087803b15801561165257600080fd5b505af1158015611666573d6000803e3d6000fd5b50505050505050611985565b60ff81166017141561170657600060608089898681811061168f57fe5b90506020028101906116a19190615d16565b8101906116ae9190615096565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b815260040161163894939291906156fb565b60ff8116601e14156117e057606060006117888b8b8681811061172557fe5b905060200201358a8a8781811061173857fe5b905060200281019061174a9190615d16565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91506142029050565b915091508060ff16600114156117b357818060200190518101906117ac9190615316565b96506117d9565b8060ff16600214156117d957818060200190518101906117d3919061532e565b90975095505b5050611985565b60ff8116600614156119085760008787848181106117fa57fe5b905060200281019061180c9190615d16565b8101906118199190615240565b6008549091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163da5139ca9116611890611860858b8b613ee8565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201529060016143b8565b60016040518463ffffffff1660e01b81526004016118b0939291906157c0565b60206040518083038186803b1580156118c857600080fd5b505afa1580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190615316565b955050611985565b60ff81166007141561198557600087878481811061192257fe5b90506020028101906119349190615d16565b8101906119419190615240565b9050611981611951828888613ee8565b60408051808201909152600d546001600160801b038082168352600160801b909104166020820152906000614451565b9550505b5060010161109c565b508051156119c0576119a4336000601054613d6d565b6119c05760405162461bcd60e51b815260040161097390615a5c565b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205481565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611a885780601f10611a5d57610100808354040283529160200191611a88565b820191906000526020600020905b815481529060010190602001808311611a6b57829003601f168201915b505050505081565b6000611a9a610794565b915050611aa5612b5c565b6000806000611ab2614a29565b5060408051808201909152600d546001600160801b038082168352600160801b909104166020820152611ae3614a29565b600754604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692634ffe34db92611b36929190911690600401615504565b604080518083038186803b158015611b4d57600080fd5b505afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906152d4565b905060005b8c811015611dac5760008e8e83818110611ba057fe5b9050602002016020810190611bb59190614b71565b9050611bc2818a8a613d6d565b611da3576001600160a01b0381166000908152600f6020526040812054808f8f86818110611bec57fe5b9050602002013511611c10578e8e85818110611c0457fe5b90506020020135611c12565b805b9150611c1e81836144ca565b6001600160a01b0384166000908152600f60205260408120919091559050611c478683836143b8565b90506000611c8269152d02c7e14af6800000611c708d611c6a866201b5806144ed565b906144ed565b81611c7757fe5b889190046000614451565b6001600160a01b0385166000908152600e6020526040902054909150611ca890826144ca565b6001600160a01b038086166000908152600e60205260409020919091558d1615611cd2578c611cd4565b8d5b6001600160a01b0316846001600160a01b03167f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40283604051611d16919061556c565b60405180910390a36001600160a01b03808516908e1615611d37578d611d39565b335b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051611d73929190615cb8565b60405180910390a3611d858a82613a5c565b9950611d918983613a5c565b9850611d9d8884613a5c565b97505050505b50600101611b8a565b5083611dca5760405162461bcd60e51b81526004016109739061589d565b611de7611dd685614524565b83516001600160801b031690614551565b6001600160801b03168252611e12611dfe84614524565b60208401516001600160801b031690614551565b6001600160801b03908116602084018190528351600d80546001600160801b03191691841691909117909216600160801b909102179055600b54611e5690866144ca565b600b55600854604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92611eb192169089906001906004016157c0565b60206040518083038186803b158015611ec957600080fd5b505afa158015611edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f019190615316565b90508761239657604051634656bfdf60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638cad7fbe90611f54908c90600401615504565b60206040518083038186803b158015611f6c57600080fd5b505afa158015611f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa49190614f66565b611fc05760405162461bcd60e51b815260040161097390615bc9565b600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261201992919091169030908e908c9060040161569d565b600060405180830381600087803b15801561203357600080fd5b505af1158015612047573d6000803e3d6000fd5b50506007546008546040516371a1ff0960e11b81526001600160a01b03808f16955063e343fe129450612087938116921690309087908d906004016156c7565b6040805180830381600087803b1580156120a057600080fd5b505af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d8919061532e565b5050600c54600854604051633de222bb60e21b815260009261219b926001600160801b03909116916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926121459291909116903090600401615683565b60206040518083038186803b15801561215d57600080fd5b505afa158015612171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121959190615316565b906144ca565b905060006121a982846144ca565b90506000620186a06121bd836127106144ed565b816121c457fe5b0490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc600860009054906101000a90046001600160a01b0316307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561226657600080fd5b505afa15801561227a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229e9190614b8d565b856040518563ffffffff1660e01b81526004016122be949392919061569d565b600060405180830381600087803b1580156122d857600080fd5b505af11580156122ec573d6000803e3d6000fd5b5050505061232061230e61230983866144ca90919063ffffffff16565b614524565b600c546001600160801b031690614580565b600c80546001600160801b0319166001600160801b0392909216919091179055306001600160a01b038d167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e3861237685856144ca565b6000604051612386929190615cb8565b60405180910390a350505061258a565b6007546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163f18d03cc919081169030908d16156123de578c6123e0565b8d5b8a6040518563ffffffff1660e01b8152600401612400949392919061569d565b600060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506001600160a01b038916156124d2576007546008546040516371a1ff0960e11b81526001600160a01b03808d169363e343fe129361247e93918316921690339087908d906004016156c7565b6040805180830381600087803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf919061532e565b50505b600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261252b92919091169033903090879060040161569d565b600060405180830381600087803b15801561254557600080fd5b505af1158015612559573d6000803e3d6000fd5b5050505061256961230e82614524565b600c80546001600160801b0319166001600160801b03929092169190911790555b5050505050505050505050505050565b6009546001600160a01b031681565b60026020526000908152604090205481565b600d546001600160801b0380821691600160801b90041682565b6001600160a01b0383166000908152600e60205260409020546125f89082613a5c565b6001600160a01b0384166000908152600e6020526040902055600b5461261e8183613a5c565b600b55600754612639906001600160a01b03168383866145af565b836001600160a01b03168361264e5733612670565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab87846040516126a8919061556c565b60405180910390a350505050565b6126be612b5c565b6126c88282613f10565b6126d6336000601054613d6d565b6126f25760405162461bcd60e51b815260040161097390615a5c565b5050565b60066020526000908152604090205460ff1681565b6003546001600160a01b031681565b600754606090612732906001600160a01b03166146b6565b600854612747906001600160a01b03166146b6565b60095460405163634ce26b60e11b81526001600160a01b039091169063c699c4d69061277890600a906004016155f9565b60006040518083038186803b15801561279057600080fd5b505afa1580156127a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127cc91908101906152a2565b60405160200161093593929190615497565b600081156128785733600090815260208190526040902054828110156128165760405162461bcd60e51b815260040161097390615b62565b336001600160a01b03851614612876576001600160a01b03841661284c5760405162461bcd60e51b81526004016109739061586d565b3360009081526020819052604080822085840390556001600160a01b038616825290208054840190555b505b826001600160a01b0316336001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a92919061556c565b6011546001600160401b0380821691600160401b810490911690600160801b90046001600160801b031683565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0387166129325760405162461bcd60e51b815260040161097390615afd565b8342106129515760405162461bcd60e51b815260040161097390615a34565b6001600160a01b03871660008181526002602090815260409182902080546001818101909255925190926129cf926129b4927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e92918e9101615575565b604051602081830303815290604052805190602001206146fd565b858585604051600081526020016040526040516129ef94939291906155c8565b6020604051602081039080840390855afa158015612a11573d6000803e3d6000fd5b505050602060405103516001600160a01b031614612a415760405162461bcd60e51b815260040161097390615c67565b6001600160a01b038088166000818152600160209081526040808320948b168084529490915290819020889055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612a9c90899061556c565b60405180910390a350505050505050565b6007546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b6004546001600160a01b031681565b6003546001600160a01b03163314612b125760405162461bcd60e51b815260040161097390615a93565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b612b64614a40565b50604080516060810182526011546001600160401b038082168352600160401b82041660208301819052600160801b9091046001600160801b03169282019290925290420380612bb557505061311c565b6001600160401b0342166020830152612bcc614a29565b5060408051808201909152600d546001600160801b038082168352600160801b9091041660208201819052612cbe5782516001600160401b03166312e687c014612c56576312e687c08084526040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b91612c4d91600091829182906157e3565b60405180910390a15b5050805160118054602084015160409094015167ffffffffffffffff199091166001600160401b039384161767ffffffffffffffff60401b1916600160401b9390941692909202929092176001600160801b03908116600160801b919092160217905561311c565b600080612cc9614a29565b5060408051808201909152600c546001600160801b038082168352600160801b9091048116602083015286518551670de0b6b3a764000092612d1b928992611c6a9216906001600160401b03166144ed565b81612d2257fe5b049250612d42612d3184614524565b85516001600160801b031690614580565b6001600160801b03168085526008548251604051630acc462360e31b8152600093612e039390926001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693635662311893612dad93921691908890600401615794565b60206040518083038186803b158015612dc557600080fd5b505afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd9190615316565b90613a5c565b90506000620186a0612e17866127106144ed565b81612e1e57fe5b04905081612e4284602001516001600160801b0316836144ed90919063ffffffff16565b81612e4957fe5b049350612e6c612e5885614524565b60408a01516001600160801b031690614580565b6001600160801b03166040890152612e9a612e8685614524565b60208501516001600160801b031690614580565b600c80546001600160801b03908116600160801b9382168402179091558751600d805460208b01516001600160801b031990911692841692831784169316909302919091179091556000908390612ef990670de0b6b3a76400006144ed565b81612f0057fe5b0490506709b6e64a8ec60000811015612fc25760006709b6e64a8ec60000612f34670de0b6b3a7640000611c6a83866144ca565b81612f3b57fe5b0490506000612f69612f518b611c6a85806144ed565b7054a2b63d65d79d094abb6688000000000090613a5c565b8b519091508190612f94906001600160401b03167054a2b63d65d79d094abb668800000000006144ed565b81612f9b57fe5b046001600160401b0316808c526304b9a1f01115612fbb576304b9a1f08b525b5050613073565b670b1a2bc2ec5000008111156130735760006702c68af0bb140000612ffb670de0b6b3a7640000611c6a85670b1a2bc2ec5000006144ca565b8161300257fe5b0490506000613018612f518b611c6a85806144ed565b8b519091506000907054a2b63d65d79d094abb6688000000000090613046906001600160401b0316846144ed565b8161304d57fe5b0490506449d482460081111561306557506449d48246005b6001600160401b03168b5250505b88516040517f33af5ce86e8438eff54589f85332916444457dfa8685493fbd579b809097026b916130a9918991899186906157e3565b60405180910390a1505086516011805460208a01516040909a015167ffffffffffffffff199091166001600160401b039384161767ffffffffffffffff60401b1916600160401b93909a1692909202989098176001600160801b03908116600160801b9190921602179096555050505050505b565b600c546001600160801b0380821691600160801b90041682565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009183916001600160a01b0386169161317f91906153b5565b600060405180830381855afa9150503d80600081146131ba576040519150601f19603f3d011682016040523d82523d6000602084013e6131bf565b606091505b5091509150816131ea57604051806040016040528060038152602001623f3f3f60e81b8152506131f3565b6131f381614735565b925050505b919050565b60408051808201909152600d546001600160801b038082168352600160801b9091041660208201526000906132349083600161489a565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b0386166000908152600f90925260409091205490915061329290836144ca565b6001600160a01b038086166000908152600f6020526040808220939093556008549251636d289ce560e11b815290927f000000000000000000000000000000000000000000000000000000000000000083169263da5139ca92613300929091169086906001906004016157c0565b60206040518083038186803b15801561331857600080fd5b505afa15801561332c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133509190615316565b600c546008549192506001600160801b031690613378906001600160a01b03168383886145af565b61339461338483614524565b6001600160801b03831690614580565b600c80546001600160801b0319166001600160801b03929092169190911790556001600160a01b038616856133c957336133eb565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8587604051613425929190615cb8565b60405180910390a350509392505050565b6000613440614a29565b50604080518082018252600c546001600160801b03808216808452600160801b90920481166020840152600854600d549451636d289ce560e11b8152939492936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca946134c9949216921690600190600401615794565b60206040518083038186803b1580156134e157600080fd5b505afa1580156134f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135199190615316565b83516001600160801b0316019050801561355b578061354e84602001516001600160801b0316876144ed90919063ffffffff16565b8161355557fe5b0461355d565b845b93506103e861358261356e86614524565b60208601516001600160801b031690614580565b6001600160801b0316101561359d5760009350505050610b12565b6135a883868661490f565b8051600c80546020938401516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b03881660009081529081905260409020546136019085613a5c565b6001600160a01b0380891660009081526020819052604090209190915560085461362e91168684896145af565b866001600160a01b0316866136435733613665565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38878760405161369f929190615cb8565b60405180910390a35050509392505050565b60006136bb614a29565b50604080518082018252600c546001600160801b038082168352600160801b90910481166020830152600854600d549351636d289ce560e11b815292936000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461374294921692911690600190600401615794565b60206040518083038186803b15801561375a57600080fd5b505afa15801561376e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137929190615316565b825160208401516001600160801b03918216929092019250166137b585836144ed565b816137bc57fe5b3360009081526020819052604090205491900493506137db90856144ca565b336000908152602081905260409020556137f7611dd684614524565b6001600160801b0316825261380e611dfe85614524565b6001600160801b0316602083018190526103e8111561383f5760405162461bcd60e51b815260040161097390615b34565b8151600c805460208501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556040516001600160a01b0386169033907f6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228906138b49087908990615cb8565b60405180910390a3600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261391592919091169030908a90899060040161569d565b600060405180830381600087803b15801561392f57600080fd5b505af1158015613943573d6000803e3d6000fd5b50505050505092915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b0386169161399691906153b5565b600060405180830381855afa9150503d80600081146139d1576040519150601f19603f3d011682016040523d82523d6000602084013e6139d6565b606091505b50915091508180156139e9575080516020145b6139f45760126131f3565b808060200190518101906131f3919061536d565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001613a3f939291906155a9565b604051602081830303815290604052805190602001209050919050565b81810181811015610a9e5760405162461bcd60e51b81526004016109739061596a565b60008080620186a0613a928560326144ed565b81613a9957fe5b049050613ad9613aa98583613a5c565b60408051808201909152600d546001600160801b038082168352600160801b909104166020820152906001614950565b8151600d80546020948501516001600160801b03908116600160801b029381166001600160801b03199092169190911716919091179055336000908152600f909252604090912054909350613b2e9084613a5c565b336000818152600f6020526040908190209290925590516001600160a01b03871691907f3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a690613b8290889086908990615cc6565b60405180910390a3600854604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92613be292919091169088906000906004016157c0565b60206040518083038186803b158015613bfa57600080fd5b505afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190615316565b9150613c3c614a29565b5060408051808201909152600c546001600160801b038082168352600160801b90910416602082018190526103e81115613c885760405162461bcd60e51b815260040161097390615b34565b613ca5613c9484614524565b82516001600160801b031690614551565b6001600160801b03908116808352600c805460208501518416600160801b026001600160801b0319909116909217909216179055600854604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613d3292919091169030908b90899060040161569d565b600060405180830381600087803b158015613d4c57600080fd5b505af1158015613d60573d6000803e3d6000fd5b5050505050509250929050565b6001600160a01b0383166000908152600f602052604081205480613d95576001915050610b12565b6001600160a01b0385166000908152600e602052604090205480613dbe57600092505050610b12565b613dc6614a29565b5060408051808201909152600d546001600160801b03808216808452600160801b909204166020830181905290613e04908790611c6a9087906144ed565b81613e0b57fe5b600754919004906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163566231189116613e6b8a613e5657620124f8613e5b565b62012cc85b611c6a886509184e72a0006144ed565b60006040518463ffffffff1660e01b8152600401613e8b939291906157c0565b60206040518083038186803b158015613ea357600080fd5b505afa158015613eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613edb9190615316565b1015979650505050505050565b600080841215613f08576000198414613f015781613f03565b825b610ab9565b509192915050565b336000908152600e6020526040902054613f2a90826144ca565b336000908152600e6020526040902055600b54613f4790826144ca565b600b556040516001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40290613f8790859061556c565b60405180910390a3600754604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92613fe892919091169030908790879060040161569d565b600060405180830381600087803b15801561400257600080fd5b505af1158015614016573d6000803e3d6000fd5b505050505050565b6000806000806000808980602001905181019061403b919061504f565b935093509350935061404e828989613ee8565b915061405b818989613ee8565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b81526004016140b29594939291906156c7565b60408051808303818588803b1580156140ca57600080fd5b505af11580156140de573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190614103919061532e565b955095505050505094509492505050565b60008060008060008088806020019051810190614131919061504f565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386614176878e8e613ee8565b614181878f8f613ee8565b6040518663ffffffff1660e01b81526004016141a19594939291906156c7565b6040805180830381600087803b1580156141ba57600080fd5b505af11580156141ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f2919061532e565b9550955050505050935093915050565b606060008060606000806000898060200190518101906142229190614c16565b94509450945094509450828015614237575081155b1561426557838960405160200161424f9291906153d1565b60405160208183030381529060405293506142be565b821580156142705750815b1561428857838860405160200161424f9291906153d1565b8280156142925750815b156142be578389896040516020016142ac939291906153f3565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415801561430957506001600160a01b0385163014155b6143255760405162461bcd60e51b815260040161097390615a05565b60006060866001600160a01b03168d8760405161434291906153b5565b60006040518083038185875af1925050503d806000811461437f576040519150601f19603f3d011682016040523d82523d6000602084013e614384565b606091505b5091509150816143a65760405162461bcd60e51b815260040161097390615903565b9c919b50909950505050505050505050565b600083602001516001600160801b0316600014156143d7575081610b12565b602084015184516001600160801b03918216916143f6918691166144ed565b816143fd57fe5b04905081801561444157508284600001516001600160801b031661443786602001516001600160801b0316846144ed90919063ffffffff16565b8161443e57fe5b04105b15610b1257610ab9816001613a5c565b82516000906001600160801b031661446a575081610b12565b835160208501516001600160801b0391821691614489918691166144ed565b8161449057fe5b04905081801561444157508284602001516001600160801b031661443786600001516001600160801b0316846144ed90919063ffffffff16565b80820382811115610a9e5760405162461bcd60e51b815260040161097390615807565b60008115806145085750508082028282828161450557fe5b04145b610a9e5760405162461bcd60e51b815260040161097390615c00565b60006001600160801b0382111561454d5760405162461bcd60e51b815260040161097390615933565b5090565b8082036001600160801b038084169082161115610a9e5760405162461bcd60e51b815260040161097390615807565b8181016001600160801b038083169082161015610a9e5760405162461bcd60e51b81526004016109739061596a565b801561462b57614607827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec87306040518363ffffffff1660e01b8152600401612145929190615683565b8311156146265760405162461bcd60e51b815260040161097390615b92565b6146b0565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc9061467d90879033903090899060040161569d565b600060405180830381600087803b15801561469757600080fd5b505af11580156146ab573d6000803e3d6000fd5b505050505b50505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b0386169161317f91906153b5565b600060405180604001604052806002815260200161190160f01b815250614722610cb0565b83604051602001613a3f939291906153f3565b6060604082511061475b578180602001905181019061475491906152a2565b90506131f8565b81516020141561487a5760005b60208160ff161080156147975750828160ff168151811061478557fe5b01602001516001600160f81b03191615155b156147a457600101614768565b60608160ff166001600160401b03811180156147bf57600080fd5b506040519080825280601f01601f1916602001820160405280156147ea576020820181803683370190505b509050600091505b60208260ff161080156148215750838260ff168151811061480f57fe5b01602001516001600160f81b03191615155b1561487157838260ff168151811061483557fe5b602001015160f81c60f81b818360ff168151811061484f57fe5b60200101906001600160f81b031916908160001a9053506001909101906147f2565b91506131f89050565b506040805180820190915260038152623f3f3f60e81b60208201526131f8565b6148a2614a29565b60006148af8585856143b8565b90506148ce6148bd82614524565b86516001600160801b031690614551565b6001600160801b031685526148f96148e585614524565b60208701516001600160801b031690614551565b6001600160801b03166020860152939492505050565b614917614a29565b614923612d3184614524565b6001600160801b0316845261493a61356e83614524565b6001600160801b03166020850152509192915050565b614958614a29565b6000614965858585614451565b905061498461497385614524565b86516001600160801b031690614580565b6001600160801b031685526148f961499b82614524565b60208701516001600160801b031690614580565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106149f057805160ff1916838001178555614a1d565b82800160010185558215614a1d579182015b82811115614a1d578251825591602001919060010190614a02565b5061454d929150614a60565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b5b8082111561454d5760008155600101614a61565b60008083601f840112614a86578182fd5b5081356001600160401b03811115614a9c578182fd5b6020830191508360208083028501011115610f1657600080fd5b600082601f830112614ac6578081fd5b8135614ad9614ad482615d80565b615d5a565b818152915060208083019084810181840286018201871015614afa57600080fd5b60005b84811015614b1957813584529282019290820190600101614afd565b505050505092915050565b600082601f830112614b34578081fd5b8151614b42614ad482615d9f565b9150808252836020828501011115614b5957600080fd5b614b6a816020840160208601615dce565b5092915050565b600060208284031215614b82578081fd5b8135610b1281615dfa565b600060208284031215614b9e578081fd5b8151610b1281615dfa565b60008060008060008060c08789031215614bc1578182fd5b8635614bcc81615dfa565b95506020870135614bdc81615dfa565b94506040870135614bec81615e12565b93506060870135614bfc81615e35565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215614c2d578283fd5b8551614c3881615dfa565b60208701519095506001600160401b03811115614c53578384fd5b614c5f88828901614b24565b9450506040860151614c7081615e12565b6060870151909350614c8181615e12565b6080870151909250614c9281615e35565b809150509295509295909350565b60008060408385031215614cb2578182fd5b8235614cbd81615dfa565b91506020830135614ccd81615dfa565b809150509250929050565b600080600060608486031215614cec578081fd5b8335614cf781615dfa565b92506020840135614d0781615dfa565b929592945050506040919091013590565b600080600080600080600060e0888a031215614d32578485fd5b8735614d3d81615dfa565b96506020880135614d4d81615dfa565b955060408801359450606088013593506080880135614d6b81615e35565b9699959850939692959460a0840135945060c09093013592915050565b600080600060608486031215614d9c578081fd5b8335614da781615dfa565b92506020840135614db781615e12565b91506040840135614dc781615e12565b809150509250925092565b600080600060608486031215614de6578081fd5b8335614df181615dfa565b92506020840135614d0781615e12565b60008060408385031215614e13578182fd5b8235614e1e81615dfa565b946020939093013593505050565b600080600080600080600060a0888a031215614e46578081fd5b87356001600160401b0380821115614e5c578283fd5b614e688b838c01614a75565b909950975060208a0135915080821115614e80578283fd5b50614e8d8a828b01614a75565b9096509450506040880135614ea181615dfa565b92506060880135614eb181615dfa565b91506080880135614ec181615e12565b8091505092959891949750929550565b60008060008060008060608789031215614ee9578384fd5b86356001600160401b0380821115614eff578586fd5b614f0b8a838b01614a75565b90985096506020890135915080821115614f23578586fd5b614f2f8a838b01614a75565b90965094506040890135915080821115614f47578384fd5b50614f5489828a01614a75565b979a9699509497509295939492505050565b600060208284031215614f77578081fd5b8151610b1281615e12565b60008060408385031215614f94578182fd5b8251614f9f81615e12565b6020939093015192949293505050565b600080600060608486031215614fc3578081fd5b8335614fce81615e12565b95602085013595506040909401359392505050565b60008060208385031215614ff5578182fd5b82356001600160401b038082111561500b578384fd5b818501915085601f83011261501e578384fd5b81358181111561502c578485fd5b86602082850101111561503d578485fd5b60209290920196919550909350505050565b60008060008060808587031215615064578182fd5b845161506f81615dfa565b602086015190945061508081615dfa565b6040860151606090960151949790965092505050565b6000806000606084860312156150aa578081fd5b83356150b581615dfa565b92506020848101356001600160401b03808211156150d1578384fd5b818701915087601f8301126150e4578384fd5b81356150f2614ad482615d80565b81815284810190848601868402860187018c101561510e578788fd5b8795505b8386101561513957803561512581615dfa565b835260019590950194918601918601615112565b50965050506040870135925080831115615151578384fd5b505061515f86828701614ab6565b9150509250925092565b6000806000806080858703121561517e578182fd5b843561518981615dfa565b9350602085013561519981615dfa565b925060408501356151a981615dfa565b915060608501356001600160401b038111156151c3578182fd5b8501601f810187136151d3578182fd5b80356151e1614ad482615d9f565b8181528860208385010111156151f5578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215615225578182fd5b823561523081615dfa565b91506020830135614ccd81615e12565b600060208284031215615251578081fd5b5035919050565b6000806040838503121561526a578182fd5b823591506020830135614ccd81615dfa565b600080600060608486031215615290578081fd5b833592506020840135614db781615dfa565b6000602082840312156152b3578081fd5b81516001600160401b038111156152c8578182fd5b610ab984828501614b24565b6000604082840312156152e5578081fd5b6152ef6040615d5a565b82516152fa81615e20565b8152602083015161530a81615e20565b60208201529392505050565b600060208284031215615327578081fd5b5051919050565b60008060408385031215615340578182fd5b505080516020909101519092909150565b600060208284031215615362578081fd5b8135610b1281615e35565b60006020828403121561537e578081fd5b8151610b1281615e35565b600081518084526153a1816020860160208601615dce565b601f01601f19169290920160200192915050565b600082516153c7818460208701615dce565b9190910192915050565b600083516153e3818460208801615dce565b9190910191825250602001919050565b60008451615405818460208901615dce565b91909101928352506020820152604001919050565b600071025b0b9b4349026b2b234bab6902934b9b5960751b82528451615447816012850160208901615dce565b602f60f81b6012918401918201528451615468816013840160208901615dce565b602d60f81b60139290910191820152835161548a816014840160208801615dce565b0160140195945050505050565b6000616b6d60f01b825284516154b4816002850160208901615dce565b602f60f81b60029184019182015284516154d5816003840160208901615dce565b602d60f81b6003929091019182015283516154f7816004840160208801615dce565b0160040195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b901515815260200190565b9115158252602082015260400190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610b126020830184615389565b60006020808301818452828554600180821660008114615620576001811461563e57615676565b60028304607f16855260ff1983166040890152606088019350615676565b6002830480865261564e8a615dc2565b885b8281101561566c5781548b820160400152908401908801615650565b8a01604001955050505b5091979650505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006080820160018060a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b8181101561574e578551851683529483019491830191600101615730565b50508581036060870152865180825290820193509150808601845b8381101561578557815185529382019390820190600101615769565b50929998505050505050505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b93845260208401929092526001600160401b03166040830152606082015260800190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b6020808252601e908201527f4b61736869506169723a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526016908201527545524332303a206e6f207a65726f206164647265737360501b604082015260600190565b6020808252601a908201527f4b61736869506169723a20616c6c2061726520736f6c76656e74000000000000604082015260600190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b60208082526016908201527512d85cda1a54185a5c8e8818d85b1b0819985a5b195960521b604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526013908201527225b0b9b434a830b4b91d103130b2103830b4b960691b604082015260600190565b60208082526018908201527f45524332303a20616c6c6f77616e636520746f6f206c6f770000000000000000604082015260600190565b60208082526015908201527412d85cda1a54185a5c8e8818d85b89dd0818d85b1b605a1b604082015260600190565b6020808252600e908201526d115490cc8c0e88115e1c1a5c995960921b604082015260600190565b60208082526019908201527f4b61736869506169723a207573657220696e736f6c76656e7400000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526018908201527f45524332303a204f776e65722063616e6e6f7420626520300000000000000000604082015260600190565b6020808252601490820152734b617368693a2062656c6f77206d696e696d756d60601b604082015260600190565b60208082526016908201527545524332303a2062616c616e636520746f6f206c6f7760501b604082015260600190565b60208082526018908201527f4b61736869506169723a20536b696d20746f6f206d7563680000000000000000604082015260600190565b6020808252601a908201527f4b61736869506169723a20496e76616c69642073776170706572000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252601690820152754b61736869506169723a2072617465206e6f74206f6b60501b604082015260600190565b60208082526018908201527f45524332303a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6001600160801b0392831681529116602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160401b0393841681529190921660208201526001600160801b03909116604082015260600190565b60ff91909116815260200190565b6000808335601e19843603018112615d2c578283fd5b8301803591506001600160401b03821115615d45578283fd5b602001915036819003821315610f1657600080fd5b6040518181016001600160401b0381118282101715615d7857600080fd5b604052919050565b60006001600160401b03821115615d95578081fd5b5060209081020190565b60006001600160401b03821115615db4578081fd5b50601f01601f191660200190565b60009081526020902090565b60005b83811015615de9578181015183820152602001615dd1565b838111156146b05750506000910152565b6001600160a01b0381168114615e0f57600080fd5b50565b8015158114615e0f57600080fd5b6001600160801b0381168114615e0f57600080fd5b60ff81168114615e0f57600080fdfea264697066735822122014d116eece6562af90bb0c25634530fbfa561cda915d3ed59e4309046101c53164736f6c634300060c0033",
  "devdoc": {
    "details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return the DOMAIN_SEPARATOR"
      },
      "addAsset(address,bool,uint256)": {
        "params": {
          "share": "The amount of shares to add.",
          "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
          "to": "The address of the user to receive the assets."
        },
        "returns": {
          "fraction": "Total fractions added."
        }
      },
      "addCollateral(address,bool,uint256)": {
        "params": {
          "share": "The amount of shares to add for `to`.",
          "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
          "to": "The receiver of the tokens."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "The maximum collective amount that `spender` can draw.",
          "spender": "Address of the party that can draw from msg.sender's account."
        },
        "returns": {
          "_0": "(bool) Returns True if approved."
        }
      },
      "borrow(address,uint256)": {
        "returns": {
          "part": "Total part of the debt held by borrowers.",
          "share": "Total amount in shares borrowed."
        }
      },
      "cook(uint8[],uint256[],bytes[])": {
        "params": {
          "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
          "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
          "values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
        },
        "returns": {
          "value1": "May contain the first positioned return value of the last executed action (if applicable).",
          "value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
        }
      },
      "init(bytes)": {
        "details": "`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)"
      },
      "liquidate(address[],uint256[],address,address,bool)": {
        "params": {
          "maxBorrowParts": "A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.",
          "open": "True to perform a open liquidation else False.",
          "swapper": "Contract address of the `ISwapper` implementation. Swappers are restricted for closed liquidations. See `setSwapper`.",
          "to": "Address of the receiver in open liquidations if `swapper` is zero.",
          "users": "An array of user addresses."
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "This permit must be redeemed before this deadline (UTC timestamp in seconds).",
          "owner_": "Address of the owner.",
          "spender": "The address of the spender that gets approved to draw from `owner_`.",
          "value": "The maximum collective amount that `spender` can draw."
        }
      },
      "removeAsset(address,uint256)": {
        "params": {
          "fraction": "The amount/fraction of assets held to remove.",
          "to": "The user that receives the removed assets."
        },
        "returns": {
          "share": "The amount of shares transferred to `to`."
        }
      },
      "removeCollateral(address,uint256)": {
        "params": {
          "share": "Amount of shares to remove.",
          "to": "The receiver of the shares."
        }
      },
      "repay(address,bool,uint256)": {
        "params": {
          "part": "The amount to repay. See `userBorrowPart`.",
          "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
          "to": "Address of the user this payment should go."
        },
        "returns": {
          "amount": "The total amount repayed."
        }
      },
      "setFeeTo(address)": {
        "params": {
          "newFeeTo": "The address of the receiver."
        }
      },
      "setSwapper(address,bool)": {
        "params": {
          "enable": "True to enable the swapper. To disable use False.",
          "swapper": "The address of the swapper contract that conforms to `ISwapper`."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "of the tokens to move.",
          "to": "The address to move the tokens."
        },
        "returns": {
          "_0": "(bool) Returns True if succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The token amount to move.",
          "from": "Address to draw tokens from.",
          "to": "The address to move the tokens."
        },
        "returns": {
          "_0": "(bool) Returns True if succeeded."
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      },
      "updateExchangeRate()": {
        "returns": {
          "rate": "The new exchange rate.",
          "updated": "True if `exchangeRate` was updated."
        }
      }
    },
    "title": "KashiPair",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accrue()": {
        "notice": "Accrues the interest on the borrowed tokens and handles the accumulation of fees."
      },
      "addAsset(address,bool,uint256)": {
        "notice": "Adds assets to the lending pair."
      },
      "addCollateral(address,bool,uint256)": {
        "notice": "Adds `collateral` from msg.sender to the account `to`."
      },
      "allowance(address,address)": {
        "notice": "owner > spender > allowance mapping."
      },
      "approve(address,uint256)": {
        "notice": "Approves `amount` from sender to be spend by `spender`."
      },
      "balanceOf(address)": {
        "notice": "owner > balance mapping."
      },
      "borrow(address,uint256)": {
        "notice": "Sender borrows `amount` and transfers it to `to`."
      },
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": "The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.",
      "cook(uint8[],uint256[],bytes[])": {
        "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
      },
      "exchangeRate()": {
        "notice": "Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive."
      },
      "init(bytes)": {
        "notice": "Serves as the constructor for clones, as clones can't have a regular constructor"
      },
      "liquidate(address[],uint256[],address,address,bool)": {
        "notice": "Handles the liquidation of users' balances, once the users' amount of collateral is too low."
      },
      "nonces(address)": {
        "notice": "owner > nonce mapping. Used in `permit`."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Approves `value` from `owner_` to be spend by `spender`."
      },
      "removeAsset(address,uint256)": {
        "notice": "Removes an asset from msg.sender and transfers it to `to`."
      },
      "removeCollateral(address,uint256)": {
        "notice": "Removes `share` amount of collateral and transfers it to `to`."
      },
      "repay(address,bool,uint256)": {
        "notice": "Repays a loan."
      },
      "setFeeTo(address)": {
        "notice": "Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function."
      },
      "setSwapper(address,bool)": {
        "notice": "Used to register and enable or disable swapper contracts used in closed liquidations. MasterContract Only Admin function."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers `amount` tokens from `msg.sender` to `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "updateExchangeRate()": {
        "notice": "Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive."
      },
      "withdrawFees()": {
        "notice": "Withdraws the fees accumulated."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8351,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8358,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "allowance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8363,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8130,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8132,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10010,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "feeTo",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10014,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "swappers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(ISwapper)9903,t_bool)"
      },
      {
        "astId": 10016,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "collateral",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)9046"
      },
      {
        "astId": 10018,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "asset",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)9046"
      },
      {
        "astId": 10020,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "oracle",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IOracle)9864"
      },
      {
        "astId": 10022,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "oracleData",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes_storage"
      },
      {
        "astId": 10024,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "totalCollateralShare",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10026,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "totalAsset",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Rebase)8681_storage"
      },
      {
        "astId": 10028,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "totalBorrow",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Rebase)8681_storage"
      },
      {
        "astId": 10032,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "userCollateralShare",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10036,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "userBorrowPart",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10039,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10048,
        "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
        "label": "accrueInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(AccrueInfo)10046_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)9046": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9864": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapper)9903": {
        "encoding": "inplace",
        "label": "contract ISwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ISwapper)9903,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(ISwapper)9903",
        "label": "mapping(contract ISwapper => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AccrueInfo)10046_storage": {
        "encoding": "inplace",
        "label": "struct KashiPairMediumRiskV1.AccrueInfo",
        "members": [
          {
            "astId": 10041,
            "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
            "label": "interestPerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 10043,
            "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
            "label": "lastAccrued",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 10045,
            "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
            "label": "feesEarnedFraction",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Rebase)8681_storage": {
        "encoding": "inplace",
        "label": "struct Rebase",
        "members": [
          {
            "astId": 8678,
            "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
            "label": "elastic",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8680,
            "contract": "contracts/bentobox/KashiPairMediumRiskV1.sol:KashiPairMediumRiskV1",
            "label": "base",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}