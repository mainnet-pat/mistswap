{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        }
      ],
      "name": "_get",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "callerInfo",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getDataParameter",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceCumulativeLast",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "blockTimestampLast",
          "type": "uint32"
        },
        {
          "internalType": "uint144",
          "name": "priceAverage",
          "type": "uint144"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "peek",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "peekSpot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54e062253c814619ac8423702baea7650cc25e672d6c9379fa082efe157181f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "805248",
    "logsBloom": "0x
    "blockHash": "0xc3a8d501c61b1e83e50e428da03ae842b00ef8eba584900ac6d645ce2222f22d",
    "transactionHash": "0x54e062253c814619ac8423702baea7650cc25e672d6c9379fa082efe157181f3",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "805248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "538f5d64ee312be250145a166fb09dd6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"}],\"name\":\"_get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callerInfo\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getDataParameter\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceCumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint144\",\"name\":\"priceAverage\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"peekSpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"get(bytes)\":{\"params\":{\"data\":\"Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\"},\"returns\":{\"_0\":\"success if no valid (recent) rate is available, return false else true.\",\"_1\":\"rate The rate of the requested asset / pair / pool.\"}},\"name(bytes)\":{\"params\":{\"data\":\"Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\"},\"returns\":{\"_0\":\"(string) A human readable name about this oracle.\"}},\"peek(bytes)\":{\"params\":{\"data\":\"Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\"},\"returns\":{\"_0\":\"success if no valid (recent) rate is available, return false else true.\",\"_1\":\"rate The rate of the requested asset / pair / pool.\"}},\"peekSpot(bytes)\":{\"params\":{\"data\":\"Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\"},\"returns\":{\"rate\":\"The rate of the requested asset / pair / pool.\"}},\"symbol(bytes)\":{\"params\":{\"data\":\"Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\"},\"returns\":{\"_0\":\"(string) A human readable symbol name about this oracle.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"get(bytes)\":{\"notice\":\"Get the latest exchange rate.\"},\"name(bytes)\":{\"notice\":\"Returns a human readable name about this oracle.\"},\"peek(bytes)\":{\"notice\":\"Check the last exchange rate without any state changes.\"},\"peekSpot(bytes)\":{\"notice\":\"Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\"},\"symbol(bytes)\":{\"notice\":\"Returns a human readable (short) name about this oracle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bentobox/SimpleSLPTWAP0Oracle.sol\":\"SimpleSLPTWAP0Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"BoringMath: Mul Overflow\\\");}\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\\r\\n\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\\r\\n\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");}\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");}\\r\\n}\",\"keccak256\":\"0x2d0e99483c5618251d4b52e8551918253bf044c63e0d09a2f1f652671f9ff762\",\"license\":\"MIT\"},\"contracts/bentobox/SimpleSLPTWAP0Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n// Using the same Copyleft License as in the original Repository\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\n\\n// File contracts/interfaces/IOracle.sol\\n// License-Identifier: MIT\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\\n// solhint-disable not-rely-on-time\\n\\n// adapted from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleSlidingWindowOracle.sol\\n\\ncontract SimpleSLPTWAP0Oracle is IOracle {\\n    using FixedPoint for *;\\n    using BoringMath for uint256;\\n    uint256 public constant PERIOD = 5 minutes;\\n\\n    struct PairInfo {\\n        uint256 priceCumulativeLast;\\n        uint32 blockTimestampLast;\\n        uint144 priceAverage;\\n    }\\n\\n    mapping(IUniswapV2Pair => PairInfo) public pairs; // Map of pairs and their info\\n    mapping(address => IUniswapV2Pair) public callerInfo; // Map of callers to pairs\\n\\n    function _get(IUniswapV2Pair pair, uint32 blockTimestamp) public view returns (uint256) {\\n        uint256 priceCumulative = pair.price0CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        priceCumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * (blockTimestamp - blockTimestampLast); // overflows ok\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        return priceCumulative;\\n    }\\n\\n    function getDataParameter(IUniswapV2Pair pair) public pure returns (bytes memory) {\\n        return abi.encode(pair);\\n    }\\n\\n    // Get the latest exchange rate, if no valid (recent) rate is available, return false\\n    /// @inheritdoc IOracle\\n    function get(bytes calldata data) external override returns (bool, uint256) {\\n        IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));\\n        uint32 blockTimestamp = uint32(block.timestamp);\\n        if (pairs[pair].blockTimestampLast == 0) {\\n            pairs[pair].blockTimestampLast = blockTimestamp;\\n            pairs[pair].priceCumulativeLast = _get(pair, blockTimestamp);\\n            return (false, 0);\\n        }\\n        uint32 timeElapsed = blockTimestamp - pairs[pair].blockTimestampLast; // overflow is desired\\n        if (timeElapsed < PERIOD) {\\n            return (true, pairs[pair].priceAverage);\\n        }\\n\\n        uint256 priceCumulative = _get(pair, blockTimestamp);\\n        pairs[pair].priceAverage = FixedPoint\\n            .uq112x112(uint224((priceCumulative - pairs[pair].priceCumulativeLast) / timeElapsed))\\n            .mul(1e18)\\n            .decode144();\\n        pairs[pair].blockTimestampLast = blockTimestamp;\\n        pairs[pair].priceCumulativeLast = priceCumulative;\\n\\n        return (true, pairs[pair].priceAverage);\\n    }\\n\\n    // Check the last exchange rate without any state changes\\n    /// @inheritdoc IOracle\\n    function peek(bytes calldata data) public view override returns (bool, uint256) {\\n        IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));\\n        uint32 blockTimestamp = uint32(block.timestamp);\\n        if (pairs[pair].blockTimestampLast == 0) {\\n            return (false, 0);\\n        }\\n        uint32 timeElapsed = blockTimestamp - pairs[pair].blockTimestampLast; // overflow is desired\\n        if (timeElapsed < PERIOD) {\\n            return (true, pairs[pair].priceAverage);\\n        }\\n\\n        uint256 priceCumulative = _get(pair, blockTimestamp);\\n        uint144 priceAverage =\\n            FixedPoint.uq112x112(uint224((priceCumulative - pairs[pair].priceCumulativeLast) / timeElapsed)).mul(1e18).decode144();\\n\\n        return (true, priceAverage);\\n    }\\n\\n    // Check the current spot exchange rate without any state changes\\n    /// @inheritdoc IOracle\\n    function peekSpot(bytes calldata data) external view override returns (uint256 rate) {\\n        IUniswapV2Pair pair = abi.decode(data, (IUniswapV2Pair));\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        rate = reserve1.mul(1e18) / reserve0;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function name(bytes calldata) public view override returns (string memory) {\\n        return \\\"MistSwap TWAP\\\";\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function symbol(bytes calldata) public view override returns (string memory) {\\n        return \\\"M\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xe69b4f463496af82a15ca598a4e62080b349c64c8fcc559c61db9e37823f5ba5\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\nimport \\\"./FullMath.sol\\\";\\n\\n// solhint-disable\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint256, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // lossy if either numerator or denominator is greater than 112 bits\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: div by 0\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2907da9fd905462ae5cd6ab07f46ec0527d29b845d2ca1f0279fc73e53710923\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity 0.6.12;\\n\\n// solhint-disable\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xfaac2090835dd2a77c6da1ed2de0baa8c18d6cda3c1c8096668dc9fb885cdb47\",\"license\":\"CC-BY-4.0\"},\"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xcaec675e6250bf4cd3364459a0cbf789262af2aaa377d61d4d463f657aea7b50\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d9d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063d39bbef011610066578063d39bbef014610127578063d568866c1461013a578063d6d7d5251461014d578063eeb8a8d31461016e578063fe33b302146101815761009e565b80634709904d146100a357806354fd9238146100cc5780637046db52146100ec578063b4d1d7951461010c578063c699c4d614610114575b600080fd5b6100b66100b1366004610a39565b6101a3565b6040516100c39190610bd3565b60405180910390f35b6100df6100da366004610ac9565b6101be565b6040516100c39190610cfa565b6100ff6100fa366004610a39565b6102f0565b6040516100c39190610bc0565b6100df610319565b6100ff610122366004610a5c565b61031f565b6100df610135366004610a5c565b61033c565b6100ff610148366004610a5c565b6103f7565b61016061015b366004610a5c565b610420565b6040516100c3929190610bb0565b61016061017c366004610a5c565b61061e565b61019461018f366004610a39565b610751565b6040516100c393929190610d03565b6001602052600090815260409020546001600160a01b031681565b600080836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fa57600080fd5b505afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610b4d565b90506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa9190610b01565b92509250925080860363ffffffff166102d5836001600160701b0316856001600160701b0316610783565b516001600160e01b0316029390930193505050505b92915050565b6060816040516020016103039190610bd3565b6040516020818303038152906040529050919050565b61012c81565b50506040805180820190915260018152604d60f81b602082015290565b60008061034b83850185610a39565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561038957600080fd5b505afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610b01565b506001600160701b039182169350169050816103e582670de0b6b3a764000061086f565b816103ec57fe5b049695505050505050565b505060408051808201909152600d81526c04d69737453776170205457415609c1b602082015290565b6000808061043084860186610a39565b6001600160a01b038116600090815260208190526040902060010154909150429063ffffffff166104bb576001600160a01b0382166000908152602081905260409020600101805463ffffffff191663ffffffff831617905561049382826101be565b6001600160a01b03909216600090815260208190526040812092909255509150819050610617565b6001600160a01b03821660009081526020819052604090206001015463ffffffff90811682039061012c90821610156105285750506001600160a01b0316600090815260208190526040902060019081015490925064010000000090046001600160901b03169050610617565b600061053484846101be565b905061059f61059a670de0b6b3a764000060405180602001604052808663ffffffff166000808b6001600160a01b03166001600160a01b031681526020019081526020016000206000015487038161058857fe5b046001600160e01b03169052906108a6565b610905565b6001600160a01b0390941660009081526020819052604090206001808201805463ffffffff90961663ffffffff196001600160901b0398891664010000000090810275ffffffffffffffffffffffffffffffffffff000000001990991698909817161790819055929091559550919091049091169150505b9250929050565b6000808061062e84860186610a39565b6001600160a01b038116600090815260208190526040902060010154909150429063ffffffff1661066757600080935093505050610617565b6001600160a01b03821660009081526020819052604090206001015463ffffffff90811682039061012c90821610156106d45750506001600160a01b0316600090815260208190526040902060019081015490925064010000000090046001600160901b03169050610617565b60006106e084846101be565b9050600061073661059a670de0b6b3a764000060405180602001604052808763ffffffff166000808c6001600160a01b03166001600160a01b031681526020019081526020016000206000015488038161058857fe5b600197506001600160901b0316955050505050509250929050565b6000602081905290815260409020805460019091015463ffffffff81169064010000000090046001600160901b031683565b61078b610a14565b600082116107b45760405162461bcd60e51b81526004016107ab90610c8c565b60405180910390fd5b826107ce57506040805160208101909152600081526102ea565b6001600160901b03831161083557600082607085901b816107eb57fe5b0490506001600160e01b038111156108155760405162461bcd60e51b81526004016107ab90610c55565b6040518060200160405280826001600160e01b03168152509150506102ea565b600061084684600160701b8561090c565b90506001600160e01b038111156108155760405162461bcd60e51b81526004016107ab90610c55565b600081158061088a5750508082028282828161088757fe5b04145b6102ea5760405162461bcd60e51b81526004016107ab90610cc3565b6108ae610a26565b60008215806108d457505082516001600160e01b0316828102908382816108d157fe5b04145b6108f05760405162461bcd60e51b81526004016107ab90610be7565b60408051602081019091529081529392505050565b5160701c90565b600080600061091b8686610977565b915091506000848061092957fe5b86880990508281111561093d576001820391505b80830392508482106109615760405162461bcd60e51b81526004016107ab90610c1e565b61096c8383876109a4565b979650505050505050565b600080806000198486099050838502925082810391508281101561099c576001820391505b509250929050565b600081810382168083816109b457fe5b0492508085816109c057fe5b0494508081600003816109cf57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b60408051602081019091526000815290565b6040518060200160405280600081525090565b600060208284031215610a4a578081fd5b8135610a5581610d28565b9392505050565b60008060208385031215610a6e578081fd5b823567ffffffffffffffff80821115610a85578283fd5b818501915085601f830112610a98578283fd5b813581811115610aa6578384fd5b866020828501011115610ab7578384fd5b60209290920196919550909350505050565b60008060408385031215610adb578182fd5b8235610ae681610d28565b91506020830135610af681610d55565b809150509250929050565b600080600060608486031215610b15578081fd5b8351610b2081610d40565b6020850151909350610b3181610d40565b6040850151909250610b4281610d55565b809150509250925092565b600060208284031215610b5e578081fd5b5051919050565b60008151808452815b81811015610b8a57602081850181015186830182015201610b6e565b81811115610b9b5782602083870101525b50601f01601f19169290920160200192915050565b9115158252602082015260400190565b600060208252610a556020830184610b65565b6001600160a01b0391909116815260200190565b60208082526019908201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604082015260600190565b6020808252601a908201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a2064697620627920300000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b90815260200190565b92835263ffffffff9190911660208301526001600160901b0316604082015260600190565b6001600160a01b0381168114610d3d57600080fd5b50565b6001600160701b0381168114610d3d57600080fd5b63ffffffff81168114610d3d57600080fdfea264697066735822122085bb0e26f85835eb2134076f1cf8ffa253e40712918d6b9065ec76d10506287a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063d39bbef011610066578063d39bbef014610127578063d568866c1461013a578063d6d7d5251461014d578063eeb8a8d31461016e578063fe33b302146101815761009e565b80634709904d146100a357806354fd9238146100cc5780637046db52146100ec578063b4d1d7951461010c578063c699c4d614610114575b600080fd5b6100b66100b1366004610a39565b6101a3565b6040516100c39190610bd3565b60405180910390f35b6100df6100da366004610ac9565b6101be565b6040516100c39190610cfa565b6100ff6100fa366004610a39565b6102f0565b6040516100c39190610bc0565b6100df610319565b6100ff610122366004610a5c565b61031f565b6100df610135366004610a5c565b61033c565b6100ff610148366004610a5c565b6103f7565b61016061015b366004610a5c565b610420565b6040516100c3929190610bb0565b61016061017c366004610a5c565b61061e565b61019461018f366004610a39565b610751565b6040516100c393929190610d03565b6001602052600090815260409020546001600160a01b031681565b600080836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156101fa57600080fd5b505afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610b4d565b90506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa9190610b01565b92509250925080860363ffffffff166102d5836001600160701b0316856001600160701b0316610783565b516001600160e01b0316029390930193505050505b92915050565b6060816040516020016103039190610bd3565b6040516020818303038152906040529050919050565b61012c81565b50506040805180820190915260018152604d60f81b602082015290565b60008061034b83850185610a39565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561038957600080fd5b505afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610b01565b506001600160701b039182169350169050816103e582670de0b6b3a764000061086f565b816103ec57fe5b049695505050505050565b505060408051808201909152600d81526c04d69737453776170205457415609c1b602082015290565b6000808061043084860186610a39565b6001600160a01b038116600090815260208190526040902060010154909150429063ffffffff166104bb576001600160a01b0382166000908152602081905260409020600101805463ffffffff191663ffffffff831617905561049382826101be565b6001600160a01b03909216600090815260208190526040812092909255509150819050610617565b6001600160a01b03821660009081526020819052604090206001015463ffffffff90811682039061012c90821610156105285750506001600160a01b0316600090815260208190526040902060019081015490925064010000000090046001600160901b03169050610617565b600061053484846101be565b905061059f61059a670de0b6b3a764000060405180602001604052808663ffffffff166000808b6001600160a01b03166001600160a01b031681526020019081526020016000206000015487038161058857fe5b046001600160e01b03169052906108a6565b610905565b6001600160a01b0390941660009081526020819052604090206001808201805463ffffffff90961663ffffffff196001600160901b0398891664010000000090810275ffffffffffffffffffffffffffffffffffff000000001990991698909817161790819055929091559550919091049091169150505b9250929050565b6000808061062e84860186610a39565b6001600160a01b038116600090815260208190526040902060010154909150429063ffffffff1661066757600080935093505050610617565b6001600160a01b03821660009081526020819052604090206001015463ffffffff90811682039061012c90821610156106d45750506001600160a01b0316600090815260208190526040902060019081015490925064010000000090046001600160901b03169050610617565b60006106e084846101be565b9050600061073661059a670de0b6b3a764000060405180602001604052808763ffffffff166000808c6001600160a01b03166001600160a01b031681526020019081526020016000206000015488038161058857fe5b600197506001600160901b0316955050505050509250929050565b6000602081905290815260409020805460019091015463ffffffff81169064010000000090046001600160901b031683565b61078b610a14565b600082116107b45760405162461bcd60e51b81526004016107ab90610c8c565b60405180910390fd5b826107ce57506040805160208101909152600081526102ea565b6001600160901b03831161083557600082607085901b816107eb57fe5b0490506001600160e01b038111156108155760405162461bcd60e51b81526004016107ab90610c55565b6040518060200160405280826001600160e01b03168152509150506102ea565b600061084684600160701b8561090c565b90506001600160e01b038111156108155760405162461bcd60e51b81526004016107ab90610c55565b600081158061088a5750508082028282828161088757fe5b04145b6102ea5760405162461bcd60e51b81526004016107ab90610cc3565b6108ae610a26565b60008215806108d457505082516001600160e01b0316828102908382816108d157fe5b04145b6108f05760405162461bcd60e51b81526004016107ab90610be7565b60408051602081019091529081529392505050565b5160701c90565b600080600061091b8686610977565b915091506000848061092957fe5b86880990508281111561093d576001820391505b80830392508482106109615760405162461bcd60e51b81526004016107ab90610c1e565b61096c8383876109a4565b979650505050505050565b600080806000198486099050838502925082810391508281101561099c576001820391505b509250929050565b600081810382168083816109b457fe5b0492508085816109c057fe5b0494508081600003816109cf57fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b60408051602081019091526000815290565b6040518060200160405280600081525090565b600060208284031215610a4a578081fd5b8135610a5581610d28565b9392505050565b60008060208385031215610a6e578081fd5b823567ffffffffffffffff80821115610a85578283fd5b818501915085601f830112610a98578283fd5b813581811115610aa6578384fd5b866020828501011115610ab7578384fd5b60209290920196919550909350505050565b60008060408385031215610adb578182fd5b8235610ae681610d28565b91506020830135610af681610d55565b809150509250929050565b600080600060608486031215610b15578081fd5b8351610b2081610d40565b6020850151909350610b3181610d40565b6040850151909250610b4281610d55565b809150509250925092565b600060208284031215610b5e578081fd5b5051919050565b60008151808452815b81811015610b8a57602081850181015186830182015201610b6e565b81811115610b9b5782602083870101525b50601f01601f19169290920160200192915050565b9115158252602082015260400190565b600060208252610a556020830184610b65565b6001600160a01b0391909116815260200190565b60208082526019908201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604082015260600190565b6020808252601a908201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a2064697620627920300000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b90815260200190565b92835263ffffffff9190911660208301526001600160901b0316604082015260600190565b6001600160a01b0381168114610d3d57600080fd5b50565b6001600160701b0381168114610d3d57600080fd5b63ffffffff81168114610d3d57600080fdfea264697066735822122085bb0e26f85835eb2134076f1cf8ffa253e40712918d6b9065ec76d10506287a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "get(bytes)": {
        "params": {
          "data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
        },
        "returns": {
          "_0": "success if no valid (recent) rate is available, return false else true.",
          "_1": "rate The rate of the requested asset / pair / pool."
        }
      },
      "name(bytes)": {
        "params": {
          "data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
        },
        "returns": {
          "_0": "(string) A human readable name about this oracle."
        }
      },
      "peek(bytes)": {
        "params": {
          "data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
        },
        "returns": {
          "_0": "success if no valid (recent) rate is available, return false else true.",
          "_1": "rate The rate of the requested asset / pair / pool."
        }
      },
      "peekSpot(bytes)": {
        "params": {
          "data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
        },
        "returns": {
          "rate": "The rate of the requested asset / pair / pool."
        }
      },
      "symbol(bytes)": {
        "params": {
          "data": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));"
        },
        "returns": {
          "_0": "(string) A human readable symbol name about this oracle."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "get(bytes)": {
        "notice": "Get the latest exchange rate."
      },
      "name(bytes)": {
        "notice": "Returns a human readable name about this oracle."
      },
      "peek(bytes)": {
        "notice": "Check the last exchange rate without any state changes."
      },
      "peekSpot(bytes)": {
        "notice": "Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek()."
      },
      "symbol(bytes)": {
        "notice": "Returns a human readable (short) name about this oracle."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12906,
        "contract": "contracts/bentobox/SimpleSLPTWAP0Oracle.sol:SimpleSLPTWAP0Oracle",
        "label": "pairs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IUniswapV2Pair)25136,t_struct(PairInfo)12902_storage)"
      },
      {
        "astId": 12910,
        "contract": "contracts/bentobox/SimpleSLPTWAP0Oracle.sol:SimpleSLPTWAP0Oracle",
        "label": "callerInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IUniswapV2Pair)25136)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)25136": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IUniswapV2Pair)25136)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IUniswapV2Pair)",
        "numberOfBytes": "32",
        "value": "t_contract(IUniswapV2Pair)25136"
      },
      "t_mapping(t_contract(IUniswapV2Pair)25136,t_struct(PairInfo)12902_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IUniswapV2Pair)25136",
        "label": "mapping(contract IUniswapV2Pair => struct SimpleSLPTWAP0Oracle.PairInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PairInfo)12902_storage"
      },
      "t_struct(PairInfo)12902_storage": {
        "encoding": "inplace",
        "label": "struct SimpleSLPTWAP0Oracle.PairInfo",
        "members": [
          {
            "astId": 12897,
            "contract": "contracts/bentobox/SimpleSLPTWAP0Oracle.sol:SimpleSLPTWAP0Oracle",
            "label": "priceCumulativeLast",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12899,
            "contract": "contracts/bentobox/SimpleSLPTWAP0Oracle.sol:SimpleSLPTWAP0Oracle",
            "label": "blockTimestampLast",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 12901,
            "contract": "contracts/bentobox/SimpleSLPTWAP0Oracle.sol:SimpleSLPTWAP0Oracle",
            "label": "priceAverage",
            "offset": 4,
            "slot": "1",
            "type": "t_uint144"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint144": {
        "encoding": "inplace",
        "label": "uint144",
        "numberOfBytes": "18"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}